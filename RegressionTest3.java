import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        org.jsoup.nodes.Node node3 = textNode2.root();
        java.lang.String str5 = textNode2.absUrl("#declaration");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("#root=\"\"");
        java.lang.String str8 = textNode2.getWholeText();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#root=\"\"" + "'", str8, "#root=\"\"");
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection.Request request19 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection20 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response21 = httpConnection20.response();
        java.lang.String str22 = response21.statusMessage();
        java.lang.String str23 = response21.statusMessage();
        java.lang.String str24 = response21.charset();
        org.jsoup.Connection connection25 = httpConnection0.response(response21);
        org.jsoup.helper.HttpConnection httpConnection26 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request27 = httpConnection26.request();
        org.jsoup.Connection.Request request30 = request27.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = request30.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = request30.headers();
        org.jsoup.Connection connection33 = httpConnection0.headers(strMap32);
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(response21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(connection25);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(connection33);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.jsoup.select.Evaluator.Attribute attribute1 = new org.jsoup.select.Evaluator.Attribute("");
        java.lang.String str2 = attribute1.toString();
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("[]", "#text");
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parseBodyFragment("PUBLIC", "[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
        org.jsoup.nodes.Element element9 = document8.previousElementSibling();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = attribute1.matches((org.jsoup.nodes.Element) document5, element9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.jsoup.nodes.Element.hasAttr(String)\" because \"element\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(element9);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element3 = document1.val("hi!");
        org.jsoup.nodes.Element element4 = document1.clone();
        org.jsoup.select.Elements elements6 = element4.getElementsMatchingText("");
        org.jsoup.select.Elements elements8 = element4.getElementsContainingText("#text");
        org.jsoup.select.Elements elements10 = elements8.addClass("Content-Encoding");
        org.jsoup.helper.HttpConnection httpConnection11 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        org.jsoup.Connection connection13 = httpConnection11.sslSocketFactory(sSLSocketFactory12);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        org.jsoup.Connection connection15 = httpConnection11.sslSocketFactory(sSLSocketFactory14);
        org.jsoup.Connection.Request request16 = httpConnection11.request();
        org.jsoup.helper.HttpConnection httpConnection17 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request18 = httpConnection17.request();
        org.jsoup.Connection.Request request21 = request18.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = request21.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = request21.cookies();
        org.jsoup.Connection connection24 = httpConnection11.headers(strMap23);
        org.jsoup.Connection connection27 = connection24.data("multipart/form-data", "");
        org.jsoup.Connection connection29 = connection24.ignoreContentType(false);
        org.jsoup.helper.HttpConnection httpConnection30 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = null;
        org.jsoup.Connection connection32 = httpConnection30.sslSocketFactory(sSLSocketFactory31);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = null;
        org.jsoup.Connection connection34 = httpConnection30.sslSocketFactory(sSLSocketFactory33);
        org.jsoup.Connection.Request request35 = httpConnection30.request();
        org.jsoup.helper.HttpConnection httpConnection36 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request37 = httpConnection36.request();
        org.jsoup.Connection.Request request40 = request37.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = request40.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = request40.cookies();
        org.jsoup.Connection connection43 = httpConnection30.headers(strMap42);
        org.jsoup.helper.HttpConnection.KeyVal keyVal46 = org.jsoup.helper.HttpConnection.KeyVal.create("#root", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.Connection.KeyVal[] keyValArray47 = new org.jsoup.Connection.KeyVal[] { keyVal46 };
        java.util.ArrayList<org.jsoup.Connection.KeyVal> keyValList48 = new java.util.ArrayList<org.jsoup.Connection.KeyVal>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList48, keyValArray47);
        org.jsoup.Connection connection50 = connection43.data((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList48);
        org.jsoup.Connection connection51 = connection29.data((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList48);
        boolean boolean52 = elements10.contains((java.lang.Object) keyValList48);
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor54 = parseErrorList53.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream55 = parseErrorList53.parallelStream();
        org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str58 = document57.id();
        org.jsoup.select.Elements elements59 = document57.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor60 = elements59.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor61 = elements59.listIterator();
        org.jsoup.select.Elements elements62 = elements59.empty();
        org.jsoup.nodes.Document document64 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str65 = document64.id();
        org.jsoup.select.Elements elements66 = document64.previousElementSiblings();
        org.jsoup.select.Elements elements68 = elements66.prev("#text");
        boolean boolean69 = elements66.hasText();
        org.jsoup.nodes.Document document71 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str72 = document71.id();
        org.jsoup.select.Elements elements73 = document71.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor74 = elements73.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor75 = elements73.listIterator();
        org.jsoup.select.Elements elements76 = elements73.empty();
        org.jsoup.nodes.Document document78 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str79 = document78.id();
        org.jsoup.select.Elements elements80 = document78.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor81 = elements80.listIterator();
        boolean boolean83 = elements80.equals((java.lang.Object) 1.0d);
        java.lang.String str84 = elements80.text();
        org.jsoup.select.Elements elements86 = elements80.wrap("#root");
        org.jsoup.select.Elements[] elementsArray87 = new org.jsoup.select.Elements[] { elements59, elements66, elements73, elements86 };
        org.jsoup.select.Elements[] elementsArray88 = parseErrorList53.toArray(elementsArray87);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream89 = parseErrorList53.stream();
        boolean boolean90 = elements10.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList53);
        java.lang.Object[] objArray91 = parseErrorList53.toArray();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(connection13);
        org.junit.Assert.assertNotNull(connection15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(connection24);
        org.junit.Assert.assertNotNull(connection27);
        org.junit.Assert.assertNotNull(connection29);
        org.junit.Assert.assertNotNull(connection32);
        org.junit.Assert.assertNotNull(connection34);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(connection43);
        org.junit.Assert.assertNotNull(keyVal46);
        org.junit.Assert.assertNotNull(keyValArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(connection50);
        org.junit.Assert.assertNotNull(connection51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorItor54);
        org.junit.Assert.assertNotNull(parseErrorStream55);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(elements59);
        org.junit.Assert.assertNotNull(elementItor60);
        org.junit.Assert.assertNotNull(elementItor61);
        org.junit.Assert.assertNotNull(elements62);
        org.junit.Assert.assertNotNull(document64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(elements66);
        org.junit.Assert.assertNotNull(elements68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(document71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(elements73);
        org.junit.Assert.assertNotNull(elementItor74);
        org.junit.Assert.assertNotNull(elementItor75);
        org.junit.Assert.assertNotNull(elements76);
        org.junit.Assert.assertNotNull(document78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(elements80);
        org.junit.Assert.assertNotNull(elementItor81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(elements86);
        org.junit.Assert.assertNotNull(elementsArray87);
        org.junit.Assert.assertNotNull(elementsArray88);
        org.junit.Assert.assertNotNull(parseErrorStream89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        org.jsoup.Connection connection6 = httpConnection0.ignoreContentType(false);
        org.jsoup.Connection.Method method7 = org.jsoup.Connection.Method.OPTIONS;
        boolean boolean8 = method7.hasBody();
        org.jsoup.Connection connection9 = httpConnection0.method(method7);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder10 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser11 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder10);
        org.jsoup.Connection connection12 = httpConnection0.parser(parser11);
        org.jsoup.Connection.Response response13 = httpConnection0.response();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertTrue("'" + method7 + "' != '" + org.jsoup.Connection.Method.OPTIONS + "'", method7.equals(org.jsoup.Connection.Method.OPTIONS));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(response13);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType2 = new org.jsoup.select.Evaluator.IsNthLastOfType((-1), (-1));
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element6 = document4.val("hi!");
        org.jsoup.nodes.Element element7 = document4.clone();
        java.util.List<org.jsoup.nodes.DataNode> dataNodeList8 = document4.dataNodes();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan10 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType13 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.id();
        org.jsoup.select.Elements elements17 = document15.previousElementSiblings();
        org.jsoup.nodes.Element element18 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType13, (org.jsoup.nodes.Element) document15);
        org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str21 = document20.className();
        java.lang.String str22 = document20.outerHtml();
        org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str25 = document24.id();
        java.lang.String str26 = document24.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan28 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean29 = document24.is((org.jsoup.select.Evaluator) indexLessThan28);
        boolean boolean30 = isNthLastOfType13.matches((org.jsoup.nodes.Element) document20, (org.jsoup.nodes.Element) document24);
        java.lang.String str31 = document24.cssSelector();
        org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str34 = document33.className();
        java.lang.String str35 = document33.outerHtml();
        boolean boolean37 = document33.hasSameValue((java.lang.Object) 1);
        boolean boolean38 = indexLessThan10.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document33);
        org.jsoup.nodes.Document.QuirksMode quirksMode39 = org.jsoup.nodes.Document.QuirksMode.quirks;
        org.jsoup.nodes.Document document40 = document33.quirksMode(quirksMode39);
        org.jsoup.select.Elements elements43 = document40.getElementsByAttributeValueMatching("multipart/form-data", "hi!");
        java.util.Set<java.lang.String> strSet44 = document40.classNames();
        org.jsoup.nodes.Element element45 = document4.appendTo((org.jsoup.nodes.Element) document40);
        org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str48 = document47.wholeText();
        org.jsoup.nodes.Document document49 = document47.clone();
        java.lang.String str50 = document49.title();
        boolean boolean51 = isNthLastOfType2.matches((org.jsoup.nodes.Element) document40, (org.jsoup.nodes.Element) document49);
        org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str54 = document53.className();
        java.lang.String str55 = document53.outerHtml();
        org.jsoup.nodes.Element element57 = document53.createElement("#root");
        org.jsoup.nodes.Node node58 = document53.shallowClone();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element59 = document49.before((org.jsoup.nodes.Node) document53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(dataNodeList8);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNull(element18);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str22, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "#root" + "'", str31, "#root");
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str35, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + quirksMode39 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode39.equals(org.jsoup.nodes.Document.QuirksMode.quirks));
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(elements43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(element45);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str55, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(element57);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.jsoup.nodes.TextNode textNode1 = new org.jsoup.nodes.TextNode("[:eq(-1)!=#doctype]");
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        java.io.InputStream inputStream2 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal3 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream2);
        java.io.InputStream inputStream4 = keyVal3.inputStream();
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        org.jsoup.Connection connection7 = httpConnection5.sslSocketFactory(sSLSocketFactory6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = null;
        org.jsoup.Connection connection9 = httpConnection5.sslSocketFactory(sSLSocketFactory8);
        org.jsoup.Connection.Request request10 = httpConnection5.request();
        org.jsoup.helper.HttpConnection httpConnection11 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request12 = httpConnection11.request();
        org.jsoup.Connection.Request request15 = request12.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = request15.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = request15.cookies();
        org.jsoup.Connection connection18 = httpConnection5.headers(strMap17);
        java.io.InputStream inputStream21 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream24 = new org.jsoup.internal.ConstrainableInputStream(inputStream21, 1, (int) (byte) 0);
        org.jsoup.Connection connection25 = httpConnection5.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream24);
        org.jsoup.helper.HttpConnection.KeyVal keyVal26 = keyVal3.inputStream((java.io.InputStream) constrainableInputStream24);
        boolean boolean27 = keyVal26.hasInputStream();
        java.lang.String str28 = keyVal26.value();
        org.junit.Assert.assertNotNull(keyVal3);
        org.junit.Assert.assertNull(inputStream4);
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(connection25);
        org.junit.Assert.assertNotNull(keyVal26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "#declaration" + "'", str28, "#declaration");
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.className();
        java.lang.String str3 = document1.outerHtml();
        org.jsoup.select.Elements elements5 = document1.getElementsMatchingOwnText("multipart/form-data");
        java.io.InputStream inputStream6 = null;
        org.jsoup.parser.Parser parser9 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse(inputStream6, "", "#root", parser9);
        org.jsoup.parser.ParseErrorList parseErrorList11 = parser9.getErrors();
        org.jsoup.parser.ParseErrorList parseErrorList12 = parser9.getErrors();
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator13 = parseErrorList12.spliterator();
        boolean boolean14 = elements5.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str3, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(parser9);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        // The following exception was thrown during execution in test generation
        try {
            document1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attribute attribute3 = org.jsoup.nodes.Attribute.createFromEncoded("#root", "");
        org.jsoup.nodes.Attributes attributes4 = attributes0.put(attribute3);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor9 = elements8.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor10 = elements8.listIterator();
        org.jsoup.select.Elements elements11 = elements8.empty();
        boolean boolean12 = attributes4.equals((java.lang.Object) elements8);
        java.lang.String str13 = elements8.toString();
        org.jsoup.select.Elements elements15 = elements8.before(":eq(-1)");
        org.jsoup.nodes.Element element16 = elements8.first();
        org.junit.Assert.assertNotNull(attribute3);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elementItor9);
        org.junit.Assert.assertNotNull(elementItor10);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNull(element16);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType4 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        org.jsoup.nodes.Element element9 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType4, (org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.className();
        java.lang.String str13 = document11.outerHtml();
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.id();
        java.lang.String str17 = document15.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan19 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean20 = document15.is((org.jsoup.select.Evaluator) indexLessThan19);
        boolean boolean21 = isNthLastOfType4.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document15);
        java.lang.String str22 = document15.cssSelector();
        org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str25 = document24.className();
        java.lang.String str26 = document24.outerHtml();
        boolean boolean28 = document24.hasSameValue((java.lang.Object) 1);
        boolean boolean29 = indexLessThan1.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document24);
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType32 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str35 = document34.wholeText();
        org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str38 = document37.className();
        boolean boolean39 = isNthLastOfType32.matches((org.jsoup.nodes.Element) document34, (org.jsoup.nodes.Element) document37);
        org.jsoup.nodes.Document document40 = document34.clone();
        java.lang.String str41 = document34.title();
        org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str44 = document43.id();
        java.lang.String str45 = document43.baseUri();
        org.jsoup.nodes.Element element48 = document43.attr("", true);
        org.jsoup.nodes.Node node51 = document43.attr("#text", "");
        org.jsoup.nodes.Document.QuirksMode quirksMode52 = org.jsoup.nodes.Document.QuirksMode.noQuirks;
        org.jsoup.nodes.Document document53 = document43.quirksMode(quirksMode52);
        boolean boolean54 = indexLessThan1.matches((org.jsoup.nodes.Element) document34, (org.jsoup.nodes.Element) document43);
        org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str57 = document56.className();
        java.lang.String str58 = document56.outerHtml();
        boolean boolean60 = document56.hasSameValue((java.lang.Object) 1);
        org.jsoup.nodes.Document document62 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str63 = document62.className();
        java.lang.String str65 = document62.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str66 = document62.normalName();
        java.lang.String str67 = document62.html();
        boolean boolean68 = indexLessThan1.matches((org.jsoup.nodes.Element) document56, (org.jsoup.nodes.Element) document62);
        org.jsoup.select.NodeFilter nodeFilter69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element70 = document62.filter(nodeFilter69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNull(element9);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#root" + "'", str22, "#root");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str26, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(element48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + quirksMode52 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode52.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks));
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str58, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "#root" + "'", str66, "#root");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str67, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType4 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        org.jsoup.nodes.Element element9 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType4, (org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.className();
        java.lang.String str13 = document11.outerHtml();
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.id();
        java.lang.String str17 = document15.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan19 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean20 = document15.is((org.jsoup.select.Evaluator) indexLessThan19);
        boolean boolean21 = isNthLastOfType4.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document15);
        java.lang.String str22 = document15.cssSelector();
        org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str25 = document24.className();
        java.lang.String str26 = document24.outerHtml();
        boolean boolean28 = document24.hasSameValue((java.lang.Object) 1);
        boolean boolean29 = indexLessThan1.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document24);
        org.jsoup.nodes.Element element31 = document24.prependText("[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
        int int32 = document24.childNodeSize();
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNull(element9);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#root" + "'", str22, "#root");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str26, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages();
        boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2);
        org.jsoup.safety.Whitelist whitelist6 = whitelist2.removeEnforcedAttribute("Content-Encoding", "#root");
        java.lang.String str7 = org.jsoup.Jsoup.clean("", whitelist6);
        org.jsoup.parser.TokenQueue tokenQueue10 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        java.lang.String[] strArray15 = new java.lang.String[] { "multipart/form-data", "Content-Encoding", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36" };
        java.lang.String str16 = tokenQueue10.consumeToAny(strArray15);
        org.jsoup.safety.Whitelist whitelist17 = whitelist6.removeAttributes("multipart", strArray15);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "", "multipart/form-data", "hi!" };
        boolean boolean25 = org.jsoup.internal.StringUtil.in("", strArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.safety.Whitelist whitelist26 = whitelist6.removeTags(strArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(whitelist2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(whitelist6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(whitelist17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.KeyVal keyVal6 = httpConnection0.data(":lt(52)");
        java.lang.String[] strArray10 = new java.lang.String[] { "ltipart/form-data", ":containsData( )", "#root=\"\"" };
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection connection11 = httpConnection0.data(strArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply an even number of key value pairs");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNull(keyVal6);
        org.junit.Assert.assertNotNull(strArray10);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.jsoup.select.Evaluator.Tag tag1 = new org.jsoup.select.Evaluator.Tag("#text");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType6 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str9 = document8.id();
        org.jsoup.select.Elements elements10 = document8.previousElementSiblings();
        org.jsoup.nodes.Element element11 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType6, (org.jsoup.nodes.Element) document8);
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.className();
        java.lang.String str15 = document13.outerHtml();
        org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str18 = document17.id();
        java.lang.String str19 = document17.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan21 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean22 = document17.is((org.jsoup.select.Evaluator) indexLessThan21);
        boolean boolean23 = isNthLastOfType6.matches((org.jsoup.nodes.Element) document13, (org.jsoup.nodes.Element) document17);
        java.lang.String str24 = document17.cssSelector();
        org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str27 = document26.className();
        java.lang.String str28 = document26.outerHtml();
        boolean boolean30 = document26.hasSameValue((java.lang.Object) 1);
        boolean boolean31 = indexLessThan3.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document26);
        org.jsoup.parser.Parser parser32 = document17.parser();
        java.lang.String str33 = document17.val();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType36 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str39 = document38.className();
        java.lang.String str40 = document38.outerHtml();
        boolean boolean42 = document38.hasSameValue((java.lang.Object) 1);
        java.lang.String str43 = document38.tagName();
        org.jsoup.nodes.Document document45 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element47 = document45.val("hi!");
        boolean boolean48 = isNthLastOfType36.matches((org.jsoup.nodes.Element) document38, element47);
        boolean boolean49 = tag1.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document38);
        java.lang.String str50 = tag1.toString();
        org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str53 = document52.wholeText();
        org.jsoup.select.Elements elements54 = document52.parents();
        org.jsoup.nodes.Element element55 = document52.shallowClone();
        org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str58 = document57.id();
        java.lang.String str59 = document57.baseUri();
        org.jsoup.nodes.Element element62 = document57.attr("", true);
        org.jsoup.nodes.Node node65 = document57.attr("#text", "");
        org.jsoup.nodes.Element element67 = document57.html("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        boolean boolean68 = tag1.matches(element55, element67);
        org.jsoup.nodes.Element element69 = element55.clone();
        org.jsoup.select.Elements elements71 = element55.getElementsByTag("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>=\"#root\"");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNull(element11);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str15, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#root" + "'", str24, "#root");
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str28, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(parser32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str40, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "#root" + "'", str43, "#root");
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(element47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "#text" + "'", str50, "#text");
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(elements54);
        org.junit.Assert.assertNotNull(element55);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(element62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(element67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(element69);
        org.junit.Assert.assertNotNull(elements71);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.jsoup.helper.HttpConnection.KeyVal keyVal2 = org.jsoup.helper.HttpConnection.KeyVal.create("SYSTEM", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str3 = keyVal2.value();
        org.jsoup.helper.HttpConnection.KeyVal keyVal5 = keyVal2.value("#document");
        java.lang.String str6 = keyVal5.value();
        org.junit.Assert.assertNotNull(keyVal2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str3, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(keyVal5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#document" + "'", str6, "#document");
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        java.net.URL uRL5 = response4.url();
        boolean boolean7 = response4.hasCookie("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response9 = response4.url(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNull(uRL5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.jsoup.select.Evaluator.IsLastChild isLastChild0 = new org.jsoup.select.Evaluator.IsLastChild();
        org.jsoup.nodes.Element element1 = null;
        org.jsoup.select.Elements elements2 = org.jsoup.select.Collector.collect((org.jsoup.select.Evaluator) isLastChild0, element1);
        org.jsoup.select.Elements elements4 = elements2.not("#declaration");
        org.junit.Assert.assertNotNull(elements2);
        org.junit.Assert.assertNotNull(elements4);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        java.lang.String str2 = tokenQueue1.toString();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean5 = tokenQueue1.matches("");
        java.lang.String str6 = tokenQueue1.consumeTagName();
        java.lang.String str7 = tokenQueue1.consumeElementSelector();
        java.lang.String str8 = tokenQueue1.consumeElementSelector();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "multipart/form-data" + "'", str2, "multipart/form-data");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart" + "'", str6, "multipart");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request2 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request2.ignoreHttpErrors(false);
        boolean boolean6 = request4.hasCookie("[system$=<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    </head>\n    <body>hi!</body>\n</html>]");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.jsoup.select.Evaluator.IsRoot isRoot0 = new org.jsoup.select.Evaluator.IsRoot();
        java.lang.String str1 = isRoot0.toString();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType6 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str9 = document8.id();
        org.jsoup.select.Elements elements10 = document8.previousElementSiblings();
        org.jsoup.nodes.Element element11 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType6, (org.jsoup.nodes.Element) document8);
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.className();
        java.lang.String str15 = document13.outerHtml();
        org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str18 = document17.id();
        java.lang.String str19 = document17.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan21 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean22 = document17.is((org.jsoup.select.Evaluator) indexLessThan21);
        boolean boolean23 = isNthLastOfType6.matches((org.jsoup.nodes.Element) document13, (org.jsoup.nodes.Element) document17);
        java.lang.String str24 = document17.cssSelector();
        org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str27 = document26.className();
        java.lang.String str28 = document26.outerHtml();
        boolean boolean30 = document26.hasSameValue((java.lang.Object) 1);
        boolean boolean31 = indexLessThan3.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document26);
        org.jsoup.nodes.Element element33 = document26.prependText("[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
        org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str36 = document35.id();
        java.lang.String str37 = document35.baseUri();
        org.jsoup.nodes.Element element40 = document35.attr("", true);
        org.jsoup.parser.Parser parser41 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document42 = document35.parser(parser41);
        boolean boolean43 = isRoot0.matches(element33, (org.jsoup.nodes.Element) document35);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + ":root" + "'", str1, ":root");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNull(element11);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str15, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#root" + "'", str24, "#root");
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str28, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(element33);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        java.lang.String str3 = document1.baseUri();
        org.jsoup.nodes.Element element6 = document1.attr("", true);
        org.jsoup.select.Elements elements8 = document1.getElementsContainingText("#text");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = elements8.is("SYSTEM=<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
            org.junit.Assert.fail("Expected exception of type org.jsoup.select.Selector.SelectorParseException; message: Could not parse query 'SYSTEM=<html>? <head></head>? <body>?  hi!? </body>?</html>': unexpected token at '=<html>? <head></head>? <body>?  hi!? </body>?</html>'");
        } catch (org.jsoup.select.Selector.SelectorParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements8);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        java.lang.String str3 = document1.baseUri();
        org.jsoup.nodes.Element element6 = document1.attr("", true);
        org.jsoup.nodes.Node node9 = document1.attr("#text", "");
        org.jsoup.nodes.Document.QuirksMode quirksMode10 = org.jsoup.nodes.Document.QuirksMode.noQuirks;
        org.jsoup.nodes.Document document11 = document1.quirksMode(quirksMode10);
        org.jsoup.select.Elements elements13 = document1.getElementsByAttribute("ultipart");
        org.jsoup.select.Evaluator.IsOnlyChild isOnlyChild14 = new org.jsoup.select.Evaluator.IsOnlyChild();
        org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str17 = document16.id();
        java.lang.String str18 = document16.baseUri();
        org.jsoup.nodes.Element element20 = document16.toggleClass("multipart");
        org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str23 = document22.className();
        java.lang.String str24 = document22.outerHtml();
        boolean boolean26 = document22.hasSameValue((java.lang.Object) 1);
        boolean boolean27 = isOnlyChild14.matches((org.jsoup.nodes.Element) document16, (org.jsoup.nodes.Element) document22);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.outline();
        int int30 = outputSettings28.indentAmount();
        org.jsoup.nodes.Document.OutputSettings.Syntax syntax31 = org.jsoup.nodes.Document.OutputSettings.Syntax.html;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings28.syntax(syntax31);
        java.nio.charset.Charset charset33 = outputSettings32.charset();
        document16.charset(charset33);
        document1.charset(charset33);
        java.util.List<org.jsoup.nodes.DataNode> dataNodeList36 = document1.dataNodes();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + quirksMode10 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode10.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks));
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + syntax31 + "' != '" + org.jsoup.nodes.Document.OutputSettings.Syntax.html + "'", syntax31.equals(org.jsoup.nodes.Document.OutputSettings.Syntax.html));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(dataNodeList36);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.jsoup.HttpStatusException httpStatusException3 = new org.jsoup.HttpStatusException("Content-Type", (-1), "#declaration");
        java.lang.String str4 = httpStatusException3.getUrl();
        int int5 = httpStatusException3.getStatusCode();
        int int6 = httpStatusException3.getStatusCode();
        org.jsoup.HttpStatusException httpStatusException10 = new org.jsoup.HttpStatusException("Content-Type", (-1), "#declaration");
        java.lang.String str11 = httpStatusException10.getUrl();
        httpStatusException3.addSuppressed((java.lang.Throwable) httpStatusException10);
        int int13 = httpStatusException3.getStatusCode();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#declaration" + "'", str4, "#declaration");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#declaration" + "'", str11, "#declaration");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        tokenQueue1.addFirst((java.lang.Character) 'a');
        boolean boolean4 = tokenQueue1.matchesWhitespace();
        char char5 = tokenQueue1.peek();
        java.lang.String str7 = tokenQueue1.chompTo("#root=\"\"");
        java.lang.String str8 = tokenQueue1.consumeCssIdentifier();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'a' + "'", char5 == 'a');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "amultipart/form-data" + "'", str7, "amultipart/form-data");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = request4.multiHeaders();
        org.jsoup.Connection.Request request7 = request4.ignoreHttpErrors(true);
        java.net.URL uRL8 = request7.url();
        boolean boolean9 = request7.ignoreContentType();
        org.jsoup.parser.Parser parser10 = request7.parser();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNull(uRL8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parser10);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        org.jsoup.Connection connection4 = httpConnection0.ignoreContentType(true);
        org.jsoup.Connection connection7 = httpConnection0.cookie("amultipart", "<!#root!>");
        java.io.InputStream inputStream10 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream13 = new org.jsoup.internal.ConstrainableInputStream(inputStream10, 1, (int) (byte) 0);
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream16 = constrainableInputStream13.timeout((long) ' ', (long) (short) 1);
        constrainableInputStream13.close();
        org.jsoup.Connection connection18 = httpConnection0.data("org.jsoup.HttpStatusException: multipart. Status=100, URL=application/x-www-form-urlencoded", "[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream13);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = null;
        org.jsoup.Connection connection20 = httpConnection0.sslSocketFactory(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(constrainableInputStream16);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(connection20);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        java.lang.String str3 = document1.baseUri();
        org.jsoup.nodes.Element element6 = document1.attr("", true);
        org.jsoup.select.Elements elements8 = document1.getElementsByIndexEquals((int) ' ');
        java.lang.String str9 = document1.tagName();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#root" + "'", str9, "#root");
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.isBlock();
        org.jsoup.nodes.Element element5 = new org.jsoup.nodes.Element(tag1, "ultipart");
        boolean boolean6 = tag1.isEmpty();
        java.lang.String str7 = tag1.normalName();
        boolean boolean8 = tag1.isEmpty();
        boolean boolean9 = tag1.isEmpty();
        java.lang.String str10 = tag1.getName();
        boolean boolean11 = tag1.isInline();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#document" + "'", str7, "#document");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#document" + "'", str10, "#document");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.className();
        java.lang.String str3 = document1.outerHtml();
        boolean boolean5 = document1.hasSameValue((java.lang.Object) 1);
        java.lang.String str6 = document1.tagName();
        org.jsoup.nodes.Element element7 = document1.head();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "multipart/form-data");
        org.jsoup.nodes.Element element11 = document1.prependChild((org.jsoup.nodes.Node) document10);
        org.jsoup.nodes.Element element13 = document10.selectFirst(":first-child");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str3, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#root" + "'", str6, "#root");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element13);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.outline();
        int int2 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.indentAmount(1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.prettyPrint(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings4.charset(":eq(-1)");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: :eq(-1)");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(outputSettings6);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.simpleText();
        org.jsoup.safety.Cleaner cleaner1 = new org.jsoup.safety.Cleaner(whitelist0);
        org.jsoup.safety.Whitelist whitelist3 = whitelist0.preserveRelativeLinks(false);
        org.jsoup.safety.Whitelist whitelist6 = whitelist3.removeEnforcedAttribute("Content-Encoding", "hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basicWithImages();
        boolean boolean11 = org.jsoup.Jsoup.isValid("hi!", whitelist10);
        java.lang.String[] strArray17 = new java.lang.String[] { "ltipart/form-data", ":lt(0)", "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n", "application/x-www-form-urlencoded" };
        org.jsoup.safety.Whitelist whitelist18 = whitelist10.removeAttributes("system", strArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.safety.Whitelist whitelist19 = whitelist6.removeProtocols(":eq(-1)=mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", "multipart", strArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot remove a protocol that is not set.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(whitelist0);
        org.junit.Assert.assertNotNull(whitelist3);
        org.junit.Assert.assertNotNull(whitelist6);
        org.junit.Assert.assertNotNull(whitelist10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(whitelist18);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        java.lang.String str2 = tokenQueue1.toString();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.toString();
        tokenQueue1.advance();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "multipart/form-data" + "'", str2, "multipart/form-data");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data" + "'", str4, "multipart/form-data");
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        java.net.URL uRL5 = response4.url();
        org.jsoup.Connection.Response response7 = response4.charset("PUBLIC");
        org.jsoup.Connection.Response response9 = response4.removeHeader(":matchesOwn(null)");
        org.jsoup.Connection.Response response12 = response9.addHeader(":containsData( )", "UTF-8");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNull(uRL5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(response12);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        java.io.InputStream inputStream2 = null;
        org.jsoup.parser.Parser parser5 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse(inputStream2, "", "#root", parser5);
        org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "#root", parser5);
        org.jsoup.nodes.Document document8 = document7.normalise();
        java.util.regex.Pattern pattern9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements10 = document7.getElementsMatchingText(pattern9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.regex.Pattern.matcher(java.lang.CharSequence)\" because \"this.pattern\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser5);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNotNull(document8);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.jsoup.nodes.Comment comment1 = new org.jsoup.nodes.Comment("content-encoding=\"#root\"");
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.jsoup.select.Elements elements1 = new org.jsoup.select.Elements(0);
        java.lang.String str2 = elements1.text();
        org.jsoup.select.Evaluator.IsFirstOfType isFirstOfType3 = new org.jsoup.select.Evaluator.IsFirstOfType();
        java.lang.String str4 = isFirstOfType3.toString();
        java.lang.String str5 = isFirstOfType3.toString();
        org.jsoup.select.Evaluator.IsFirstOfType[] isFirstOfTypeArray6 = new org.jsoup.select.Evaluator.IsFirstOfType[] { isFirstOfType3 };
        org.jsoup.select.Evaluator.IsFirstOfType[] isFirstOfTypeArray7 = elements1.toArray(isFirstOfTypeArray6);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":first-of-type" + "'", str4, ":first-of-type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":first-of-type" + "'", str5, ":first-of-type");
        org.junit.Assert.assertNotNull(isFirstOfTypeArray6);
        org.junit.Assert.assertNotNull(isFirstOfTypeArray7);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType3 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.className();
        java.lang.String str7 = document5.outerHtml();
        boolean boolean9 = document5.hasSameValue((java.lang.Object) 1);
        java.lang.String str10 = document5.tagName();
        org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element14 = document12.val("hi!");
        boolean boolean15 = isNthLastOfType3.matches((org.jsoup.nodes.Element) document5, element14);
        org.jsoup.select.Elements elements16 = element14.nextElementSiblings();
        org.jsoup.nodes.Element element17 = null;
        boolean boolean18 = allElements0.matches(element14, element17);
        org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element22 = document20.val("hi!");
        org.jsoup.nodes.Element element23 = document20.clone();
        org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan25 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) '#');
        org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parseBodyFragment("");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType30 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str33 = document32.className();
        java.lang.String str34 = document32.outerHtml();
        boolean boolean36 = document32.hasSameValue((java.lang.Object) 1);
        java.lang.String str37 = document32.tagName();
        org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element41 = document39.val("hi!");
        boolean boolean42 = isNthLastOfType30.matches((org.jsoup.nodes.Element) document32, element41);
        java.lang.String str43 = document32.title();
        org.jsoup.select.Elements elements45 = document32.getElementsMatchingText("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        boolean boolean46 = indexGreaterThan25.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document32);
        boolean boolean47 = allElements0.matches((org.jsoup.nodes.Element) document20, (org.jsoup.nodes.Element) document32);
        java.lang.String str48 = allElements0.toString();
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str7, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#root" + "'", str10, "#root");
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str34, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "#root" + "'", str37, "#root");
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(element41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(elements45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "*" + "'", str48, "*");
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.formatAsBlock();
        org.jsoup.nodes.Attributes attributes4 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes5 = attributes4.clone();
        attributes5.remove("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.nodes.PseudoTextElement pseudoTextElement8 = new org.jsoup.nodes.PseudoTextElement(tag1, "#root", attributes5);
        org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str11 = document10.className();
        java.lang.String str12 = document10.outerHtml();
        boolean boolean14 = document10.hasSameValue((java.lang.Object) 1);
        java.lang.String str15 = document10.tagName();
        org.jsoup.nodes.Element element16 = document10.head();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "multipart/form-data");
        org.jsoup.nodes.Element element20 = document10.prependChild((org.jsoup.nodes.Node) document19);
        boolean boolean21 = tag1.equals((java.lang.Object) document19);
        org.jsoup.nodes.Element element23 = document19.removeAttr("multipart");
        org.jsoup.parser.Parser parser24 = document19.parser();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str12, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#root" + "'", str15, "#root");
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(parser24);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.outline();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.outline(false);
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.wholeText();
        org.jsoup.select.Elements elements7 = document5.parents();
        java.nio.charset.Charset charset8 = document5.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings3.charset(charset8);
        org.jsoup.nodes.Document.OutputSettings.Syntax syntax10 = outputSettings9.syntax();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + syntax10 + "' != '" + org.jsoup.nodes.Document.OutputSettings.Syntax.html + "'", syntax10.equals(org.jsoup.nodes.Document.OutputSettings.Syntax.html));
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection connection20 = httpConnection0.referrer("#document");
        org.jsoup.Connection connection23 = httpConnection0.data("#declaration", "Content-Type");
        org.jsoup.Connection.Response response24 = httpConnection0.response();
        java.io.InputStream inputStream25 = null;
        org.jsoup.parser.Parser parser28 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse(inputStream25, "", "#root", parser28);
        org.jsoup.parser.ParseErrorList parseErrorList30 = parser28.getErrors();
        org.jsoup.Connection connection31 = httpConnection0.parser(parser28);
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(connection20);
        org.junit.Assert.assertNotNull(connection23);
        org.junit.Assert.assertNotNull(response24);
        org.junit.Assert.assertNotNull(parser28);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(connection31);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.jsoup.select.Evaluator.IsLastChild isLastChild0 = new org.jsoup.select.Evaluator.IsLastChild();
        java.lang.String str1 = isLastChild0.toString();
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str4 = document3.id();
        java.lang.String str5 = document3.baseUri();
        org.jsoup.nodes.Element element6 = document3.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = document3.dataset();
        document3.updateMetaCharsetElement(true);
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.className();
        java.lang.String str13 = document11.outerHtml();
        boolean boolean15 = document11.hasSameValue((java.lang.Object) 1);
        java.util.Set<java.lang.String> strSet16 = document11.classNames();
        boolean boolean17 = isLastChild0.matches((org.jsoup.nodes.Element) document3, (org.jsoup.nodes.Element) document11);
        org.jsoup.select.Evaluator.ContainsData containsData19 = new org.jsoup.select.Evaluator.ContainsData(" ");
        java.lang.String str20 = containsData19.toString();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType23 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str26 = document25.wholeText();
        org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str29 = document28.className();
        boolean boolean30 = isNthLastOfType23.matches((org.jsoup.nodes.Element) document25, (org.jsoup.nodes.Element) document28);
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType33 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str36 = document35.wholeText();
        org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str39 = document38.className();
        boolean boolean40 = isNthLastOfType33.matches((org.jsoup.nodes.Element) document35, (org.jsoup.nodes.Element) document38);
        org.jsoup.nodes.Document document41 = document35.clone();
        document41.setBaseUri("#root");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan45 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType48 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document50 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str51 = document50.id();
        org.jsoup.select.Elements elements52 = document50.previousElementSiblings();
        org.jsoup.nodes.Element element53 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType48, (org.jsoup.nodes.Element) document50);
        org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str56 = document55.className();
        java.lang.String str57 = document55.outerHtml();
        org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str60 = document59.id();
        java.lang.String str61 = document59.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan63 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean64 = document59.is((org.jsoup.select.Evaluator) indexLessThan63);
        boolean boolean65 = isNthLastOfType48.matches((org.jsoup.nodes.Element) document55, (org.jsoup.nodes.Element) document59);
        java.lang.String str66 = document59.cssSelector();
        org.jsoup.nodes.Document document68 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str69 = document68.className();
        java.lang.String str70 = document68.outerHtml();
        boolean boolean72 = document68.hasSameValue((java.lang.Object) 1);
        boolean boolean73 = indexLessThan45.matches((org.jsoup.nodes.Element) document59, (org.jsoup.nodes.Element) document68);
        org.jsoup.nodes.Element element74 = document41.prependChild((org.jsoup.nodes.Node) document68);
        boolean boolean75 = containsData19.matches((org.jsoup.nodes.Element) document25, element74);
        org.jsoup.nodes.Document document77 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str78 = document77.wholeText();
        java.util.Set<java.lang.String> strSet79 = document77.classNames();
        org.jsoup.nodes.Element element80 = document25.classNames(strSet79);
        org.jsoup.nodes.Document document82 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str83 = document82.wholeText();
        org.jsoup.select.Elements elements84 = document82.parents();
        org.jsoup.nodes.Element element85 = document82.shallowClone();
        java.nio.charset.Charset charset86 = document82.charset();
        boolean boolean87 = isLastChild0.matches((org.jsoup.nodes.Element) document25, (org.jsoup.nodes.Element) document82);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + ":last-child" + "'", str1, ":last-child");
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + ":containsData( )" + "'", str20, ":containsData( )");
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(elements52);
        org.junit.Assert.assertNull(element53);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str57, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "#root" + "'", str66, "#root");
        org.junit.Assert.assertNotNull(document68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str70, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(element74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(document77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(element80);
        org.junit.Assert.assertNotNull(document82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(elements84);
        org.junit.Assert.assertNotNull(element85);
        org.junit.Assert.assertNotNull(charset86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.nodes.Document.QuirksMode quirksMode4 = document1.quirksMode();
        boolean boolean6 = document1.hasClass("multipart/form-data");
        org.jsoup.parser.Tag tag7 = document1.tag();
        org.jsoup.select.Elements elements9 = document1.getElementsByAttribute("[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
        org.jsoup.select.Elements elements11 = elements9.wrap("application/x-www-form-urlencoded");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertTrue("'" + quirksMode4 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode4.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elements11);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        java.lang.String str3 = document1.baseUri();
        org.jsoup.nodes.Element element4 = document1.body();
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request6 = httpConnection5.request();
        org.jsoup.Connection.Request request9 = request6.addHeader("multipart/form-data", "hi!");
        boolean boolean11 = request9.hasHeader("multipart/form-data");
        boolean boolean13 = request9.hasCookie("#text");
        org.jsoup.parser.Parser parser14 = request9.parser();
        org.jsoup.nodes.Document document15 = document1.parser(parser14);
        org.jsoup.nodes.Node node16 = document15.parent();
        org.jsoup.nodes.Node node17 = document15.shallowClone();
        org.jsoup.select.Elements elements19 = document15.getElementsByClass(":eq(-1)=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parser14);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(elements19);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("*", "<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>");
        org.jsoup.nodes.Element element4 = document2.tagName("org.jsoup.select.Selector$SelectorParseException: :lt(52)");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node6 = document2.before("[system$=<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    </head>\n    <body>hi!</body>\n</html>]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(element4);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.jsoup.nodes.Attributes attributes2 = new org.jsoup.nodes.Attributes();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator3 = attributes2.spliterator();
        org.jsoup.helper.HttpConnection.KeyVal keyVal6 = org.jsoup.helper.HttpConnection.KeyVal.create("#root", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        java.io.InputStream inputStream7 = null;
        org.jsoup.Connection.KeyVal keyVal8 = keyVal6.inputStream(inputStream7);
        org.jsoup.helper.HttpConnection.KeyVal keyVal10 = keyVal6.value("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        boolean boolean11 = keyVal6.hasInputStream();
        boolean boolean12 = attributes2.equals((java.lang.Object) boolean11);
        org.jsoup.nodes.Attribute attribute13 = new org.jsoup.nodes.Attribute(":only-of-type", ":eq(-1)", attributes2);
        org.junit.Assert.assertNotNull(attributeSpliterator3);
        org.junit.Assert.assertNotNull(keyVal6);
        org.junit.Assert.assertNotNull(keyVal8);
        org.junit.Assert.assertNotNull(keyVal10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Request request7 = request4.cookie("#text", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        boolean boolean10 = request4.hasHeaderWithValue("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "#document");
        org.jsoup.Connection.Request request13 = request4.cookie("#document", "#document");
        org.jsoup.Connection.Request request15 = request4.removeCookie(":last-of-type");
        org.jsoup.Connection.Request request18 = request4.cookie("<!DOCTYPE hi! :eq(-1) \"<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\" \"#root\">\n<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = request18.hasHeaderWithValue("", ":eq(1)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request18);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        java.util.regex.Pattern pattern1 = null;
        org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("<!#root!>", pattern1);
        org.jsoup.select.Evaluator.ContainsText containsText4 = new org.jsoup.select.Evaluator.ContainsText("Content-Encoding");
        java.lang.String str5 = containsText4.toString();
        org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str8 = document7.id();
        int int9 = document7.elementSiblingIndex();
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("[]", "#text");
        boolean boolean13 = containsText4.matches((org.jsoup.nodes.Element) document7, (org.jsoup.nodes.Element) document12);
        org.jsoup.nodes.Element element15 = document12.addClass("org.jsoup.select.Selector$SelectorParseException: :lt(52)");
        org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str19 = document18.id();
        java.lang.String str20 = document18.baseUri();
        org.jsoup.nodes.Element element23 = document18.attr("", true);
        org.jsoup.select.Elements elements24 = org.jsoup.select.Selector.select("#document", (org.jsoup.nodes.Element) document18);
        boolean boolean25 = attributeWithValueMatching2.matches(element15, (org.jsoup.nodes.Element) document18);
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan27 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType30 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str33 = document32.id();
        org.jsoup.select.Elements elements34 = document32.previousElementSiblings();
        org.jsoup.nodes.Element element35 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType30, (org.jsoup.nodes.Element) document32);
        org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str38 = document37.className();
        java.lang.String str39 = document37.outerHtml();
        org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str42 = document41.id();
        java.lang.String str43 = document41.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan45 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean46 = document41.is((org.jsoup.select.Evaluator) indexLessThan45);
        boolean boolean47 = isNthLastOfType30.matches((org.jsoup.nodes.Element) document37, (org.jsoup.nodes.Element) document41);
        java.lang.String str48 = document41.cssSelector();
        org.jsoup.nodes.Document document50 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str51 = document50.className();
        java.lang.String str52 = document50.outerHtml();
        boolean boolean54 = document50.hasSameValue((java.lang.Object) 1);
        boolean boolean55 = indexLessThan27.matches((org.jsoup.nodes.Element) document41, (org.jsoup.nodes.Element) document50);
        org.jsoup.nodes.Document.QuirksMode quirksMode56 = org.jsoup.nodes.Document.QuirksMode.quirks;
        org.jsoup.nodes.Document document57 = document50.quirksMode(quirksMode56);
        boolean boolean59 = document57.hasAttr("<![CDATA[<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>]]>");
        org.jsoup.select.Evaluator.ContainsText containsText61 = new org.jsoup.select.Evaluator.ContainsText("Content-Encoding");
        java.lang.String str62 = containsText61.toString();
        org.jsoup.nodes.Document document64 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str65 = document64.id();
        int int66 = document64.elementSiblingIndex();
        org.jsoup.nodes.Document document69 = org.jsoup.parser.Parser.parse("[]", "#text");
        boolean boolean70 = containsText61.matches((org.jsoup.nodes.Element) document64, (org.jsoup.nodes.Element) document69);
        org.jsoup.nodes.Element element72 = document69.addClass("org.jsoup.select.Selector$SelectorParseException: :lt(52)");
        org.jsoup.nodes.Element element74 = document69.appendElement(":empty");
        boolean boolean75 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document57, element74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = attributeWithValueMatching2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.regex.Pattern.toString()\" because \"this.pattern\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":contains(content-encoding)" + "'", str5, ":contains(content-encoding)");
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNull(element35);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str39, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "#root" + "'", str48, "#root");
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str52, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + quirksMode56 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode56.equals(org.jsoup.nodes.Document.QuirksMode.quirks));
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + ":contains(content-encoding)" + "'", str62, ":contains(content-encoding)");
        org.junit.Assert.assertNotNull(document64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(element72);
        org.junit.Assert.assertNotNull(element74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.select.Elements elements5 = elements3.prev("#text");
        java.lang.String str6 = elements5.val();
        org.jsoup.select.Elements elements7 = elements5.nextAll();
        org.jsoup.select.Elements elements8 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements7);
        java.lang.String str9 = elements7.val();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements11 = elements7.prev("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<#root value=\"hi!\">\n <html>\n  <head></head>\n  <body>\n   hi!\n  </body>\n </html>\n</#root>");
            org.junit.Assert.fail("Expected exception of type org.jsoup.select.Selector.SelectorParseException; message: Could not parse query '<html>? <head></head>? <body>?  hi!? </body>?</html>?<#root value=\"hi!\">? <html>?  <head></head>?  <body>?   hi!?  </body>? </html>?</#root>': unexpected token at '<html>? <head></head>? <body>?  hi!? </body>?</html>?<#root value=\"hi!\">? <html>?  <head></head>?  <body>?   hi!?  </body>? </html>?</#root>'");
        } catch (org.jsoup.select.Selector.SelectorParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.jsoup.parser.ParseSettings parseSettings2 = new org.jsoup.parser.ParseSettings(false, true);
        java.lang.String str4 = parseSettings2.normalizeAttribute("");
        java.lang.String str6 = parseSettings2.normalizeTag("#doctype");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#doctype" + "'", str6, "#doctype");
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes3 = attributes0.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes6 = attributes0.add("hi!", "multipart/form-data");
        java.lang.String str7 = attributes6.html();
        org.jsoup.nodes.Attributes attributes8 = attributes6.clone();
        org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str11 = document10.className();
        java.lang.String str13 = document10.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.nodes.Element element15 = document10.text("");
        java.lang.String str16 = document10.cssSelector();
        org.jsoup.nodes.Node node17 = document10.shallowClone();
        boolean boolean18 = attributes6.equals((java.lang.Object) node17);
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + " hi!=\"multipart/form-data\"" + "'", str7, " hi!=\"multipart/form-data\"");
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#root" + "'", str16, "#root");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType2 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.className();
        java.lang.String str6 = document4.outerHtml();
        boolean boolean8 = document4.hasSameValue((java.lang.Object) 1);
        java.lang.String str9 = document4.tagName();
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element13 = document11.val("hi!");
        boolean boolean14 = isNthLastOfType2.matches((org.jsoup.nodes.Element) document4, element13);
        java.util.regex.Pattern pattern15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements16 = element13.getElementsMatchingText(pattern15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.regex.Pattern.matcher(java.lang.CharSequence)\" because \"this.pattern\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str6, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#root" + "'", str9, "#root");
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages();
        boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2);
        org.jsoup.safety.Whitelist whitelist6 = whitelist2.removeEnforcedAttribute("Content-Encoding", "#root");
        java.lang.String str7 = org.jsoup.Jsoup.clean("", whitelist6);
        org.jsoup.parser.TokenQueue tokenQueue10 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        java.lang.String[] strArray15 = new java.lang.String[] { "multipart/form-data", "Content-Encoding", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36" };
        java.lang.String str16 = tokenQueue10.consumeToAny(strArray15);
        org.jsoup.safety.Whitelist whitelist17 = whitelist6.removeAttributes("multipart", strArray15);
        org.jsoup.parser.TokenQueue tokenQueue19 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        java.lang.String str20 = tokenQueue19.toString();
        boolean boolean21 = tokenQueue19.consumeWhitespace();
        java.lang.String str23 = tokenQueue19.consumeTo("multipart");
        tokenQueue19.addFirst("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!", "", "multipart/form-data", "hi!" };
        boolean boolean34 = org.jsoup.internal.StringUtil.in("", strArray33);
        boolean boolean35 = org.jsoup.internal.StringUtil.in("", strArray33);
        java.lang.String str37 = org.jsoup.internal.StringUtil.join(strArray33, " hi!=\"multipart/form-data\"");
        java.lang.String str38 = tokenQueue19.consumeToAny(strArray33);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.safety.Whitelist whitelist39 = whitelist17.addTags(strArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(whitelist2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(whitelist6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(whitelist17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multipart/form-data" + "'", str20, "multipart/form-data");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!" + "'", str37, "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("");
        java.lang.String str2 = document1.tagName();
        org.jsoup.nodes.Element element4 = document1.removeClass("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        org.jsoup.nodes.Document.QuirksMode quirksMode5 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks;
        org.jsoup.nodes.Document document6 = document1.quirksMode(quirksMode5);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "#root" + "'", str2, "#root");
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertTrue("'" + quirksMode5 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode5.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks));
        org.junit.Assert.assertNotNull(document6);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        java.io.InputStream inputStream23 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal24 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream23);
        java.io.InputStream inputStream25 = keyVal24.inputStream();
        org.jsoup.helper.HttpConnection httpConnection26 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = null;
        org.jsoup.Connection connection28 = httpConnection26.sslSocketFactory(sSLSocketFactory27);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = null;
        org.jsoup.Connection connection30 = httpConnection26.sslSocketFactory(sSLSocketFactory29);
        org.jsoup.Connection.Request request31 = httpConnection26.request();
        org.jsoup.helper.HttpConnection httpConnection32 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request33 = httpConnection32.request();
        org.jsoup.Connection.Request request36 = request33.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = request36.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = request36.cookies();
        org.jsoup.Connection connection39 = httpConnection26.headers(strMap38);
        java.io.InputStream inputStream42 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream45 = new org.jsoup.internal.ConstrainableInputStream(inputStream42, 1, (int) (byte) 0);
        org.jsoup.Connection connection46 = httpConnection26.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream45);
        org.jsoup.helper.HttpConnection.KeyVal keyVal47 = keyVal24.inputStream((java.io.InputStream) constrainableInputStream45);
        constrainableInputStream45.skipNBytes(0L);
        org.jsoup.Connection connection50 = httpConnection0.data("[:eq(-1)!=#doctype]", ":contains(content-encoding)", (java.io.InputStream) constrainableInputStream45);
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream53 = org.jsoup.internal.ConstrainableInputStream.wrap((java.io.InputStream) constrainableInputStream45, 0, 100);
        constrainableInputStream45.close();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(keyVal24);
        org.junit.Assert.assertNull(inputStream25);
        org.junit.Assert.assertNotNull(connection28);
        org.junit.Assert.assertNotNull(connection30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(connection39);
        org.junit.Assert.assertNotNull(connection46);
        org.junit.Assert.assertNotNull(keyVal47);
        org.junit.Assert.assertNotNull(connection50);
        org.junit.Assert.assertNotNull(constrainableInputStream53);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        boolean boolean8 = request4.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method9 = request4.method();
        org.jsoup.Connection.Method method10 = request4.method();
        org.jsoup.Connection.Request request13 = request4.addHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ":eq(-1)");
        org.jsoup.Connection.Request request16 = request13.addHeader("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", "                                   ");
        java.lang.String str18 = request13.header("");
        boolean boolean21 = request13.hasHeaderWithValue("amultipart", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>=\"#root\"");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = request13.cookies();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + method9 + "' != '" + org.jsoup.Connection.Method.GET + "'", method9.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method10 + "' != '" + org.jsoup.Connection.Method.GET + "'", method10.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.jsoup.select.Evaluator.IsOnlyChild isOnlyChild0 = new org.jsoup.select.Evaluator.IsOnlyChild();
        org.jsoup.nodes.Element element1 = null;
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str4 = document3.wholeText();
        org.jsoup.select.Elements elements5 = document3.parents();
        org.jsoup.nodes.Element element6 = document3.shallowClone();
        java.lang.Object obj7 = null;
        boolean boolean8 = document3.hasSameValue(obj7);
        org.jsoup.nodes.Element element10 = document3.removeAttr(":last-of-type");
        org.jsoup.nodes.Element element12 = element10.tagName("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
        boolean boolean13 = isOnlyChild0.matches(element1, element12);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.jsoup.nodes.Attribute attribute2 = new org.jsoup.nodes.Attribute("<!DOCTYPE hi! :eq(-1) \"<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\" \"#root\">\n<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
        java.lang.String str3 = attribute2.getValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!" + "'", str3, "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        java.lang.String str2 = tokenQueue1.toString();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str5 = tokenQueue1.consumeTo("multipart");
        java.lang.String str7 = tokenQueue1.chompTo("                                   ");
        char char8 = tokenQueue1.peek();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "multipart/form-data" + "'", str2, "multipart/form-data");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data" + "'", str7, "multipart/form-data");
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\000' + "'", char8 == '\000');
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.jsoup.nodes.XmlDeclaration xmlDeclaration2 = new org.jsoup.nodes.XmlDeclaration("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<#root value=\"hi!\">\n <html>\n  <head></head>\n  <body>\n   hi!\n  </body>\n </html>\n</#root>", false);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Request request7 = request4.cookie("#text", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        boolean boolean9 = request4.hasCookie("#doctype");
        java.net.URL uRL10 = request4.url();
        java.util.Collection<org.jsoup.Connection.KeyVal> keyValCollection11 = request4.data();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(uRL10);
        org.junit.Assert.assertNotNull(keyValCollection11);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        boolean boolean1 = org.jsoup.nodes.Entities.isNamedEntity("SYSTEM=<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.jsoup.select.Evaluator.Tag tag1 = new org.jsoup.select.Evaluator.Tag("#text");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType6 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str9 = document8.id();
        org.jsoup.select.Elements elements10 = document8.previousElementSiblings();
        org.jsoup.nodes.Element element11 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType6, (org.jsoup.nodes.Element) document8);
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.className();
        java.lang.String str15 = document13.outerHtml();
        org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str18 = document17.id();
        java.lang.String str19 = document17.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan21 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean22 = document17.is((org.jsoup.select.Evaluator) indexLessThan21);
        boolean boolean23 = isNthLastOfType6.matches((org.jsoup.nodes.Element) document13, (org.jsoup.nodes.Element) document17);
        java.lang.String str24 = document17.cssSelector();
        org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str27 = document26.className();
        java.lang.String str28 = document26.outerHtml();
        boolean boolean30 = document26.hasSameValue((java.lang.Object) 1);
        boolean boolean31 = indexLessThan3.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document26);
        org.jsoup.parser.Parser parser32 = document17.parser();
        java.lang.String str33 = document17.val();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType36 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str39 = document38.className();
        java.lang.String str40 = document38.outerHtml();
        boolean boolean42 = document38.hasSameValue((java.lang.Object) 1);
        java.lang.String str43 = document38.tagName();
        org.jsoup.nodes.Document document45 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element47 = document45.val("hi!");
        boolean boolean48 = isNthLastOfType36.matches((org.jsoup.nodes.Element) document38, element47);
        boolean boolean49 = tag1.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document38);
        org.jsoup.parser.Tag tag51 = new org.jsoup.parser.Tag("#document");
        boolean boolean52 = tag51.formatAsBlock();
        org.jsoup.nodes.Attributes attributes54 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes55 = attributes54.clone();
        attributes55.remove("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.nodes.PseudoTextElement pseudoTextElement58 = new org.jsoup.nodes.PseudoTextElement(tag51, "#root", attributes55);
        org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str61 = document60.className();
        java.lang.String str62 = document60.outerHtml();
        boolean boolean64 = document60.hasSameValue((java.lang.Object) 1);
        java.lang.String str65 = document60.tagName();
        org.jsoup.nodes.Element element66 = document60.head();
        org.jsoup.nodes.Document document69 = org.jsoup.parser.Parser.parse("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "multipart/form-data");
        org.jsoup.nodes.Element element70 = document60.prependChild((org.jsoup.nodes.Node) document69);
        boolean boolean71 = tag51.equals((java.lang.Object) document69);
        org.jsoup.select.Elements elements74 = document69.getElementsByAttributeValueMatching("", "org.jsoup.HttpStatusException: Content-Encoding=\"#root\". Status=1, URL=:nth-last-of-type(100n-1)");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType77 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document79 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str80 = document79.id();
        org.jsoup.select.Elements elements81 = document79.previousElementSiblings();
        org.jsoup.nodes.Element element82 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType77, (org.jsoup.nodes.Element) document79);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = tag1.matches((org.jsoup.nodes.Element) document69, element82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.jsoup.nodes.Element.tagName()\" because \"element\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNull(element11);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str15, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#root" + "'", str24, "#root");
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str28, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(parser32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str40, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "#root" + "'", str43, "#root");
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(element47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(attributes55);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str62, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "#root" + "'", str65, "#root");
        org.junit.Assert.assertNotNull(element66);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertNotNull(element70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(elements74);
        org.junit.Assert.assertNotNull(document79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(elements81);
        org.junit.Assert.assertNull(element82);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType4 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        org.jsoup.nodes.Element element9 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType4, (org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.className();
        java.lang.String str13 = document11.outerHtml();
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.id();
        java.lang.String str17 = document15.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan19 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean20 = document15.is((org.jsoup.select.Evaluator) indexLessThan19);
        boolean boolean21 = isNthLastOfType4.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document15);
        java.lang.String str22 = document15.cssSelector();
        org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str25 = document24.className();
        java.lang.String str26 = document24.outerHtml();
        boolean boolean28 = document24.hasSameValue((java.lang.Object) 1);
        boolean boolean29 = indexLessThan1.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document24);
        org.jsoup.nodes.Document.QuirksMode quirksMode30 = org.jsoup.nodes.Document.QuirksMode.quirks;
        org.jsoup.nodes.Document document31 = document24.quirksMode(quirksMode30);
        org.jsoup.select.Elements elements34 = document31.getElementsByAttributeValueMatching("multipart/form-data", "hi!");
        org.jsoup.select.Elements elements36 = elements34.prev("#doctype");
        org.jsoup.select.Elements elements38 = elements34.tagName(":eq(-1)=mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNull(element9);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#root" + "'", str22, "#root");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str26, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + quirksMode30 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode30.equals(org.jsoup.nodes.Document.QuirksMode.quirks));
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(elements36);
        org.junit.Assert.assertNotNull(elements38);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.wholeText();
        org.jsoup.select.Elements elements3 = document1.parents();
        org.jsoup.nodes.Element element4 = document1.shallowClone();
        java.lang.Object obj5 = null;
        boolean boolean6 = document1.hasSameValue(obj5);
        org.jsoup.nodes.Element element8 = document1.removeAttr(":last-of-type");
        org.jsoup.nodes.Element element10 = element8.tagName("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements13 = element8.getElementsByAttributeValue("", "<![CDATA[<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>]]>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(element10);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response1 = httpConnection0.response();
        java.lang.String str2 = response1.statusMessage();
        java.lang.String str3 = response1.statusMessage();
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedInputStream bufferedInputStream4 = response1.bodyStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory2 = null;
        org.jsoup.Connection connection3 = httpConnection0.sslSocketFactory(sSLSocketFactory2);
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.id();
        java.lang.String str7 = document5.baseUri();
        org.jsoup.nodes.Element element8 = document5.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = document5.dataset();
        org.jsoup.Connection connection10 = httpConnection0.cookies(strMap9);
        org.jsoup.Connection connection12 = httpConnection0.ignoreContentType(false);
        org.jsoup.Connection connection15 = httpConnection0.header("/form-data", "[public=<!#root!>]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document16 = connection15.post();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must be specified to connect");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(connection10);
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(connection15);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.jsoup.parser.ParseErrorList parseErrorList0 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor1 = parseErrorList0.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList0.parallelStream();
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.id();
        org.jsoup.select.Elements elements6 = document4.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor7 = elements6.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor8 = elements6.listIterator();
        org.jsoup.select.Elements elements9 = elements6.empty();
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.id();
        org.jsoup.select.Elements elements13 = document11.previousElementSiblings();
        org.jsoup.select.Elements elements15 = elements13.prev("#text");
        boolean boolean16 = elements13.hasText();
        org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str19 = document18.id();
        org.jsoup.select.Elements elements20 = document18.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor21 = elements20.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor22 = elements20.listIterator();
        org.jsoup.select.Elements elements23 = elements20.empty();
        org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str26 = document25.id();
        org.jsoup.select.Elements elements27 = document25.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor28 = elements27.listIterator();
        boolean boolean30 = elements27.equals((java.lang.Object) 1.0d);
        java.lang.String str31 = elements27.text();
        org.jsoup.select.Elements elements33 = elements27.wrap("#root");
        org.jsoup.select.Elements[] elementsArray34 = new org.jsoup.select.Elements[] { elements6, elements13, elements20, elements33 };
        org.jsoup.select.Elements[] elementsArray35 = parseErrorList0.toArray(elementsArray34);
        org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str38 = document37.id();
        java.lang.String str39 = document37.baseUri();
        org.jsoup.nodes.Element element42 = document37.attr("", true);
        org.jsoup.select.Elements elements44 = document37.getElementsContainingOwnText("[]");
        org.jsoup.nodes.Element element46 = document37.tagName("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        org.jsoup.select.Elements elements48 = document37.getElementsByTag("multipart");
        org.jsoup.parser.ParseError[] parseErrorArray49 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList50 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50, parseErrorArray49);
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.noTracking();
        int int53 = parseErrorList50.indexOf((java.lang.Object) parseErrorList52);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor54 = parseErrorList50.iterator();
        org.jsoup.parser.ParseError parseError56 = null;
        parseErrorList50.add(0, parseError56);
        int int58 = parseErrorList50.size();
        boolean boolean59 = elements48.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50);
        boolean boolean60 = parseErrorList0.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50);
        org.junit.Assert.assertNotNull(parseErrorList0);
        org.junit.Assert.assertNotNull(parseErrorItor1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elementItor7);
        org.junit.Assert.assertNotNull(elementItor8);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(elementItor21);
        org.junit.Assert.assertNotNull(elementItor22);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertNotNull(elementItor28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertNotNull(elementsArray34);
        org.junit.Assert.assertNotNull(elementsArray35);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertNotNull(elements44);
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertNotNull(parseErrorArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType3 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.className();
        java.lang.String str7 = document5.outerHtml();
        boolean boolean9 = document5.hasSameValue((java.lang.Object) 1);
        java.lang.String str10 = document5.tagName();
        org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element14 = document12.val("hi!");
        boolean boolean15 = isNthLastOfType3.matches((org.jsoup.nodes.Element) document5, element14);
        org.jsoup.select.Elements elements16 = element14.nextElementSiblings();
        org.jsoup.nodes.Element element17 = null;
        boolean boolean18 = allElements0.matches(element14, element17);
        org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element22 = document20.val("hi!");
        org.jsoup.nodes.Element element23 = document20.clone();
        org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan25 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) '#');
        org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parseBodyFragment("");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType30 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str33 = document32.className();
        java.lang.String str34 = document32.outerHtml();
        boolean boolean36 = document32.hasSameValue((java.lang.Object) 1);
        java.lang.String str37 = document32.tagName();
        org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element41 = document39.val("hi!");
        boolean boolean42 = isNthLastOfType30.matches((org.jsoup.nodes.Element) document32, element41);
        java.lang.String str43 = document32.title();
        org.jsoup.select.Elements elements45 = document32.getElementsMatchingText("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        boolean boolean46 = indexGreaterThan25.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document32);
        boolean boolean47 = allElements0.matches((org.jsoup.nodes.Element) document20, (org.jsoup.nodes.Element) document32);
        java.lang.String str48 = document32.title();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document50 = document32.outputSettings(outputSettings49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str7, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#root" + "'", str10, "#root");
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str34, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "#root" + "'", str37, "#root");
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(element41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(elements45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType2 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.wholeText();
        org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str8 = document7.className();
        boolean boolean9 = isNthLastOfType2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document7);
        org.jsoup.nodes.Document document10 = document4.clone();
        org.jsoup.select.Elements elements12 = document4.getElementsByIndexEquals((int) (short) 10);
        org.jsoup.select.Elements elements14 = elements12.before(":containsOwn(system)");
        boolean boolean15 = elements12.hasText();
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("[]", "#text");
        org.jsoup.nodes.Document document3 = document2.ownerDocument();
        int int4 = document2.childNodeSize();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        java.io.InputStream inputStream0 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream3 = new org.jsoup.internal.ConstrainableInputStream(inputStream0, 1, (int) (byte) 0);
        boolean boolean4 = constrainableInputStream3.markSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = constrainableInputStream3.read();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages();
        boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3);
        org.jsoup.safety.Whitelist whitelist7 = whitelist3.removeEnforcedAttribute("Content-Encoding", "#root");
        java.lang.String str8 = org.jsoup.Jsoup.clean("", whitelist7);
        org.jsoup.safety.Whitelist whitelist12 = whitelist7.addEnforcedAttribute("[#declaration!=content-encoding]", ":empty", "amultipart");
        java.lang.String str13 = org.jsoup.Jsoup.clean("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", whitelist12);
        org.junit.Assert.assertNotNull(whitelist3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(whitelist7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(whitelist12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes3 = attributes0.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes6 = attributes0.add("hi!", "multipart/form-data");
        attributes6.normalize();
        org.jsoup.nodes.Attributes attributes10 = attributes6.put(":eq(-1)", "SYSTEM");
        org.jsoup.nodes.Attributes attributes13 = attributes6.put("#root", false);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = attributes6.dataset();
        attributes6.remove(":nth-last-of-type(100n-1)");
        java.lang.String str18 = attributes6.getIgnoreCase("hi!hi!");
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertNotNull(attributes13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection connection20 = httpConnection0.referrer("#document");
        org.jsoup.helper.HttpConnection httpConnection21 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request22 = httpConnection21.request();
        org.jsoup.Connection.Request request25 = request22.addHeader("multipart/form-data", "hi!");
        boolean boolean27 = request25.hasHeader("multipart/form-data");
        boolean boolean29 = request25.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method30 = request25.method();
        org.jsoup.Connection.Method method31 = request25.method();
        org.jsoup.Connection.Request request34 = request25.addHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ":eq(-1)");
        org.jsoup.Connection connection35 = httpConnection0.request(request25);
        org.jsoup.Connection.Method method36 = org.jsoup.Connection.Method.PATCH;
        org.jsoup.Connection.Request request37 = request25.method(method36);
        boolean boolean39 = request37.hasCookie(":only-of-type");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(connection20);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + method30 + "' != '" + org.jsoup.Connection.Method.GET + "'", method30.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method31 + "' != '" + org.jsoup.Connection.Method.GET + "'", method31.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(connection35);
        org.junit.Assert.assertTrue("'" + method36 + "' != '" + org.jsoup.Connection.Method.PATCH + "'", method36.equals(org.jsoup.Connection.Method.PATCH));
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        org.jsoup.Connection.KeyVal[] keyValArray6 = new org.jsoup.Connection.KeyVal[] {};
        java.util.ArrayList<org.jsoup.Connection.KeyVal> keyValList7 = new java.util.ArrayList<org.jsoup.Connection.KeyVal>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList7, keyValArray6);
        org.jsoup.Connection connection9 = httpConnection0.data((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList7);
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str13 = document12.id();
        java.lang.String str14 = document12.baseUri();
        org.jsoup.nodes.Element element15 = document12.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = document12.dataset();
        org.jsoup.Connection connection17 = httpConnection10.data(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection.Method method19 = org.jsoup.Connection.Method.HEAD;
        org.jsoup.Connection connection20 = httpConnection0.method(method19);
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(keyValArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertTrue("'" + method19 + "' != '" + org.jsoup.Connection.Method.HEAD + "'", method19.equals(org.jsoup.Connection.Method.HEAD));
        org.junit.Assert.assertNotNull(connection20);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.jsoup.select.Evaluator.Id id1 = new org.jsoup.select.Evaluator.Id(":first-child");
        java.io.InputStream inputStream4 = null;
        org.jsoup.helper.HttpConnection httpConnection7 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request8 = httpConnection7.request();
        org.jsoup.Connection.Request request11 = request8.addHeader("multipart/form-data", "hi!");
        boolean boolean13 = request11.hasHeader("multipart/form-data");
        boolean boolean15 = request11.hasCookie("#text");
        org.jsoup.parser.Parser parser16 = request11.parser();
        org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse(inputStream4, "", "multipart/form-data", parser16);
        boolean boolean18 = parser16.isTrackErrors();
        org.jsoup.parser.Parser parser20 = parser16.setTrackErrors(10);
        org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("PUBLIC", "Content-Type", parser20);
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str24 = document23.wholeText();
        org.jsoup.select.Elements elements25 = document23.parents();
        org.jsoup.nodes.Element element26 = document23.shallowClone();
        java.lang.Object obj27 = null;
        boolean boolean28 = document23.hasSameValue(obj27);
        org.jsoup.nodes.Element element30 = document23.appendText("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        org.jsoup.nodes.Element element31 = document23.root();
        org.jsoup.nodes.Element element33 = document23.createElement("application/x-www-form-urlencoded");
        boolean boolean34 = id1.matches((org.jsoup.nodes.Element) document21, element33);
        java.lang.String str35 = id1.toString();
        java.lang.String str36 = id1.toString();
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parser16);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(element33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "#:first-child" + "'", str35, "#:first-child");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "#:first-child" + "'", str36, "#:first-child");
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.jsoup.parser.ParseErrorList parseErrorList0 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream1 = parseErrorList0.stream();
        int int2 = parseErrorList0.size();
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.noTracking();
        int int7 = parseErrorList4.indexOf((java.lang.Object) parseErrorList6);
        org.jsoup.helper.HttpConnection httpConnection8 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = null;
        org.jsoup.Connection connection10 = httpConnection8.sslSocketFactory(sSLSocketFactory9);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = null;
        org.jsoup.Connection connection12 = httpConnection8.sslSocketFactory(sSLSocketFactory11);
        org.jsoup.Connection connection14 = httpConnection8.ignoreContentType(true);
        boolean boolean15 = parseErrorList4.equals((java.lang.Object) true);
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        parseErrorList17.ensureCapacity(10);
        boolean boolean21 = parseErrorList4.remove((java.lang.Object) parseErrorList17);
        parseErrorList17.ensureCapacity((int) (short) 100);
        boolean boolean24 = parseErrorList0.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList17.iterator();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError27 = parseErrorList17.get(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 100 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList0);
        org.junit.Assert.assertNotNull(parseErrorStream1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(connection10);
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(connection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorItor25);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.jsoup.nodes.TextNode textNode1 = new org.jsoup.nodes.TextNode(":nth-last-of-type(100n-1)");
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean3 = tokenQueue1.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        java.lang.String str4 = tokenQueue1.consumeWord();
        java.lang.String str6 = tokenQueue1.consumeTo("[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
        // The following exception was thrown during execution in test generation
        try {
            tokenQueue1.consume(" ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Queue did not match expected sequence");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart" + "'", str4, "multipart");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/form-data" + "'", str6, "/form-data");
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element3 = document1.val("hi!");
        org.jsoup.nodes.Element element5 = element3.html("");
        java.lang.String str6 = element3.tagName();
        org.jsoup.select.Elements elements8 = element3.getElementsByAttribute("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.select.Elements elements10 = elements8.addClass("#root=\"\"");
        java.util.List<java.lang.String> strList11 = elements8.eachText();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(element5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#root" + "'", str6, "#root");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection connection20 = httpConnection0.referrer("#document");
        org.jsoup.Connection connection23 = httpConnection0.data("#declaration", "Content-Type");
        org.jsoup.helper.HttpConnection httpConnection24 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request25 = httpConnection24.request();
        org.jsoup.Connection connection27 = httpConnection24.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection28 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = null;
        org.jsoup.Connection connection30 = httpConnection28.sslSocketFactory(sSLSocketFactory29);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = null;
        org.jsoup.Connection connection32 = httpConnection28.sslSocketFactory(sSLSocketFactory31);
        org.jsoup.Connection.Request request33 = httpConnection28.request();
        org.jsoup.helper.HttpConnection httpConnection34 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request35 = httpConnection34.request();
        org.jsoup.Connection.Request request38 = request35.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = request38.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = request38.cookies();
        org.jsoup.Connection connection41 = httpConnection28.headers(strMap40);
        org.jsoup.Connection connection42 = httpConnection24.data(strMap40);
        org.jsoup.Connection.Request request43 = httpConnection24.request();
        org.jsoup.Connection.Request request46 = request43.addHeader("#document", " hi!=\"multipart/form-data\"");
        org.jsoup.Connection.Request request49 = request46.proxy("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", (int) (byte) 100);
        org.jsoup.Connection connection50 = httpConnection0.request(request46);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection connection53 = httpConnection0.header("", "                                   ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Header name must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(connection20);
        org.junit.Assert.assertNotNull(connection23);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(connection27);
        org.junit.Assert.assertNotNull(connection30);
        org.junit.Assert.assertNotNull(connection32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(connection41);
        org.junit.Assert.assertNotNull(connection42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(connection50);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        boolean boolean8 = request4.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method9 = request4.method();
        org.jsoup.Connection.Method method10 = request4.method();
        java.net.URL uRL11 = request4.url();
        java.net.Proxy proxy12 = null;
        org.jsoup.Connection.Request request13 = request4.proxy(proxy12);
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + method9 + "' != '" + org.jsoup.Connection.Method.GET + "'", method9.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method10 + "' != '" + org.jsoup.Connection.Method.GET + "'", method10.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNull(uRL11);
        org.junit.Assert.assertNotNull(request13);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.jsoup.select.Evaluator.IsOnlyChild isOnlyChild0 = new org.jsoup.select.Evaluator.IsOnlyChild();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType3 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.wholeText();
        org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str9 = document8.className();
        boolean boolean10 = isNthLastOfType3.matches((org.jsoup.nodes.Element) document5, (org.jsoup.nodes.Element) document8);
        org.jsoup.nodes.Document document11 = document5.clone();
        document11.setBaseUri("#root");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType16 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str19 = document18.className();
        java.lang.String str20 = document18.outerHtml();
        boolean boolean22 = document18.hasSameValue((java.lang.Object) 1);
        java.lang.String str23 = document18.tagName();
        org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element27 = document25.val("hi!");
        boolean boolean28 = isNthLastOfType16.matches((org.jsoup.nodes.Element) document18, element27);
        boolean boolean29 = isOnlyChild0.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document18);
        java.lang.String str30 = isOnlyChild0.toString();
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str20, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "#root" + "'", str23, "#root");
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + ":only-child" + "'", str30, ":only-child");
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response1 = httpConnection0.response();
        java.lang.String str2 = response1.statusMessage();
        org.jsoup.Connection.Response response4 = response1.removeCookie("Content-Encoding");
        java.lang.String str6 = response1.cookie("hi!hi!");
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.jsoup.helper.Validate.notEmpty("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!", "PUBLIC");
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection connection6 = httpConnection0.ignoreContentType(true);
        org.jsoup.Connection connection9 = connection6.proxy("multipart", (int) (byte) 1);
        org.jsoup.Connection connection11 = connection6.requestBody("");
        org.jsoup.Connection connection14 = connection6.cookie("Content-Encoding=#declaration", "[#declaration!=content-encoding]");
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(connection11);
        org.junit.Assert.assertNotNull(connection14);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.select.Elements elements5 = elements3.prev("#text");
        java.lang.String str6 = elements5.val();
        org.jsoup.select.Elements elements7 = elements5.nextAll();
        org.jsoup.select.Elements elements9 = elements7.before("PUBLIC");
        boolean boolean11 = elements9.remove((java.lang.Object) "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        java.util.List<java.lang.String> strList13 = elements9.eachAttr("");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method5 = request1.method();
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection6.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection connection10 = httpConnection6.ignoreContentType(true);
        org.jsoup.helper.HttpConnection httpConnection11 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request12 = httpConnection11.request();
        org.jsoup.Connection.Request request15 = request12.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = request15.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = request15.headers();
        java.net.Proxy proxy18 = request15.proxy();
        org.jsoup.Connection connection19 = httpConnection6.request(request15);
        org.jsoup.Connection.Method method20 = request15.method();
        org.jsoup.Connection.Request request21 = request1.method(method20);
        boolean boolean23 = request1.hasHeader(":first-child");
        java.net.URL uRL24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Request request25 = request1.url(uRL24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + method5 + "' != '" + org.jsoup.Connection.Method.GET + "'", method5.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(connection10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(proxy18);
        org.junit.Assert.assertNotNull(connection19);
        org.junit.Assert.assertTrue("'" + method20 + "' != '" + org.jsoup.Connection.Method.GET + "'", method20.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.select.Elements elements5 = elements3.prev("#text");
        java.lang.String str6 = elements5.val();
        org.jsoup.select.Elements elements7 = elements5.nextAll();
        org.jsoup.select.Elements elements8 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements7);
        java.lang.String str9 = elements7.val();
        org.jsoup.select.Elements elements11 = elements7.after("/form-data");
        org.jsoup.select.Elements elements13 = elements7.append("<!hi!!>");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(elements13);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean3 = tokenQueue1.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        boolean boolean4 = tokenQueue1.consumeWhitespace();
        java.lang.String str6 = tokenQueue1.chompToIgnoreCase("#doctype");
        tokenQueue1.addFirst((java.lang.Character) 'a');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data" + "'", str6, "multipart/form-data");
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType2 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.id();
        org.jsoup.select.Elements elements6 = document4.previousElementSiblings();
        org.jsoup.nodes.Element element7 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType2, (org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.className();
        java.lang.String str11 = document9.outerHtml();
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.id();
        java.lang.String str15 = document13.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan17 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean18 = document13.is((org.jsoup.select.Evaluator) indexLessThan17);
        boolean boolean19 = isNthLastOfType2.matches((org.jsoup.nodes.Element) document9, (org.jsoup.nodes.Element) document13);
        java.lang.String str20 = document13.cssSelector();
        org.jsoup.nodes.Element element21 = document13.clearAttributes();
        org.jsoup.nodes.Node node22 = document13.clone();
        org.jsoup.select.Elements elements24 = document13.getElementsByAttribute("#root");
        org.jsoup.select.Elements elements25 = elements24.remove();
        int int26 = elements24.size();
        boolean boolean28 = elements24.is("[public=<!#root!>]");
        org.jsoup.select.Elements elements30 = elements24.prepend("Content-Type=#declaration");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType33 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str36 = document35.id();
        org.jsoup.select.Elements elements37 = document35.previousElementSiblings();
        org.jsoup.nodes.Element element38 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType33, (org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str41 = document40.className();
        java.lang.String str42 = document40.outerHtml();
        org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str45 = document44.id();
        java.lang.String str46 = document44.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan48 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean49 = document44.is((org.jsoup.select.Evaluator) indexLessThan48);
        boolean boolean50 = isNthLastOfType33.matches((org.jsoup.nodes.Element) document40, (org.jsoup.nodes.Element) document44);
        org.jsoup.select.Elements elements52 = document40.getElementsMatchingOwnText("multipart/form-data");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType55 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str58 = document57.id();
        org.jsoup.select.Elements elements59 = document57.previousElementSiblings();
        org.jsoup.nodes.Element element60 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType55, (org.jsoup.nodes.Element) document57);
        org.jsoup.nodes.Document document62 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str63 = document62.className();
        java.lang.String str64 = document62.outerHtml();
        org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str67 = document66.id();
        java.lang.String str68 = document66.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan70 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean71 = document66.is((org.jsoup.select.Evaluator) indexLessThan70);
        boolean boolean72 = isNthLastOfType55.matches((org.jsoup.nodes.Element) document62, (org.jsoup.nodes.Element) document66);
        java.lang.String str73 = document66.cssSelector();
        org.jsoup.nodes.Element element74 = document66.clearAttributes();
        org.jsoup.nodes.Element element76 = element74.html("Content-Encoding");
        boolean boolean77 = elements52.add(element74);
        org.jsoup.nodes.Document document78 = element74.ownerDocument();
        boolean boolean79 = elements24.add((org.jsoup.nodes.Element) document78);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNull(element7);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#root" + "'", str20, "#root");
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(elements37);
        org.junit.Assert.assertNull(element38);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str42, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(elements52);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(elements59);
        org.junit.Assert.assertNull(element60);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str64, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "#root" + "'", str73, "#root");
        org.junit.Assert.assertNotNull(element74);
        org.junit.Assert.assertNotNull(element76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(document78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        boolean boolean1 = org.jsoup.internal.StringUtil.isNumeric("system");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response1 = httpConnection0.response();
        java.util.List<java.lang.String> strList3 = response1.headers(" hi!=\"multipart/form-data\"");
        java.lang.String str4 = response1.contentType();
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedInputStream bufferedInputStream5 = response1.bodyStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element3 = document1.html("Content-Encoding");
        org.jsoup.select.Elements elements5 = document1.getElementsByIndexEquals((int) (short) -1);
        elements5.trimToSize();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(elements5);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!multipart/form-data");
        org.junit.Assert.assertNotNull(document1);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist();
        org.jsoup.safety.Whitelist whitelist3 = whitelist0.removeEnforcedAttribute("#:first-child", "content-encoding=\"#root\"");
        org.jsoup.safety.Whitelist whitelist6 = whitelist3.removeEnforcedAttribute("#text", "[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
        org.junit.Assert.assertNotNull(whitelist3);
        org.junit.Assert.assertNotNull(whitelist6);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.simpleText();
        org.jsoup.safety.Cleaner cleaner1 = new org.jsoup.safety.Cleaner(whitelist0);
        org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages();
        boolean boolean6 = org.jsoup.Jsoup.isValid("hi!", whitelist5);
        java.lang.String[] strArray12 = new java.lang.String[] { "ltipart/form-data", ":lt(0)", "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n", "application/x-www-form-urlencoded" };
        org.jsoup.safety.Whitelist whitelist13 = whitelist5.removeAttributes("system", strArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.safety.Whitelist whitelist14 = whitelist0.addProtocols("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!", "", strArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(whitelist0);
        org.junit.Assert.assertNotNull(whitelist5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(whitelist13);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        java.lang.String str2 = tokenQueue1.toString();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str6 = tokenQueue1.chompBalanced('4', ' ');
        boolean boolean7 = tokenQueue1.consumeWhitespace();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "multipart/form-data" + "'", str2, "multipart/form-data");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.jsoup.select.Evaluator.Tag tag1 = new org.jsoup.select.Evaluator.Tag("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        java.lang.String str2 = tag1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!" + "'", str2, "hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.jsoup.select.Evaluator.MatchText matchText0 = new org.jsoup.select.Evaluator.MatchText();
        org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot3 = new org.jsoup.select.Evaluator.AttributeWithValueNot(":eq(-1)", "#doctype");
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.id();
        java.lang.String str7 = document5.baseUri();
        org.jsoup.nodes.Element element10 = document5.attr("", true);
        org.jsoup.nodes.Node node13 = document5.attr("#text", "");
        org.jsoup.nodes.Element element14 = document5.shallowClone();
        org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str17 = document16.id();
        java.lang.String str18 = document16.baseUri();
        org.jsoup.nodes.Element element19 = document16.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = document16.dataset();
        org.jsoup.nodes.Element element22 = document16.html("#root=\"\"");
        boolean boolean23 = attributeWithValueNot3.matches(element14, (org.jsoup.nodes.Element) document16);
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType26 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str29 = document28.wholeText();
        org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str32 = document31.className();
        boolean boolean33 = isNthLastOfType26.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document31);
        org.jsoup.nodes.Document document34 = document28.clone();
        org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot37 = new org.jsoup.select.Evaluator.AttributeWithValueNot("#text", "#text");
        org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("", "#doctype");
        org.jsoup.nodes.Document document43 = org.jsoup.parser.Parser.parse(" hi!=\"multipart/form-data\"", "Content-Encoding");
        boolean boolean44 = attributeWithValueNot37.matches((org.jsoup.nodes.Element) document40, (org.jsoup.nodes.Element) document43);
        boolean boolean45 = attributeWithValueNot3.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document40);
        org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str48 = document47.id();
        java.lang.String str49 = document47.baseUri();
        org.jsoup.nodes.Element element50 = document47.body();
        org.jsoup.helper.HttpConnection httpConnection51 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request52 = httpConnection51.request();
        org.jsoup.Connection.Request request55 = request52.addHeader("multipart/form-data", "hi!");
        boolean boolean57 = request55.hasHeader("multipart/form-data");
        boolean boolean59 = request55.hasCookie("#text");
        org.jsoup.parser.Parser parser60 = request55.parser();
        org.jsoup.nodes.Document document61 = document47.parser(parser60);
        org.jsoup.nodes.Node node62 = document61.parent();
        org.jsoup.select.Elements elements63 = document61.children();
        boolean boolean64 = matchText0.matches((org.jsoup.nodes.Element) document40, (org.jsoup.nodes.Element) document61);
        org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str67 = document66.id();
        java.lang.String str68 = document66.baseUri();
        org.jsoup.nodes.Element element71 = document66.attr("", true);
        org.jsoup.select.Elements elements73 = document66.getElementsContainingOwnText("[]");
        org.jsoup.nodes.Element element75 = document66.tagName("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        java.lang.String str76 = document66.html();
        org.jsoup.nodes.Document document78 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str79 = document78.id();
        java.lang.String str80 = document78.baseUri();
        org.jsoup.nodes.Element element81 = document78.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap82 = document78.dataset();
        boolean boolean83 = matchText0.matches((org.jsoup.nodes.Element) document66, (org.jsoup.nodes.Element) document78);
        java.lang.String str84 = matchText0.toString();
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(element50);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(request55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(parser60);
        org.junit.Assert.assertNotNull(document61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(elements63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(element71);
        org.junit.Assert.assertNotNull(elements73);
        org.junit.Assert.assertNotNull(element75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str76, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(element81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + ":matchText" + "'", str84, ":matchText");
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.jsoup.select.Evaluator.IsLastChild isLastChild0 = new org.jsoup.select.Evaluator.IsLastChild();
        java.lang.String str1 = isLastChild0.toString();
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str4 = document3.id();
        java.lang.String str5 = document3.baseUri();
        org.jsoup.nodes.Element element6 = document3.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = document3.dataset();
        document3.updateMetaCharsetElement(true);
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.className();
        java.lang.String str13 = document11.outerHtml();
        boolean boolean15 = document11.hasSameValue((java.lang.Object) 1);
        java.util.Set<java.lang.String> strSet16 = document11.classNames();
        boolean boolean17 = isLastChild0.matches((org.jsoup.nodes.Element) document3, (org.jsoup.nodes.Element) document11);
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType20 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str23 = document22.wholeText();
        org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str26 = document25.className();
        boolean boolean27 = isNthLastOfType20.matches((org.jsoup.nodes.Element) document22, (org.jsoup.nodes.Element) document25);
        org.jsoup.nodes.Document document28 = document22.clone();
        document28.setBaseUri("#root");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan32 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType35 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str38 = document37.id();
        org.jsoup.select.Elements elements39 = document37.previousElementSiblings();
        org.jsoup.nodes.Element element40 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType35, (org.jsoup.nodes.Element) document37);
        org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str43 = document42.className();
        java.lang.String str44 = document42.outerHtml();
        org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str47 = document46.id();
        java.lang.String str48 = document46.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan50 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean51 = document46.is((org.jsoup.select.Evaluator) indexLessThan50);
        boolean boolean52 = isNthLastOfType35.matches((org.jsoup.nodes.Element) document42, (org.jsoup.nodes.Element) document46);
        java.lang.String str53 = document46.cssSelector();
        org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str56 = document55.className();
        java.lang.String str57 = document55.outerHtml();
        boolean boolean59 = document55.hasSameValue((java.lang.Object) 1);
        boolean boolean60 = indexLessThan32.matches((org.jsoup.nodes.Element) document46, (org.jsoup.nodes.Element) document55);
        org.jsoup.nodes.Element element61 = document28.prependChild((org.jsoup.nodes.Node) document55);
        java.lang.String str63 = document28.absUrl(" hi!=\"multipart/form-data\"");
        org.jsoup.nodes.Document document65 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str66 = document65.id();
        java.lang.String str67 = document65.baseUri();
        org.jsoup.nodes.Element element70 = document65.attr("", true);
        org.jsoup.parser.Parser parser71 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document72 = document65.parser(parser71);
        boolean boolean73 = isLastChild0.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document72);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + ":last-child" + "'", str1, ":last-child");
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(elements39);
        org.junit.Assert.assertNull(element40);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str44, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "#root" + "'", str53, "#root");
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str57, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(element61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(element70);
        org.junit.Assert.assertNotNull(parser71);
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType2 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.className();
        java.lang.String str6 = document4.outerHtml();
        boolean boolean8 = document4.hasSameValue((java.lang.Object) 1);
        java.lang.String str9 = document4.tagName();
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element13 = document11.val("hi!");
        boolean boolean14 = isNthLastOfType2.matches((org.jsoup.nodes.Element) document4, element13);
        org.jsoup.select.Elements elements15 = element13.nextElementSiblings();
        org.jsoup.nodes.Element element17 = element13.getElementById(":last-child");
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str6, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#root" + "'", str9, "#root");
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNull(element17);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes3 = attributes0.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes6 = attributes0.add("hi!", "multipart/form-data");
        java.lang.String str7 = attributes6.html();
        org.jsoup.helper.HttpConnection httpConnection8 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request9 = httpConnection8.request();
        org.jsoup.Connection.Request request12 = request9.addHeader("multipart/form-data", "hi!");
        boolean boolean14 = request12.hasHeader("multipart/form-data");
        boolean boolean16 = request12.hasHeader("multipart/form-data");
        boolean boolean17 = attributes6.equals((java.lang.Object) request12);
        org.jsoup.nodes.Attributes attributes18 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes21 = attributes18.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes24 = attributes18.add("hi!", "multipart/form-data");
        org.jsoup.nodes.Attributes attributes27 = null;
        org.jsoup.nodes.Attribute attribute28 = new org.jsoup.nodes.Attribute("Content-Encoding", "#root", attributes27);
        java.lang.String str29 = attribute28.getValue();
        org.jsoup.nodes.Attributes attributes30 = attributes18.put(attribute28);
        org.jsoup.nodes.Attributes attributes33 = attributes30.put("ultipart", false);
        org.jsoup.nodes.Attributes attributes34 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attribute attribute37 = org.jsoup.nodes.Attribute.createFromEncoded("#root", "");
        org.jsoup.nodes.Attributes attributes38 = attributes34.put(attribute37);
        org.jsoup.nodes.Attribute attribute39 = attribute37.clone();
        java.lang.String str40 = attribute39.html();
        org.jsoup.nodes.Attributes attributes41 = attributes33.put(attribute39);
        attributes6.addAll(attributes33);
        org.jsoup.nodes.Attributes attributes45 = attributes33.put("Content-Encoding", true);
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + " hi!=\"multipart/form-data\"" + "'", str7, " hi!=\"multipart/form-data\"");
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertNotNull(attributes24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "#root" + "'", str29, "#root");
        org.junit.Assert.assertNotNull(attributes30);
        org.junit.Assert.assertNotNull(attributes33);
        org.junit.Assert.assertNotNull(attribute37);
        org.junit.Assert.assertNotNull(attributes38);
        org.junit.Assert.assertNotNull(attribute39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "#root=\"\"" + "'", str40, "#root=\"\"");
        org.junit.Assert.assertNotNull(attributes41);
        org.junit.Assert.assertNotNull(attributes45);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.className();
        java.lang.String str4 = document1.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.nodes.Element element6 = document1.text("");
        org.jsoup.select.Elements elements7 = document1.getAllElements();
        java.lang.String str8 = document1.tagName();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#root" + "'", str8, "#root");
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes3 = attributes0.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes6 = attributes0.add("hi!", "multipart/form-data");
        java.lang.String str7 = attributes6.html();
        org.jsoup.helper.HttpConnection httpConnection8 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request9 = httpConnection8.request();
        org.jsoup.Connection.Request request12 = request9.addHeader("multipart/form-data", "hi!");
        boolean boolean14 = request12.hasHeader("multipart/form-data");
        boolean boolean16 = request12.hasHeader("multipart/form-data");
        boolean boolean17 = attributes6.equals((java.lang.Object) request12);
        org.jsoup.Connection.Request request20 = request12.cookie("PUBLIC", "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n");
        boolean boolean21 = request20.followRedirects();
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + " hi!=\"multipart/form-data\"" + "'", str7, " hi!=\"multipart/form-data\"");
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        java.lang.String str8 = request4.cookie("#root");
        java.lang.String str9 = request4.requestBody();
        org.jsoup.Connection.Method method10 = request4.method();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + method10 + "' != '" + org.jsoup.Connection.Method.GET + "'", method10.equals(org.jsoup.Connection.Method.GET));
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection connection20 = httpConnection0.referrer("#document");
        org.jsoup.Connection connection23 = httpConnection0.data(":last-of-type", "Content-Encoding=\"#root\"");
        org.jsoup.nodes.Attributes attributes24 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attribute attribute27 = org.jsoup.nodes.Attribute.createFromEncoded("#root", "");
        org.jsoup.nodes.Attributes attributes28 = attributes24.put(attribute27);
        org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str31 = document30.id();
        org.jsoup.select.Elements elements32 = document30.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor33 = elements32.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor34 = elements32.listIterator();
        org.jsoup.select.Elements elements35 = elements32.empty();
        boolean boolean36 = attributes28.equals((java.lang.Object) elements32);
        org.jsoup.nodes.Attributes attributes39 = attributes28.add("#root=\"\"", " hi!=\"multipart/form-data\"");
        boolean boolean40 = attributes39.isEmpty();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = attributes39.dataset();
        org.jsoup.Connection connection42 = httpConnection0.headers(strMap41);
        org.jsoup.helper.HttpConnection httpConnection43 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request44 = httpConnection43.request();
        org.jsoup.Connection.Request request47 = request44.addHeader("multipart/form-data", "hi!");
        boolean boolean49 = request47.hasHeader("multipart/form-data");
        boolean boolean51 = request47.hasCookie("#text");
        org.jsoup.parser.Parser parser52 = request47.parser();
        org.jsoup.Connection.Request request55 = request47.header("#text", "multipart/form-data");
        boolean boolean58 = request55.hasHeaderWithValue(":nth-last-of-type(100n-1)", "multipart/form-data");
        org.jsoup.Connection connection59 = httpConnection0.request(request55);
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(connection20);
        org.junit.Assert.assertNotNull(connection23);
        org.junit.Assert.assertNotNull(attribute27);
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(elements32);
        org.junit.Assert.assertNotNull(elementItor33);
        org.junit.Assert.assertNotNull(elementItor34);
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(attributes39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(connection42);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parser52);
        org.junit.Assert.assertNotNull(request55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(connection59);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.jsoup.HttpStatusException httpStatusException3 = new org.jsoup.HttpStatusException("Content-Encoding=\"#root\"", (int) (short) 1, ":nth-last-of-type(100n-1)");
        java.lang.String str4 = httpStatusException3.toString();
        java.lang.Throwable[] throwableArray5 = httpStatusException3.getSuppressed();
        int int6 = httpStatusException3.getStatusCode();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.jsoup.HttpStatusException: Content-Encoding=\"#root\". Status=1, URL=:nth-last-of-type(100n-1)" + "'", str4, "org.jsoup.HttpStatusException: Content-Encoding=\"#root\". Status=1, URL=:nth-last-of-type(100n-1)");
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.jsoup.helper.HttpConnection.KeyVal keyVal2 = org.jsoup.helper.HttpConnection.KeyVal.create("SYSTEM", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str3 = keyVal2.value();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.KeyVal keyVal5 = keyVal2.key("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Data key must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(keyVal2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str3, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.jsoup.nodes.Comment comment2 = new org.jsoup.nodes.Comment("<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>", ":lt(52)");
        java.lang.String str3 = comment2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n<!--<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>-->" + "'", str3, "\n<!--<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>-->");
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType2 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.id();
        org.jsoup.select.Elements elements6 = document4.previousElementSiblings();
        org.jsoup.nodes.Element element7 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType2, (org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.className();
        java.lang.String str11 = document9.outerHtml();
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.id();
        java.lang.String str15 = document13.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan17 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean18 = document13.is((org.jsoup.select.Evaluator) indexLessThan17);
        boolean boolean19 = isNthLastOfType2.matches((org.jsoup.nodes.Element) document9, (org.jsoup.nodes.Element) document13);
        java.lang.String str20 = document13.cssSelector();
        org.jsoup.nodes.Element element21 = document13.clearAttributes();
        org.jsoup.nodes.Node node22 = document13.clone();
        org.jsoup.select.Elements elements24 = document13.getElementsByAttribute("#root");
        org.jsoup.select.Elements elements25 = elements24.remove();
        int int26 = elements24.size();
        boolean boolean28 = elements24.is("[public=<!#root!>]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element30 = elements24.get((int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 117 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNull(element7);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#root" + "'", str20, "#root");
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        org.jsoup.Connection connection7 = httpConnection0.header("#declaration", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(connection7);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        java.lang.String str8 = request4.cookie("#root");
        org.jsoup.Connection.Request request10 = request4.ignoreHttpErrors(false);
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(request10);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        boolean boolean6 = elements3.equals((java.lang.Object) 1.0d);
        java.lang.String str7 = elements3.text();
        org.jsoup.select.Elements elements9 = elements3.wrap("#root");
        org.jsoup.select.Elements elements11 = elements9.toggleClass("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.select.Elements elements13 = elements9.html("#text");
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.id();
        java.lang.String str17 = document15.baseUri();
        org.jsoup.nodes.Element element18 = document15.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = document15.dataset();
        boolean boolean20 = elements9.add((org.jsoup.nodes.Element) document15);
        boolean boolean21 = elements9.isEmpty();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.jsoup.helper.HttpConnection.KeyVal keyVal2 = org.jsoup.helper.HttpConnection.KeyVal.create("#root", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        java.io.InputStream inputStream3 = null;
        org.jsoup.Connection.KeyVal keyVal4 = keyVal2.inputStream(inputStream3);
        org.jsoup.helper.HttpConnection.KeyVal keyVal6 = keyVal2.key(":eq(-1)");
        java.io.InputStream inputStream7 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream10 = new org.jsoup.internal.ConstrainableInputStream(inputStream7, 1, (int) (byte) 0);
        org.jsoup.helper.HttpConnection.KeyVal keyVal11 = keyVal2.inputStream((java.io.InputStream) constrainableInputStream10);
        org.jsoup.Connection.KeyVal keyVal13 = keyVal2.value("");
        java.lang.String str14 = keyVal2.contentType();
        org.junit.Assert.assertNotNull(keyVal2);
        org.junit.Assert.assertNotNull(keyVal4);
        org.junit.Assert.assertNotNull(keyVal6);
        org.junit.Assert.assertNotNull(keyVal11);
        org.junit.Assert.assertNotNull(keyVal13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        java.io.InputStream inputStream2 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal3 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream2);
        java.io.InputStream inputStream4 = keyVal3.inputStream();
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        org.jsoup.Connection connection7 = httpConnection5.sslSocketFactory(sSLSocketFactory6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = null;
        org.jsoup.Connection connection9 = httpConnection5.sslSocketFactory(sSLSocketFactory8);
        org.jsoup.Connection.Request request10 = httpConnection5.request();
        org.jsoup.helper.HttpConnection httpConnection11 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request12 = httpConnection11.request();
        org.jsoup.Connection.Request request15 = request12.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = request15.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = request15.cookies();
        org.jsoup.Connection connection18 = httpConnection5.headers(strMap17);
        java.io.InputStream inputStream21 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream24 = new org.jsoup.internal.ConstrainableInputStream(inputStream21, 1, (int) (byte) 0);
        org.jsoup.Connection connection25 = httpConnection5.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream24);
        org.jsoup.helper.HttpConnection.KeyVal keyVal26 = keyVal3.inputStream((java.io.InputStream) constrainableInputStream24);
        boolean boolean27 = keyVal3.hasInputStream();
        java.lang.String str28 = keyVal3.contentType();
        java.io.InputStream inputStream29 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream32 = new org.jsoup.internal.ConstrainableInputStream(inputStream29, 1, (int) (byte) 0);
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream35 = constrainableInputStream32.timeout((long) ' ', (long) (short) 1);
        constrainableInputStream32.close();
        org.jsoup.helper.HttpConnection.KeyVal keyVal37 = keyVal3.inputStream((java.io.InputStream) constrainableInputStream32);
        org.jsoup.helper.HttpConnection.KeyVal keyVal39 = keyVal3.key("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<#root value=\"hi!\">\n <html>\n  <head></head>\n  <body>\n   hi!\n  </body>\n </html>\n</#root>");
        org.junit.Assert.assertNotNull(keyVal3);
        org.junit.Assert.assertNull(inputStream4);
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(connection25);
        org.junit.Assert.assertNotNull(keyVal26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(constrainableInputStream35);
        org.junit.Assert.assertNotNull(keyVal37);
        org.junit.Assert.assertNotNull(keyVal39);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        java.lang.String str3 = document1.baseUri();
        org.jsoup.nodes.Element element6 = document1.attr("", true);
        org.jsoup.select.Elements elements8 = document1.getElementsByIndexEquals((int) ' ');
        java.util.Iterator<org.jsoup.nodes.Element> elementItor9 = elements8.iterator();
        int int10 = elements8.size();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elementItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document3 = org.jsoup.helper.DataUtil.load(file0, "", "#:first-child");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.jsoup.select.Evaluator.Id id1 = new org.jsoup.select.Evaluator.Id("<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>");
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element3 = document1.html("Content-Encoding");
        org.jsoup.select.Elements elements5 = document1.getElementsByIndexEquals((int) (short) -1);
        org.jsoup.select.Elements elements7 = document1.getElementsMatchingText("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element9 = document1.child((int) 'm');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 109 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages();
        boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2);
        org.jsoup.safety.Whitelist whitelist6 = whitelist2.removeEnforcedAttribute("Content-Encoding", "#root");
        java.lang.String str7 = org.jsoup.Jsoup.clean("", whitelist6);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!", "", "multipart/form-data", "hi!" };
        boolean boolean16 = org.jsoup.internal.StringUtil.in("", strArray15);
        boolean boolean17 = org.jsoup.internal.StringUtil.in("", strArray15);
        java.lang.String str19 = org.jsoup.internal.StringUtil.join(strArray15, " hi!=\"multipart/form-data\"");
        org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray15, ":first-of-type");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.safety.Whitelist whitelist22 = whitelist6.addTags(strArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(whitelist2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(whitelist6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!" + "'", str19, "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        java.io.InputStream inputStream0 = null;
        org.jsoup.nodes.Document document3 = org.jsoup.helper.DataUtil.load(inputStream0, "#root=\"\"", "#text");
        java.util.List<org.jsoup.nodes.Node> nodeList4 = document3.childNodes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node6 = document3.wrap("amultipart/form-data");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.jsoup.nodes.Node.replaceChild(org.jsoup.nodes.Node, org.jsoup.nodes.Node)\" because \"this.parentNode\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertNotNull(nodeList4);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response1 = httpConnection0.response();
        java.lang.String str2 = response1.statusMessage();
        java.lang.String str3 = response1.statusMessage();
        org.jsoup.Connection.Method method4 = response1.method();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = response1.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = response1.cookies();
        boolean boolean8 = response1.hasCookie(":last-child");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = response1.hasHeaderWithValue("", ":containsOwn(system)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.className();
        java.lang.String str3 = document1.outerHtml();
        boolean boolean5 = document1.hasSameValue((java.lang.Object) 1);
        java.lang.String str6 = document1.tagName();
        java.lang.String str7 = document1.baseUri();
        org.jsoup.select.Elements elements9 = document1.getElementsByIndexGreaterThan((int) (short) 100);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str3, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#root" + "'", str6, "#root");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements9);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.formatAsBlock();
        java.lang.String str3 = tag1.toString();
        org.jsoup.nodes.Attributes attributes5 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes8 = attributes5.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes11 = attributes5.add("hi!", "multipart/form-data");
        java.lang.String str12 = attributes11.html();
        org.jsoup.nodes.Attributes attributes13 = attributes11.clone();
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor14 = attributes11.iterator();
        org.jsoup.nodes.PseudoTextElement pseudoTextElement15 = new org.jsoup.nodes.PseudoTextElement(tag1, "ultipart", attributes11);
        org.jsoup.nodes.Attributes attributes16 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes19 = attributes16.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        java.lang.String str20 = attributes16.toString();
        attributes11.addAll(attributes16);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#document" + "'", str3, "#document");
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + " hi!=\"multipart/form-data\"" + "'", str12, " hi!=\"multipart/form-data\"");
        org.junit.Assert.assertNotNull(attributes13);
        org.junit.Assert.assertNotNull(attributeItor14);
        org.junit.Assert.assertNotNull(attributes19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.jsoup.helper.HttpConnection httpConnection2 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request3 = httpConnection2.request();
        org.jsoup.Connection connection5 = httpConnection2.referrer("multipart/form-data");
        java.io.InputStream inputStream6 = null;
        org.jsoup.helper.HttpConnection httpConnection9 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request10 = httpConnection9.request();
        org.jsoup.Connection.Request request13 = request10.addHeader("multipart/form-data", "hi!");
        boolean boolean15 = request13.hasHeader("multipart/form-data");
        boolean boolean17 = request13.hasCookie("#text");
        org.jsoup.parser.Parser parser18 = request13.parser();
        org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse(inputStream6, "", "multipart/form-data", parser18);
        org.jsoup.parser.ParseErrorList parseErrorList20 = parser18.getErrors();
        org.jsoup.Connection connection21 = connection5.parser(parser18);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser23 = parser18.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder22);
        org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!", "UTF-8", parser23);
        org.jsoup.parser.ParseSettings parseSettings25 = parser23.settings();
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(connection5);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parser18);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(connection21);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(parseSettings25);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request7 = httpConnection6.request();
        org.jsoup.Connection.Request request10 = request7.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method11 = request7.method();
        org.jsoup.Connection connection12 = httpConnection0.method(method11);
        org.jsoup.Connection.Request request13 = connection12.request();
        org.jsoup.helper.HttpConnection httpConnection14 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request15 = httpConnection14.request();
        org.jsoup.Connection.Request request18 = request15.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method19 = request15.method();
        org.jsoup.Connection connection20 = connection12.method(method19);
        org.jsoup.helper.HttpConnection httpConnection21 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = null;
        org.jsoup.Connection connection23 = httpConnection21.sslSocketFactory(sSLSocketFactory22);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory24 = null;
        org.jsoup.Connection connection25 = httpConnection21.sslSocketFactory(sSLSocketFactory24);
        org.jsoup.Connection.Request request26 = httpConnection21.request();
        org.jsoup.helper.HttpConnection httpConnection27 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request28 = httpConnection27.request();
        org.jsoup.Connection.Request request31 = request28.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method32 = request28.method();
        org.jsoup.Connection connection33 = httpConnection21.method(method32);
        org.jsoup.Connection.Request request34 = connection33.request();
        org.jsoup.helper.HttpConnection httpConnection35 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request36 = httpConnection35.request();
        org.jsoup.Connection.Request request39 = request36.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method40 = request36.method();
        org.jsoup.Connection connection41 = connection33.method(method40);
        boolean boolean42 = method40.hasBody();
        org.jsoup.Connection connection43 = connection12.method(method40);
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertTrue("'" + method11 + "' != '" + org.jsoup.Connection.Method.GET + "'", method11.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertTrue("'" + method19 + "' != '" + org.jsoup.Connection.Method.GET + "'", method19.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection20);
        org.junit.Assert.assertNotNull(connection23);
        org.junit.Assert.assertNotNull(connection25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertTrue("'" + method32 + "' != '" + org.jsoup.Connection.Method.GET + "'", method32.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(request39);
        org.junit.Assert.assertTrue("'" + method40 + "' != '" + org.jsoup.Connection.Method.GET + "'", method40.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(connection43);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection connection1 = org.jsoup.Jsoup.connect("<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Malformed URL: <html>? <head></head> ? <body>?   hi!  ? </body>?</html>");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.jsoup.select.Evaluator.Tag tag1 = new org.jsoup.select.Evaluator.Tag("#text");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType6 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str9 = document8.id();
        org.jsoup.select.Elements elements10 = document8.previousElementSiblings();
        org.jsoup.nodes.Element element11 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType6, (org.jsoup.nodes.Element) document8);
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.className();
        java.lang.String str15 = document13.outerHtml();
        org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str18 = document17.id();
        java.lang.String str19 = document17.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan21 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean22 = document17.is((org.jsoup.select.Evaluator) indexLessThan21);
        boolean boolean23 = isNthLastOfType6.matches((org.jsoup.nodes.Element) document13, (org.jsoup.nodes.Element) document17);
        java.lang.String str24 = document17.cssSelector();
        org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str27 = document26.className();
        java.lang.String str28 = document26.outerHtml();
        boolean boolean30 = document26.hasSameValue((java.lang.Object) 1);
        boolean boolean31 = indexLessThan3.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document26);
        org.jsoup.parser.Parser parser32 = document17.parser();
        java.lang.String str33 = document17.val();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType36 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str39 = document38.className();
        java.lang.String str40 = document38.outerHtml();
        boolean boolean42 = document38.hasSameValue((java.lang.Object) 1);
        java.lang.String str43 = document38.tagName();
        org.jsoup.nodes.Document document45 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element47 = document45.val("hi!");
        boolean boolean48 = isNthLastOfType36.matches((org.jsoup.nodes.Element) document38, element47);
        boolean boolean49 = tag1.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document38);
        org.jsoup.select.Elements elements50 = document38.children();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.outline();
        int int53 = outputSettings51.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings51.indentAmount(1);
        java.nio.charset.Charset charset56 = outputSettings55.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings55.outline(false);
        org.jsoup.nodes.Document document59 = document38.outputSettings(outputSettings58);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNull(element11);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str15, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#root" + "'", str24, "#root");
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str28, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(parser32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str40, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "#root" + "'", str43, "#root");
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(element47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(elements50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertNotNull(document59);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse(":eq(-1)=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "hi");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        boolean boolean6 = elements3.equals((java.lang.Object) 1.0d);
        java.lang.String str7 = elements3.text();
        org.jsoup.select.Elements elements9 = elements3.wrap("#root");
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor10 = elements3.listIterator();
        java.util.Spliterator<org.jsoup.nodes.Element> elementSpliterator11 = elements3.spliterator();
        org.jsoup.select.Elements elements13 = elements3.eq((int) (byte) 1);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elementItor10);
        org.junit.Assert.assertNotNull(elementSpliterator11);
        org.junit.Assert.assertNotNull(elements13);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.noTracking();
        int int4 = parseErrorList1.indexOf((java.lang.Object) parseErrorList3);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        java.lang.String str8 = document6.baseUri();
        org.jsoup.nodes.Element element11 = document6.attr("", true);
        org.jsoup.select.Elements elements13 = document6.getElementsContainingOwnText("[]");
        int int14 = parseErrorList1.indexOf((java.lang.Object) "[]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError16 = parseErrorList1.get(30000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 30000 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.jsoup.select.Evaluator.IsOnlyChild isOnlyChild0 = new org.jsoup.select.Evaluator.IsOnlyChild();
        org.jsoup.select.Evaluator.IsOnlyChild isOnlyChild1 = new org.jsoup.select.Evaluator.IsOnlyChild();
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str4 = document3.id();
        java.lang.String str5 = document3.baseUri();
        org.jsoup.nodes.Element element7 = document3.toggleClass("multipart");
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.className();
        java.lang.String str11 = document9.outerHtml();
        boolean boolean13 = document9.hasSameValue((java.lang.Object) 1);
        boolean boolean14 = isOnlyChild1.matches((org.jsoup.nodes.Element) document3, (org.jsoup.nodes.Element) document9);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.outline();
        int int17 = outputSettings15.indentAmount();
        org.jsoup.nodes.Document.OutputSettings.Syntax syntax18 = org.jsoup.nodes.Document.OutputSettings.Syntax.html;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings15.syntax(syntax18);
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        document3.charset(charset20);
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element25 = document23.val("hi!");
        int int26 = document23.childNodeSize();
        boolean boolean27 = isOnlyChild0.matches((org.jsoup.nodes.Element) document3, (org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Element element28 = document3.parent();
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + syntax18 + "' != '" + org.jsoup.nodes.Document.OutputSettings.Syntax.html + "'", syntax18.equals(org.jsoup.nodes.Document.OutputSettings.Syntax.html));
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(element28);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        boolean boolean6 = elements3.equals((java.lang.Object) 1.0d);
        java.lang.String str7 = elements3.text();
        org.jsoup.select.Elements elements9 = elements3.wrap("#root");
        org.jsoup.select.Elements elements11 = elements9.toggleClass("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str12 = elements11.outerHtml();
        org.jsoup.select.Elements elements15 = elements11.attr("org.jsoup.select.Selector$SelectorParseException: #doctype", ":last-of-type");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(elements15);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = request4.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = request4.cookies();
        org.jsoup.Connection.Request request9 = request4.header("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "#root");
        java.lang.String str10 = request9.requestBody();
        java.lang.String str11 = request9.postDataCharset();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = request9.multiHeaders();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTF-8" + "'", str11, "UTF-8");
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.jsoup.select.Evaluator.Attribute attribute2 = new org.jsoup.select.Evaluator.Attribute("Content-Encoding");
        org.jsoup.parser.Tag tag4 = new org.jsoup.parser.Tag("#document");
        boolean boolean5 = tag4.isFormListed();
        boolean boolean6 = tag4.isBlock();
        org.jsoup.nodes.Element element8 = new org.jsoup.nodes.Element(tag4, "ultipart");
        org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str11 = document10.id();
        java.lang.String str12 = document10.baseUri();
        org.jsoup.nodes.Element element15 = document10.attr("", true);
        org.jsoup.select.Elements elements17 = document10.getElementsContainingText("#text");
        boolean boolean18 = attribute2.matches(element8, (org.jsoup.nodes.Element) document10);
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType21 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str24 = document23.id();
        org.jsoup.select.Elements elements25 = document23.previousElementSiblings();
        org.jsoup.nodes.Element element26 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType21, (org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str29 = document28.className();
        java.lang.String str31 = document28.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.nodes.Element element33 = document28.text("");
        boolean boolean34 = attribute2.matches((org.jsoup.nodes.Element) document23, element33);
        org.jsoup.select.Elements elements35 = org.jsoup.select.Selector.select(":empty", (org.jsoup.nodes.Element) document23);
        org.jsoup.select.Elements elements37 = elements35.val(":nth-last-of-type(100n-1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNull(element26);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(element33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(elements37);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection.Request request19 = httpConnection0.request();
        org.jsoup.Connection.Request request21 = request19.removeCookie(":nth-last-of-type(100n-1)");
        java.util.Collection<org.jsoup.Connection.KeyVal> keyValCollection22 = request21.data();
        org.jsoup.Connection.Request request24 = request21.removeCookie(":matches(null)");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(keyValCollection22);
        org.junit.Assert.assertNotNull(request24);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response1 = httpConnection0.response();
        java.lang.String str2 = response1.statusMessage();
        java.lang.String str3 = response1.statusMessage();
        org.jsoup.Connection.Method method4 = response1.method();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = response1.multiHeaders();
        org.jsoup.Connection.Response response7 = response1.charset("Content-Type");
        org.jsoup.Connection.Response response9 = response1.charset("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<#root value=\"hi!\">\n <html>\n  <head></head>\n  <body>\n   hi!\n  </body>\n </html>\n</#root>");
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNotNull(response9);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response1 = httpConnection0.response();
        org.jsoup.Connection.Method method2 = org.jsoup.Connection.Method.OPTIONS;
        boolean boolean3 = method2.hasBody();
        org.jsoup.Connection.Response response4 = response1.method(method2);
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request6 = httpConnection5.request();
        org.jsoup.Connection.Request request9 = request6.addHeader("multipart/form-data", "hi!");
        boolean boolean11 = request9.hasHeader("multipart/form-data");
        boolean boolean13 = request9.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method14 = request9.method();
        org.jsoup.Connection.Method method15 = request9.method();
        org.jsoup.Connection.Response response16 = response1.method(method15);
        org.jsoup.Connection.Response response19 = response1.addHeader(":nth-of-type(10n+100)", "");
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertTrue("'" + method2 + "' != '" + org.jsoup.Connection.Method.OPTIONS + "'", method2.equals(org.jsoup.Connection.Method.OPTIONS));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + method14 + "' != '" + org.jsoup.Connection.Method.GET + "'", method14.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method15 + "' != '" + org.jsoup.Connection.Method.GET + "'", method15.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertNotNull(response19);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean3 = tokenQueue1.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        java.lang.String str5 = tokenQueue1.chompTo("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str6 = tokenQueue1.consumeTagName();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!", "", "multipart/form-data", "hi!" };
        boolean boolean16 = org.jsoup.internal.StringUtil.in("", strArray15);
        boolean boolean17 = org.jsoup.internal.StringUtil.in("", strArray15);
        org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray15);
        org.jsoup.select.Selector.SelectorParseException selectorParseException19 = new org.jsoup.select.Selector.SelectorParseException("#doctype", (java.lang.Object[]) strArray15);
        java.lang.String str20 = tokenQueue1.consumeToAny(strArray15);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data" + "'", str5, "multipart/form-data");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.outline();
        int int2 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings.Syntax syntax3 = org.jsoup.nodes.Document.OutputSettings.Syntax.html;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.syntax(syntax3);
        java.nio.charset.Charset charset5 = outputSettings4.charset();
        boolean boolean6 = outputSettings4.outline();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings4.prettyPrint(true);
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType11 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.id();
        org.jsoup.select.Elements elements15 = document13.previousElementSiblings();
        org.jsoup.nodes.Element element16 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType11, (org.jsoup.nodes.Element) document13);
        org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str19 = document18.className();
        java.lang.String str20 = document18.outerHtml();
        org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str23 = document22.id();
        java.lang.String str24 = document22.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan26 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean27 = document22.is((org.jsoup.select.Evaluator) indexLessThan26);
        boolean boolean28 = isNthLastOfType11.matches((org.jsoup.nodes.Element) document18, (org.jsoup.nodes.Element) document22);
        java.lang.String str29 = document22.cssSelector();
        java.nio.charset.Charset charset30 = document22.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings8.charset(charset30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings8.clone();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + syntax3 + "' != '" + org.jsoup.nodes.Document.OutputSettings.Syntax.html + "'", syntax3.equals(org.jsoup.nodes.Document.OutputSettings.Syntax.html));
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNull(element16);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str20, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "#root" + "'", str29, "#root");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(outputSettings32);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection.Request request19 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection20 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request21 = httpConnection20.request();
        org.jsoup.Connection.KeyVal keyVal23 = httpConnection20.data("Content-Encoding");
        org.jsoup.Connection connection25 = httpConnection20.timeout(0);
        org.jsoup.Connection.Method method26 = org.jsoup.Connection.Method.OPTIONS;
        org.jsoup.Connection connection27 = httpConnection20.method(method26);
        org.jsoup.Connection connection28 = httpConnection0.method(method26);
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNull(keyVal23);
        org.junit.Assert.assertNotNull(connection25);
        org.junit.Assert.assertTrue("'" + method26 + "' != '" + org.jsoup.Connection.Method.OPTIONS + "'", method26.equals(org.jsoup.Connection.Method.OPTIONS));
        org.junit.Assert.assertNotNull(connection27);
        org.junit.Assert.assertNotNull(connection28);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor5 = elements3.listIterator();
        org.jsoup.select.Elements elements7 = elements3.next("#text");
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList8.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList8.parallelStream();
        org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str13 = document12.id();
        org.jsoup.select.Elements elements14 = document12.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor15 = elements14.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor16 = elements14.listIterator();
        org.jsoup.select.Elements elements17 = elements14.empty();
        org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str20 = document19.id();
        org.jsoup.select.Elements elements21 = document19.previousElementSiblings();
        org.jsoup.select.Elements elements23 = elements21.prev("#text");
        boolean boolean24 = elements21.hasText();
        org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str27 = document26.id();
        org.jsoup.select.Elements elements28 = document26.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor29 = elements28.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor30 = elements28.listIterator();
        org.jsoup.select.Elements elements31 = elements28.empty();
        org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str34 = document33.id();
        org.jsoup.select.Elements elements35 = document33.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor36 = elements35.listIterator();
        boolean boolean38 = elements35.equals((java.lang.Object) 1.0d);
        java.lang.String str39 = elements35.text();
        org.jsoup.select.Elements elements41 = elements35.wrap("#root");
        org.jsoup.select.Elements[] elementsArray42 = new org.jsoup.select.Elements[] { elements14, elements21, elements28, elements41 };
        org.jsoup.select.Elements[] elementsArray43 = parseErrorList8.toArray(elementsArray42);
        int int44 = elements3.indexOf((java.lang.Object) parseErrorList8);
        org.jsoup.nodes.Element element46 = null;
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.List<org.jsoup.nodes.Node> nodeList49 = org.jsoup.parser.Parser.parseFragment("", element46, "", parseErrorList48);
        boolean boolean50 = parseErrorList48.isEmpty();
        int int51 = parseErrorList48.size();
        int int52 = parseErrorList8.lastIndexOf((java.lang.Object) parseErrorList48);
        java.lang.Object obj53 = null;
        int int54 = parseErrorList48.lastIndexOf(obj53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList48.listIterator((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertNotNull(elementItor5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(elementItor15);
        org.junit.Assert.assertNotNull(elementItor16);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(elementItor29);
        org.junit.Assert.assertNotNull(elementItor30);
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(elementItor36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(elements41);
        org.junit.Assert.assertNotNull(elementsArray42);
        org.junit.Assert.assertNotNull(elementsArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertNotNull(nodeList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class("Content-Encoding");
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str4 = document3.wholeText();
        org.jsoup.select.Elements elements5 = document3.parents();
        org.jsoup.nodes.Element element7 = document3.appendElement("#root=\"\"");
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.wholeText();
        org.jsoup.select.Elements elements11 = document9.parents();
        java.nio.charset.Charset charset12 = document9.charset();
        org.jsoup.select.Elements elements14 = document9.getElementsByIndexGreaterThan((int) '#');
        boolean boolean15 = class1.matches((org.jsoup.nodes.Element) document3, (org.jsoup.nodes.Element) document9);
        java.lang.String str16 = document3.text();
        org.jsoup.nodes.Element element18 = document3.appendElement("#data");
        org.jsoup.parser.Parser parser19 = document3.parser();
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNull(parser19);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot2 = new org.jsoup.select.Evaluator.AttributeWithValueNot(":eq(-1)", "#doctype");
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.id();
        java.lang.String str6 = document4.baseUri();
        org.jsoup.nodes.Element element9 = document4.attr("", true);
        org.jsoup.nodes.Node node12 = document4.attr("#text", "");
        org.jsoup.nodes.Element element13 = document4.shallowClone();
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.id();
        java.lang.String str17 = document15.baseUri();
        org.jsoup.nodes.Element element18 = document15.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = document15.dataset();
        org.jsoup.nodes.Element element21 = document15.html("#root=\"\"");
        boolean boolean22 = attributeWithValueNot2.matches(element13, (org.jsoup.nodes.Element) document15);
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType25 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str28 = document27.wholeText();
        org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str31 = document30.className();
        boolean boolean32 = isNthLastOfType25.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document30);
        org.jsoup.nodes.Document document33 = document27.clone();
        org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot36 = new org.jsoup.select.Evaluator.AttributeWithValueNot("#text", "#text");
        org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("", "#doctype");
        org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parse(" hi!=\"multipart/form-data\"", "Content-Encoding");
        boolean boolean43 = attributeWithValueNot36.matches((org.jsoup.nodes.Element) document39, (org.jsoup.nodes.Element) document42);
        boolean boolean44 = attributeWithValueNot2.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document39);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node46 = document27.before("[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(element9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Request request7 = request4.cookie("#text", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        boolean boolean10 = request4.hasHeaderWithValue("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "#document");
        org.jsoup.Connection.Request request13 = request4.cookie("#document", "#document");
        org.jsoup.helper.HttpConnection.KeyVal keyVal16 = org.jsoup.helper.HttpConnection.KeyVal.create("#root", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.Connection.Request request17 = request4.data((org.jsoup.Connection.KeyVal) keyVal16);
        java.lang.String str18 = keyVal16.key();
        java.io.InputStream inputStream19 = keyVal16.inputStream();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(keyVal16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#root" + "'", str18, "#root");
        org.junit.Assert.assertNull(inputStream19);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request2 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection3 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = null;
        org.jsoup.Connection connection5 = httpConnection3.sslSocketFactory(sSLSocketFactory4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        org.jsoup.Connection connection7 = httpConnection3.sslSocketFactory(sSLSocketFactory6);
        org.jsoup.Connection.Request request8 = httpConnection3.request();
        org.jsoup.helper.HttpConnection httpConnection9 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request10 = httpConnection9.request();
        org.jsoup.Connection.Request request13 = request10.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method14 = request10.method();
        org.jsoup.Connection connection15 = httpConnection3.method(method14);
        org.jsoup.Connection.Request request16 = connection15.request();
        org.jsoup.helper.HttpConnection httpConnection17 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request18 = httpConnection17.request();
        org.jsoup.Connection.Request request21 = request18.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method22 = request18.method();
        org.jsoup.Connection connection23 = connection15.method(method22);
        boolean boolean24 = method22.hasBody();
        org.jsoup.Connection.Request request25 = request2.method(method22);
        java.net.URL uRL26 = request25.url();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(connection5);
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertTrue("'" + method14 + "' != '" + org.jsoup.Connection.Method.GET + "'", method14.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertTrue("'" + method22 + "' != '" + org.jsoup.Connection.Method.GET + "'", method22.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNull(uRL26);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.jsoup.helper.HttpConnection.KeyVal keyVal2 = org.jsoup.helper.HttpConnection.KeyVal.create("#root", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.helper.HttpConnection.KeyVal keyVal4 = keyVal2.key("Content-Encoding");
        java.io.InputStream inputStream7 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal8 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream7);
        java.io.InputStream inputStream9 = keyVal8.inputStream();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = null;
        org.jsoup.Connection connection12 = httpConnection10.sslSocketFactory(sSLSocketFactory11);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = null;
        org.jsoup.Connection connection14 = httpConnection10.sslSocketFactory(sSLSocketFactory13);
        org.jsoup.Connection.Request request15 = httpConnection10.request();
        org.jsoup.helper.HttpConnection httpConnection16 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request17 = httpConnection16.request();
        org.jsoup.Connection.Request request20 = request17.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = request20.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = request20.cookies();
        org.jsoup.Connection connection23 = httpConnection10.headers(strMap22);
        java.io.InputStream inputStream26 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream29 = new org.jsoup.internal.ConstrainableInputStream(inputStream26, 1, (int) (byte) 0);
        org.jsoup.Connection connection30 = httpConnection10.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream29);
        org.jsoup.helper.HttpConnection.KeyVal keyVal31 = keyVal8.inputStream((java.io.InputStream) constrainableInputStream29);
        boolean boolean32 = keyVal8.hasInputStream();
        java.lang.String str33 = keyVal8.contentType();
        java.io.InputStream inputStream34 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream37 = new org.jsoup.internal.ConstrainableInputStream(inputStream34, 1, (int) (byte) 0);
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream40 = constrainableInputStream37.timeout((long) ' ', (long) (short) 1);
        constrainableInputStream37.close();
        org.jsoup.helper.HttpConnection.KeyVal keyVal42 = keyVal8.inputStream((java.io.InputStream) constrainableInputStream37);
        org.jsoup.helper.HttpConnection.KeyVal keyVal43 = keyVal2.inputStream((java.io.InputStream) constrainableInputStream37);
        org.junit.Assert.assertNotNull(keyVal2);
        org.junit.Assert.assertNotNull(keyVal4);
        org.junit.Assert.assertNotNull(keyVal8);
        org.junit.Assert.assertNull(inputStream9);
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(connection14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(connection23);
        org.junit.Assert.assertNotNull(connection30);
        org.junit.Assert.assertNotNull(keyVal31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(constrainableInputStream40);
        org.junit.Assert.assertNotNull(keyVal42);
        org.junit.Assert.assertNotNull(keyVal43);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        org.jsoup.Connection.Response response7 = response4.addHeader(":only-of-type", "[]");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(response7);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.jsoup.nodes.CDataNode cDataNode1 = new org.jsoup.nodes.CDataNode("multipart/form-data");
        org.jsoup.nodes.Node node2 = cDataNode1.nextSibling();
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.isBlock();
        boolean boolean4 = tag1.isSelfClosing();
        boolean boolean5 = tag1.isEmpty();
        boolean boolean6 = tag1.isFormListed();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        java.io.InputStream inputStream0 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream3 = new org.jsoup.internal.ConstrainableInputStream(inputStream0, 1, (int) (byte) 0);
        boolean boolean4 = constrainableInputStream3.markSupported();
        java.io.InputStream inputStream9 = null;
        org.jsoup.helper.HttpConnection httpConnection12 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request13 = httpConnection12.request();
        org.jsoup.Connection.Request request16 = request13.addHeader("multipart/form-data", "hi!");
        boolean boolean18 = request16.hasHeader("multipart/form-data");
        boolean boolean20 = request16.hasCookie("#text");
        org.jsoup.parser.Parser parser21 = request16.parser();
        org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse(inputStream9, "", "multipart/form-data", parser21);
        org.jsoup.helper.HttpConnection httpConnection23 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request24 = httpConnection23.request();
        org.jsoup.Connection connection26 = httpConnection23.referrer("multipart/form-data");
        org.jsoup.Connection.Response response27 = httpConnection23.response();
        org.jsoup.Connection connection29 = httpConnection23.ignoreContentType(false);
        java.io.InputStream inputStream32 = null;
        org.jsoup.parser.Parser parser35 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse(inputStream32, "", "#root", parser35);
        org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "#root", parser35);
        org.jsoup.Connection connection38 = connection29.parser(parser35);
        org.jsoup.parser.ParseSettings parseSettings39 = org.jsoup.parser.ParseSettings.preserveCase;
        java.lang.String str41 = parseSettings39.normalizeTag("#doctype");
        org.jsoup.parser.Parser parser42 = parser35.settings(parseSettings39);
        org.jsoup.parser.Parser parser43 = parser21.settings(parseSettings39);
        org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse(":last-of-type", "", parser21);
        org.jsoup.parser.ParseSettings parseSettings47 = new org.jsoup.parser.ParseSettings(false, true);
        java.lang.String str49 = parseSettings47.normalizeAttribute("multipart/form-data");
        org.jsoup.parser.Parser parser50 = parser21.settings(parseSettings47);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document51 = org.jsoup.helper.DataUtil.load((java.io.InputStream) constrainableInputStream3, "content-encoding=\"#root\"", "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n", parser50);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(parser21);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(connection26);
        org.junit.Assert.assertNotNull(response27);
        org.junit.Assert.assertNotNull(connection29);
        org.junit.Assert.assertNotNull(parser35);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(connection38);
        org.junit.Assert.assertNotNull(parseSettings39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "#doctype" + "'", str41, "#doctype");
        org.junit.Assert.assertNotNull(parser42);
        org.junit.Assert.assertNotNull(parser43);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "multipart/form-data" + "'", str49, "multipart/form-data");
        org.junit.Assert.assertNotNull(parser50);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.jsoup.nodes.Comment comment2 = new org.jsoup.nodes.Comment("", ":eq(-1)");
        java.lang.String str3 = comment2.getData();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.jsoup.nodes.DocumentType documentType5 = new org.jsoup.nodes.DocumentType("ultipart", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "/form-data", "[#declaration!=content-encoding]", "Content-Encoding");
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.jsoup.select.Evaluator.IsFirstChild isFirstChild0 = new org.jsoup.select.Evaluator.IsFirstChild();
        java.lang.String str1 = isFirstChild0.toString();
        java.lang.String str2 = isFirstChild0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + ":first-child" + "'", str1, ":first-child");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":first-child" + "'", str2, ":first-child");
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        org.jsoup.Connection connection6 = httpConnection0.ignoreContentType(false);
        org.jsoup.Connection.Request request7 = httpConnection0.request();
        org.jsoup.Connection connection10 = httpConnection0.cookie(":lt(52)", "multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection13 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        org.jsoup.Connection connection15 = httpConnection13.sslSocketFactory(sSLSocketFactory14);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = null;
        org.jsoup.Connection connection17 = httpConnection13.sslSocketFactory(sSLSocketFactory16);
        org.jsoup.Connection.Request request18 = httpConnection13.request();
        org.jsoup.helper.HttpConnection httpConnection19 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request20 = httpConnection19.request();
        org.jsoup.Connection.Request request23 = request20.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = request23.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = request23.cookies();
        org.jsoup.Connection connection26 = httpConnection13.headers(strMap25);
        java.io.InputStream inputStream29 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream32 = new org.jsoup.internal.ConstrainableInputStream(inputStream29, 1, (int) (byte) 0);
        org.jsoup.Connection connection33 = httpConnection13.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream32);
        org.jsoup.Connection connection34 = httpConnection0.data("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!", "<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", (java.io.InputStream) constrainableInputStream32);
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream37 = org.jsoup.internal.ConstrainableInputStream.wrap((java.io.InputStream) constrainableInputStream32, (int) (short) 0, (int) (short) 10);
        boolean boolean38 = constrainableInputStream37.markSupported();
        long long40 = constrainableInputStream37.skip((long) (byte) -1);
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(connection10);
        org.junit.Assert.assertNotNull(connection15);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(connection26);
        org.junit.Assert.assertNotNull(connection33);
        org.junit.Assert.assertNotNull(connection34);
        org.junit.Assert.assertNotNull(constrainableInputStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        boolean boolean8 = request4.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method9 = request4.method();
        org.jsoup.Connection.Method method10 = request4.method();
        org.jsoup.Connection.Request request13 = request4.addHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ":eq(-1)");
        org.jsoup.Connection.Request request16 = request13.addHeader("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", "                                   ");
        org.jsoup.Connection.Method method17 = request16.method();
        java.lang.String str18 = request16.requestBody();
        org.jsoup.Connection.Request request21 = request16.cookie("                                                                                                    ", "UTF-8");
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Request request23 = request16.url(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + method9 + "' != '" + org.jsoup.Connection.Method.GET + "'", method9.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method10 + "' != '" + org.jsoup.Connection.Method.GET + "'", method10.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertTrue("'" + method17 + "' != '" + org.jsoup.Connection.Method.GET + "'", method17.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(request21);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        boolean boolean6 = elements3.equals((java.lang.Object) 1.0d);
        java.lang.String str7 = elements3.text();
        org.jsoup.select.Elements elements9 = elements3.wrap("#root");
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor10 = elements3.listIterator();
        java.util.Spliterator<org.jsoup.nodes.Element> elementSpliterator11 = elements3.spliterator();
        java.util.List<java.lang.String> strList12 = elements3.eachText();
        org.jsoup.select.Elements elements13 = elements3.unwrap();
        org.jsoup.select.Elements elements14 = elements3.unwrap();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elementItor10);
        org.junit.Assert.assertNotNull(elementSpliterator11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements14);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes3 = attributes0.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes6 = attributes0.add("hi!", "multipart/form-data");
        org.jsoup.nodes.Attributes attributes9 = null;
        org.jsoup.nodes.Attribute attribute10 = new org.jsoup.nodes.Attribute("Content-Encoding", "#root", attributes9);
        java.lang.String str11 = attribute10.getValue();
        org.jsoup.nodes.Attributes attributes12 = attributes0.put(attribute10);
        org.jsoup.nodes.Attributes attributes15 = attributes12.put("ultipart", false);
        boolean boolean16 = attributes12.isEmpty();
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#root" + "'", str11, "#root");
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        java.lang.String str2 = tokenQueue1.toString();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str5 = tokenQueue1.consumeTo("multipart");
        boolean boolean6 = tokenQueue1.matchesStartTag();
        java.lang.String str7 = tokenQueue1.remainder();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "multipart/form-data" + "'", str2, "multipart/form-data");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data" + "'", str7, "multipart/form-data");
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("Content-Type", "ltipart/form-data");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request7 = httpConnection6.request();
        org.jsoup.Connection.Request request10 = request7.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method11 = request7.method();
        org.jsoup.Connection connection12 = httpConnection0.method(method11);
        org.jsoup.Connection connection15 = httpConnection0.data("#root", "Content-Encoding");
        org.jsoup.helper.HttpConnection httpConnection16 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = null;
        org.jsoup.Connection connection18 = httpConnection16.sslSocketFactory(sSLSocketFactory17);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = null;
        org.jsoup.Connection connection20 = httpConnection16.sslSocketFactory(sSLSocketFactory19);
        org.jsoup.Connection.Request request21 = httpConnection16.request();
        org.jsoup.helper.HttpConnection httpConnection22 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request23 = httpConnection22.request();
        org.jsoup.Connection.Request request26 = request23.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method27 = request23.method();
        org.jsoup.Connection connection28 = httpConnection16.method(method27);
        org.jsoup.helper.HttpConnection httpConnection29 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request30 = httpConnection29.request();
        org.jsoup.Connection.Request request33 = request30.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = request33.multiHeaders();
        org.jsoup.Connection.Request request36 = request33.ignoreHttpErrors(true);
        org.jsoup.Connection connection37 = httpConnection16.request(request36);
        org.jsoup.helper.HttpConnection httpConnection38 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = null;
        org.jsoup.Connection connection40 = httpConnection38.sslSocketFactory(sSLSocketFactory39);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = null;
        org.jsoup.Connection connection42 = httpConnection38.sslSocketFactory(sSLSocketFactory41);
        org.jsoup.Connection.Request request43 = httpConnection38.request();
        org.jsoup.helper.HttpConnection httpConnection44 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request45 = httpConnection44.request();
        org.jsoup.Connection.Request request48 = request45.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = request48.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = request48.cookies();
        org.jsoup.Connection connection51 = httpConnection38.headers(strMap50);
        org.jsoup.Connection connection54 = connection51.data("multipart/form-data", "");
        org.jsoup.helper.HttpConnection httpConnection55 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request56 = httpConnection55.request();
        org.jsoup.Connection.Request request59 = request56.addHeader("multipart/form-data", "hi!");
        boolean boolean61 = request59.hasHeader("multipart/form-data");
        boolean boolean63 = request59.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method64 = request59.method();
        boolean boolean65 = method64.hasBody();
        org.jsoup.Connection connection66 = connection51.method(method64);
        org.jsoup.Connection.Request request67 = request36.method(method64);
        org.jsoup.Connection connection68 = httpConnection0.method(method64);
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertTrue("'" + method11 + "' != '" + org.jsoup.Connection.Method.GET + "'", method11.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(connection15);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(connection20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertTrue("'" + method27 + "' != '" + org.jsoup.Connection.Method.GET + "'", method27.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(connection37);
        org.junit.Assert.assertNotNull(connection40);
        org.junit.Assert.assertNotNull(connection42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(connection51);
        org.junit.Assert.assertNotNull(connection54);
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(request59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + method64 + "' != '" + org.jsoup.Connection.Method.GET + "'", method64.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(connection66);
        org.junit.Assert.assertNotNull(request67);
        org.junit.Assert.assertNotNull(connection68);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        java.io.InputStream inputStream0 = null;
        org.jsoup.parser.Parser parser3 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse(inputStream0, "", "#root", parser3);
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "multipart/form-data");
        org.jsoup.select.Elements elements10 = document7.getElementsByAttributeValueMatching("#root=\"\"", "#cdata");
        org.jsoup.nodes.Attributes attributes11 = document7.attributes();
        org.jsoup.nodes.Element element12 = document4.prependChild((org.jsoup.nodes.Node) document7);
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertNotNull(element12);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.jsoup.parser.ParseErrorList parseErrorList0 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor1 = parseErrorList0.listIterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor2 = parseErrorList0.iterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList0.stream();
        parseErrorList0.clear();
        parseErrorList0.ensureCapacity((int) '\uffff');
        org.junit.Assert.assertNotNull(parseErrorList0);
        org.junit.Assert.assertNotNull(parseErrorItor1);
        org.junit.Assert.assertNotNull(parseErrorItor2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str3 = document2.className();
        java.lang.String str5 = document2.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.nodes.Element element7 = document2.text("");
        java.lang.String str8 = document2.cssSelector();
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.id();
        org.jsoup.select.Elements elements13 = document11.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor14 = elements13.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor15 = elements13.listIterator();
        org.jsoup.select.Elements elements17 = elements13.next("#text");
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList18.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList18.parallelStream();
        org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str23 = document22.id();
        org.jsoup.select.Elements elements24 = document22.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor25 = elements24.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor26 = elements24.listIterator();
        org.jsoup.select.Elements elements27 = elements24.empty();
        org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str30 = document29.id();
        org.jsoup.select.Elements elements31 = document29.previousElementSiblings();
        org.jsoup.select.Elements elements33 = elements31.prev("#text");
        boolean boolean34 = elements31.hasText();
        org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str37 = document36.id();
        org.jsoup.select.Elements elements38 = document36.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor39 = elements38.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor40 = elements38.listIterator();
        org.jsoup.select.Elements elements41 = elements38.empty();
        org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str44 = document43.id();
        org.jsoup.select.Elements elements45 = document43.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor46 = elements45.listIterator();
        boolean boolean48 = elements45.equals((java.lang.Object) 1.0d);
        java.lang.String str49 = elements45.text();
        org.jsoup.select.Elements elements51 = elements45.wrap("#root");
        org.jsoup.select.Elements[] elementsArray52 = new org.jsoup.select.Elements[] { elements24, elements31, elements38, elements51 };
        org.jsoup.select.Elements[] elementsArray53 = parseErrorList18.toArray(elementsArray52);
        int int54 = elements13.indexOf((java.lang.Object) parseErrorList18);
        java.util.List<org.jsoup.nodes.Node> nodeList55 = org.jsoup.parser.Parser.parseFragment("amultipart", (org.jsoup.nodes.Element) document2, ":first-of-type", parseErrorList18);
        org.jsoup.select.Elements elements56 = document2.parents();
        java.lang.String str57 = document2.location();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#root" + "'", str8, "#root");
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elementItor14);
        org.junit.Assert.assertNotNull(elementItor15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(elementItor25);
        org.junit.Assert.assertNotNull(elementItor26);
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(elementItor39);
        org.junit.Assert.assertNotNull(elementItor40);
        org.junit.Assert.assertNotNull(elements41);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(elements45);
        org.junit.Assert.assertNotNull(elementItor46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(elements51);
        org.junit.Assert.assertNotNull(elementsArray52);
        org.junit.Assert.assertNotNull(elementsArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertNotNull(elements56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.jsoup.select.NodeFilter nodeFilter0 = null;
        org.jsoup.nodes.DataNode dataNode2 = new org.jsoup.nodes.DataNode("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.nodes.Attributes attributes3 = dataNode2.attributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.NodeFilter.FilterResult filterResult4 = org.jsoup.select.NodeTraversor.filter(nodeFilter0, (org.jsoup.nodes.Node) dataNode2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.jsoup.select.NodeFilter.head(org.jsoup.nodes.Node, int)\" because \"filter\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attributes3);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.className();
        java.lang.String str3 = document1.outerHtml();
        boolean boolean5 = document1.hasSameValue((java.lang.Object) 1);
        java.lang.String str6 = document1.tagName();
        org.jsoup.nodes.Element element7 = document1.head();
        java.util.regex.Pattern pattern9 = null;
        org.jsoup.select.Elements elements10 = element7.getElementsByAttributeValueMatching("org.jsoup.HttpStatusException: multipart. Status=100, URL=application/x-www-form-urlencoded", pattern9);
        org.jsoup.nodes.Element element12 = element7.prepend("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<#root value=\"hi!\">\n <html>\n  <head></head>\n  <body>\n   hi!\n  </body>\n </html>\n</#root>");
        org.jsoup.nodes.Element element13 = element12.firstElementSibling();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str3, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#root" + "'", str6, "#root");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(element13);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        java.io.InputStream inputStream0 = null;
        org.jsoup.helper.HttpConnection httpConnection3 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request4 = httpConnection3.request();
        org.jsoup.Connection.Request request7 = request4.addHeader("multipart/form-data", "hi!");
        boolean boolean9 = request7.hasHeader("multipart/form-data");
        boolean boolean11 = request7.hasCookie("#text");
        org.jsoup.parser.Parser parser12 = request7.parser();
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse(inputStream0, "", "multipart/form-data", parser12);
        org.jsoup.helper.HttpConnection httpConnection14 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request15 = httpConnection14.request();
        org.jsoup.Connection connection17 = httpConnection14.referrer("multipart/form-data");
        org.jsoup.Connection.Response response18 = httpConnection14.response();
        org.jsoup.Connection connection20 = httpConnection14.ignoreContentType(false);
        java.io.InputStream inputStream23 = null;
        org.jsoup.parser.Parser parser26 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse(inputStream23, "", "#root", parser26);
        org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "#root", parser26);
        org.jsoup.Connection connection29 = connection20.parser(parser26);
        org.jsoup.parser.ParseSettings parseSettings30 = org.jsoup.parser.ParseSettings.preserveCase;
        java.lang.String str32 = parseSettings30.normalizeTag("#doctype");
        org.jsoup.parser.Parser parser33 = parser26.settings(parseSettings30);
        org.jsoup.parser.Parser parser34 = parser12.settings(parseSettings30);
        java.lang.String str36 = parseSettings30.normalizeAttribute("[]");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parser12);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNotNull(connection20);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(connection29);
        org.junit.Assert.assertNotNull(parseSettings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "#doctype" + "'", str32, "#doctype");
        org.junit.Assert.assertNotNull(parser33);
        org.junit.Assert.assertNotNull(parser34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attribute attribute3 = org.jsoup.nodes.Attribute.createFromEncoded("#root", "");
        org.jsoup.nodes.Attributes attributes4 = attributes0.put(attribute3);
        org.jsoup.nodes.Attributes attributes7 = attributes4.put("\n<!--<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>-->", "\n<!--<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>-->");
        org.junit.Assert.assertNotNull(attribute3);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertNotNull(attributes7);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.className();
        java.lang.String str3 = document1.outerHtml();
        boolean boolean5 = document1.hasSameValue((java.lang.Object) 1);
        java.util.Set<java.lang.String> strSet6 = document1.classNames();
        org.jsoup.select.Elements elements8 = document1.getElementsByAttributeStarting(":containsOwn(system)");
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor9 = elements8.listIterator();
        java.lang.String str11 = org.jsoup.internal.StringUtil.join((java.util.Iterator) elementItor9, "hi");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str3, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elementItor9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element3 = document1.val("hi!");
        org.jsoup.nodes.Element element4 = document1.clone();
        org.jsoup.select.Elements elements6 = element4.getElementsMatchingText("");
        org.jsoup.select.Elements elements8 = element4.getElementsContainingText("#text");
        org.jsoup.select.Elements elements10 = elements8.addClass("Content-Encoding");
        org.jsoup.select.Elements elements12 = elements10.before("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.select.Elements elements13 = elements12.nextAll();
        org.jsoup.select.Elements elements15 = elements13.after("multipart");
        org.jsoup.helper.W3CDom w3CDom17 = new org.jsoup.helper.W3CDom();
        org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str20 = document19.className();
        java.lang.String str22 = document19.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str23 = document19.normalName();
        org.w3c.dom.Document document24 = w3CDom17.fromJsoup(document19);
        boolean boolean26 = document19.is(":contains(content-encoding)");
        elements15.add((int) (byte) 0, (org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Element element28 = document19.clone();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "#root" + "'", str23, "#root");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNull("document24.getDocumentURI() == null", document24.getDocumentURI());
        org.junit.Assert.assertNull("document24.getInputEncoding() == null", document24.getInputEncoding());
        org.junit.Assert.assertNull("document24.getXmlEncoding() == null", document24.getXmlEncoding());
        org.junit.Assert.assertEquals(document24.getXmlVersion(), "1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(element28);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.jsoup.helper.HttpConnection httpConnection2 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request3 = httpConnection2.request();
        org.jsoup.Connection connection5 = httpConnection2.referrer("multipart/form-data");
        org.jsoup.Connection.Response response6 = httpConnection2.response();
        org.jsoup.Connection connection8 = httpConnection2.ignoreContentType(false);
        org.jsoup.Connection.Request request9 = httpConnection2.request();
        org.jsoup.Connection connection12 = httpConnection2.cookie(":lt(52)", "multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection15 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = null;
        org.jsoup.Connection connection17 = httpConnection15.sslSocketFactory(sSLSocketFactory16);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = null;
        org.jsoup.Connection connection19 = httpConnection15.sslSocketFactory(sSLSocketFactory18);
        org.jsoup.Connection.Request request20 = httpConnection15.request();
        org.jsoup.helper.HttpConnection httpConnection21 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request22 = httpConnection21.request();
        org.jsoup.Connection.Request request25 = request22.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = request25.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = request25.cookies();
        org.jsoup.Connection connection28 = httpConnection15.headers(strMap27);
        java.io.InputStream inputStream31 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream34 = new org.jsoup.internal.ConstrainableInputStream(inputStream31, 1, (int) (byte) 0);
        org.jsoup.Connection connection35 = httpConnection15.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream34);
        org.jsoup.Connection connection36 = httpConnection2.data("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!", "<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", (java.io.InputStream) constrainableInputStream34);
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream39 = org.jsoup.internal.ConstrainableInputStream.wrap((java.io.InputStream) constrainableInputStream34, (int) (short) 0, (int) (short) 10);
        org.jsoup.helper.HttpConnection.KeyVal keyVal40 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "application/x-www-form-urlencoded", (java.io.InputStream) constrainableInputStream34);
        org.jsoup.Connection.KeyVal keyVal42 = keyVal40.contentType("#doctype");
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(connection5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(connection28);
        org.junit.Assert.assertNotNull(connection35);
        org.junit.Assert.assertNotNull(connection36);
        org.junit.Assert.assertNotNull(constrainableInputStream39);
        org.junit.Assert.assertNotNull(keyVal40);
        org.junit.Assert.assertNotNull(keyVal42);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.jsoup.nodes.Attribute attribute2 = org.jsoup.nodes.Attribute.createFromEncoded(":contains(content-encoding)", ":first-of-type");
        org.junit.Assert.assertNotNull(attribute2);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request7 = httpConnection6.request();
        org.jsoup.Connection.Request request10 = request7.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method11 = request7.method();
        org.jsoup.Connection connection12 = httpConnection0.method(method11);
        org.jsoup.helper.HttpConnection httpConnection13 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request14 = httpConnection13.request();
        org.jsoup.Connection.Request request17 = request14.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = request17.multiHeaders();
        org.jsoup.Connection.Request request20 = request17.ignoreHttpErrors(true);
        org.jsoup.Connection connection21 = httpConnection0.request(request20);
        org.jsoup.helper.HttpConnection httpConnection22 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request23 = httpConnection22.request();
        org.jsoup.Connection connection25 = httpConnection22.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection26 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = null;
        org.jsoup.Connection connection28 = httpConnection26.sslSocketFactory(sSLSocketFactory27);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = null;
        org.jsoup.Connection connection30 = httpConnection26.sslSocketFactory(sSLSocketFactory29);
        org.jsoup.Connection.Request request31 = httpConnection26.request();
        org.jsoup.helper.HttpConnection httpConnection32 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request33 = httpConnection32.request();
        org.jsoup.Connection.Request request36 = request33.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = request36.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = request36.cookies();
        org.jsoup.Connection connection39 = httpConnection26.headers(strMap38);
        org.jsoup.Connection connection40 = httpConnection22.data(strMap38);
        org.jsoup.Connection connection42 = httpConnection22.referrer("#document");
        org.jsoup.helper.HttpConnection httpConnection43 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request44 = httpConnection43.request();
        org.jsoup.Connection.Request request47 = request44.addHeader("multipart/form-data", "hi!");
        boolean boolean49 = request47.hasHeader("multipart/form-data");
        boolean boolean51 = request47.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method52 = request47.method();
        org.jsoup.Connection.Method method53 = request47.method();
        org.jsoup.Connection.Request request56 = request47.addHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ":eq(-1)");
        org.jsoup.Connection connection57 = httpConnection22.request(request47);
        org.jsoup.Connection.Method method58 = org.jsoup.Connection.Method.PATCH;
        org.jsoup.Connection.Request request59 = request47.method(method58);
        org.jsoup.Connection.Request request60 = request20.method(method58);
        boolean boolean63 = request20.hasHeaderWithValue("SYSTEM", ":matches(null)");
        java.util.Map<java.lang.String, java.lang.String> strMap64 = request20.cookies();
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertTrue("'" + method11 + "' != '" + org.jsoup.Connection.Method.GET + "'", method11.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(connection21);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(connection25);
        org.junit.Assert.assertNotNull(connection28);
        org.junit.Assert.assertNotNull(connection30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(connection39);
        org.junit.Assert.assertNotNull(connection40);
        org.junit.Assert.assertNotNull(connection42);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + method52 + "' != '" + org.jsoup.Connection.Method.GET + "'", method52.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method53 + "' != '" + org.jsoup.Connection.Method.GET + "'", method53.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(connection57);
        org.junit.Assert.assertTrue("'" + method58 + "' != '" + org.jsoup.Connection.Method.PATCH + "'", method58.equals(org.jsoup.Connection.Method.PATCH));
        org.junit.Assert.assertNotNull(request59);
        org.junit.Assert.assertNotNull(request60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strMap64);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection connection6 = httpConnection0.header("#data", ":only-child");
        org.jsoup.Connection.Response response7 = connection6.response();
        org.jsoup.Connection.Response response9 = response7.charset("<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>");
        org.jsoup.Connection.Response response12 = response9.addHeader("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!", "hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!multipart/form-data");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = response9.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(response12);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str3 = document2.id();
        org.jsoup.select.Elements elements4 = document2.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor5 = elements4.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor6 = elements4.listIterator();
        org.jsoup.select.Elements elements8 = elements4.next("#text");
        org.jsoup.nodes.Element element10 = null;
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = org.jsoup.parser.Parser.parseFragment("", element10, "", parseErrorList12);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = elements4.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        org.jsoup.select.Elements elements17 = elements4.before("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements18 = org.jsoup.select.Selector.select("hi!hi!", (java.lang.Iterable<org.jsoup.nodes.Element>) elements4);
            org.junit.Assert.fail("Expected exception of type org.jsoup.select.Selector.SelectorParseException; message: Could not parse query 'hi!hi!': unexpected token at '!hi!'");
        } catch (org.jsoup.select.Selector.SelectorParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elementItor5);
        org.junit.Assert.assertNotNull(elementItor6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(elements17);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.wholeText();
        org.jsoup.select.Elements elements3 = document1.parents();
        org.jsoup.nodes.Element element5 = document1.appendElement("#root=\"\"");
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Appendable appendable7 = document1.html(appendable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.lang.Appendable.append(char)\" because \"accum\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(element5);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        java.io.InputStream inputStream2 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal3 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream2);
        java.io.InputStream inputStream4 = keyVal3.inputStream();
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        org.jsoup.Connection connection7 = httpConnection5.sslSocketFactory(sSLSocketFactory6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = null;
        org.jsoup.Connection connection9 = httpConnection5.sslSocketFactory(sSLSocketFactory8);
        org.jsoup.Connection.Request request10 = httpConnection5.request();
        org.jsoup.helper.HttpConnection httpConnection11 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request12 = httpConnection11.request();
        org.jsoup.Connection.Request request15 = request12.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = request15.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = request15.cookies();
        org.jsoup.Connection connection18 = httpConnection5.headers(strMap17);
        java.io.InputStream inputStream21 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream24 = new org.jsoup.internal.ConstrainableInputStream(inputStream21, 1, (int) (byte) 0);
        org.jsoup.Connection connection25 = httpConnection5.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream24);
        org.jsoup.helper.HttpConnection.KeyVal keyVal26 = keyVal3.inputStream((java.io.InputStream) constrainableInputStream24);
        boolean boolean27 = keyVal3.hasInputStream();
        java.lang.String str28 = keyVal3.key();
        org.junit.Assert.assertNotNull(keyVal3);
        org.junit.Assert.assertNull(inputStream4);
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(connection25);
        org.junit.Assert.assertNotNull(keyVal26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Content-Encoding" + "'", str28, "Content-Encoding");
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.jsoup.parser.ParseErrorList parseErrorList0 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor1 = parseErrorList0.listIterator();
        org.jsoup.nodes.TextNode textNode4 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        org.jsoup.nodes.Node node6 = textNode4.removeAttr("multipart/form-data");
        org.jsoup.nodes.Node node8 = textNode4.removeAttr("#document");
        int int9 = parseErrorList0.lastIndexOf((java.lang.Object) node8);
        java.lang.Object[] objArray10 = parseErrorList0.toArray();
        org.jsoup.helper.Validate.noNullElements(objArray10, "");
        org.junit.Assert.assertNotNull(parseErrorList0);
        org.junit.Assert.assertNotNull(parseErrorItor1);
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("#cdata");
        org.jsoup.select.Elements elements3 = document1.getElementsByIndexGreaterThan((int) (byte) 0);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(elements3);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.nodes.Document.QuirksMode quirksMode4 = document1.quirksMode();
        boolean boolean6 = document1.hasClass("multipart/form-data");
        org.jsoup.parser.Tag tag7 = document1.tag();
        boolean boolean8 = tag7.isEmpty();
        java.lang.String str9 = tag7.getName();
        boolean boolean10 = tag7.isBlock();
        boolean boolean11 = tag7.formatAsBlock();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertTrue("'" + quirksMode4 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode4.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#root" + "'", str9, "#root");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.jsoup.helper.HttpConnection.KeyVal keyVal2 = org.jsoup.helper.HttpConnection.KeyVal.create("#root", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        java.io.InputStream inputStream3 = null;
        org.jsoup.Connection.KeyVal keyVal4 = keyVal2.inputStream(inputStream3);
        org.jsoup.helper.HttpConnection.KeyVal keyVal6 = keyVal2.value("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.io.InputStream inputStream7 = keyVal2.inputStream();
        org.junit.Assert.assertNotNull(keyVal2);
        org.junit.Assert.assertNotNull(keyVal4);
        org.junit.Assert.assertNotNull(keyVal6);
        org.junit.Assert.assertNull(inputStream7);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.jsoup.select.Evaluator.TagEndsWith tagEndsWith1 = new org.jsoup.select.Evaluator.TagEndsWith("[#declaration!=content-encoding]");
        java.lang.String str2 = tagEndsWith1.toString();
        java.lang.String str3 = tagEndsWith1.toString();
        org.jsoup.select.Evaluator.AttributeWithValue attributeWithValue6 = new org.jsoup.select.Evaluator.AttributeWithValue("#root", "multipart/form-data");
        org.jsoup.select.Evaluator.IsEmpty isEmpty7 = new org.jsoup.select.Evaluator.IsEmpty();
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.id();
        java.lang.String str11 = document9.baseUri();
        org.jsoup.nodes.Element element14 = document9.attr("", true);
        org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot17 = new org.jsoup.select.Evaluator.AttributeWithValueNot(":eq(-1)", "#doctype");
        org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str20 = document19.id();
        org.jsoup.select.Elements elements21 = document19.previousElementSiblings();
        org.jsoup.nodes.Document.QuirksMode quirksMode22 = document19.quirksMode();
        boolean boolean24 = document19.hasClass("multipart/form-data");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType27 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str30 = document29.wholeText();
        org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str33 = document32.className();
        boolean boolean34 = isNthLastOfType27.matches((org.jsoup.nodes.Element) document29, (org.jsoup.nodes.Element) document32);
        boolean boolean35 = attributeWithValueNot17.matches((org.jsoup.nodes.Element) document19, (org.jsoup.nodes.Element) document29);
        org.jsoup.nodes.Element element37 = document19.createElement("[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
        boolean boolean38 = isEmpty7.matches(element14, (org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str41 = document40.className();
        org.jsoup.select.Elements elements44 = document40.getElementsByAttributeValueMatching("multipart/form-data", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.nodes.Element element46 = document40.text("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>");
        boolean boolean47 = attributeWithValue6.matches((org.jsoup.nodes.Element) document19, element46);
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType50 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str53 = document52.wholeText();
        org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str56 = document55.className();
        boolean boolean57 = isNthLastOfType50.matches((org.jsoup.nodes.Element) document52, (org.jsoup.nodes.Element) document55);
        org.jsoup.nodes.Document document58 = document52.clone();
        document58.setBaseUri("#root");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan62 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType65 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document67 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str68 = document67.id();
        org.jsoup.select.Elements elements69 = document67.previousElementSiblings();
        org.jsoup.nodes.Element element70 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType65, (org.jsoup.nodes.Element) document67);
        org.jsoup.nodes.Document document72 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str73 = document72.className();
        java.lang.String str74 = document72.outerHtml();
        org.jsoup.nodes.Document document76 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str77 = document76.id();
        java.lang.String str78 = document76.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan80 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean81 = document76.is((org.jsoup.select.Evaluator) indexLessThan80);
        boolean boolean82 = isNthLastOfType65.matches((org.jsoup.nodes.Element) document72, (org.jsoup.nodes.Element) document76);
        java.lang.String str83 = document76.cssSelector();
        org.jsoup.nodes.Document document85 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str86 = document85.className();
        java.lang.String str87 = document85.outerHtml();
        boolean boolean89 = document85.hasSameValue((java.lang.Object) 1);
        boolean boolean90 = indexLessThan62.matches((org.jsoup.nodes.Element) document76, (org.jsoup.nodes.Element) document85);
        org.jsoup.nodes.Element element91 = document58.prependChild((org.jsoup.nodes.Node) document85);
        org.jsoup.nodes.Document document92 = element91.ownerDocument();
        org.jsoup.nodes.Document document93 = document92.ownerDocument();
        org.jsoup.select.Elements elements95 = document92.getElementsByAttributeStarting("multipart");
        boolean boolean96 = tagEndsWith1.matches(element46, (org.jsoup.nodes.Element) document92);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[#declaration!=content-encoding]" + "'", str2, "[#declaration!=content-encoding]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[#declaration!=content-encoding]" + "'", str3, "[#declaration!=content-encoding]");
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertTrue("'" + quirksMode22 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode22.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(elements44);
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(elements69);
        org.junit.Assert.assertNull(element70);
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str74, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "#root" + "'", str83, "#root");
        org.junit.Assert.assertNotNull(document85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str87, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(element91);
        org.junit.Assert.assertNotNull(document92);
        org.junit.Assert.assertNotNull(document93);
        org.junit.Assert.assertNotNull(elements95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.isInline();
        org.jsoup.nodes.Attributes attributes4 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes7 = attributes4.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes10 = attributes4.add("hi!", "multipart/form-data");
        attributes10.normalize();
        org.jsoup.nodes.Element element12 = new org.jsoup.nodes.Element(tag1, "[public=<!#root!>]", attributes10);
        org.jsoup.nodes.Attributes attributes14 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes17 = attributes14.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes20 = attributes14.add("hi!", "multipart/form-data");
        org.jsoup.nodes.Element element21 = new org.jsoup.nodes.Element(tag1, "", attributes14);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertNotNull(attributes20);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes1 = attributes0.clone();
        org.jsoup.parser.ParseSettings parseSettings4 = new org.jsoup.parser.ParseSettings(false, true);
        boolean boolean5 = parseSettings4.preserveTagCase();
        int int6 = attributes0.deduplicate(parseSettings4);
        java.lang.String str8 = parseSettings4.normalizeAttribute("#root");
        org.junit.Assert.assertNotNull(attributes1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#root" + "'", str8, "#root");
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        java.lang.String[] strArray6 = new java.lang.String[] { "multipart/form-data", "Content-Encoding", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36" };
        java.lang.String str7 = tokenQueue1.consumeToAny(strArray6);
        tokenQueue1.addFirst(":containsOwn(system)");
        char char10 = tokenQueue1.peek();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + ':' + "'", char10 == ':');
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class("system");
        java.lang.String str2 = class1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + ".system" + "'", str2, ".system");
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection connection1 = org.jsoup.helper.HttpConnection.connect("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a valid URL");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType2 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.id();
        org.jsoup.select.Elements elements6 = document4.previousElementSiblings();
        org.jsoup.nodes.Element element7 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType2, (org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.className();
        java.lang.String str11 = document9.outerHtml();
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.id();
        java.lang.String str15 = document13.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan17 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean18 = document13.is((org.jsoup.select.Evaluator) indexLessThan17);
        boolean boolean19 = isNthLastOfType2.matches((org.jsoup.nodes.Element) document9, (org.jsoup.nodes.Element) document13);
        java.lang.String str20 = document13.cssSelector();
        org.jsoup.nodes.Element element21 = document13.clearAttributes();
        java.lang.String str22 = document13.tagName();
        java.lang.String str23 = document13.ownText();
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNull(element7);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#root" + "'", str20, "#root");
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#root" + "'", str22, "#root");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        boolean boolean6 = elements3.equals((java.lang.Object) 1.0d);
        java.lang.String str7 = elements3.text();
        org.jsoup.select.Elements elements9 = elements3.wrap("#root");
        org.jsoup.select.Elements elements11 = elements9.prevAll("#document");
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.id();
        org.jsoup.select.Elements elements15 = document13.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor16 = elements15.listIterator();
        boolean boolean18 = elements15.equals((java.lang.Object) 1.0d);
        org.jsoup.select.Elements elements20 = elements15.after("");
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor22 = elements15.listIterator(0);
        org.jsoup.select.Elements elements23 = elements15.remove();
        org.jsoup.select.Elements elements25 = elements23.append(":contains(content-encoding)");
        int int26 = elements11.lastIndexOf((java.lang.Object) ":contains(content-encoding)");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elementItor16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(elementItor22);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType4 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        org.jsoup.nodes.Element element9 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType4, (org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.className();
        java.lang.String str13 = document11.outerHtml();
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.id();
        java.lang.String str17 = document15.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan19 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean20 = document15.is((org.jsoup.select.Evaluator) indexLessThan19);
        boolean boolean21 = isNthLastOfType4.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document15);
        java.lang.String str22 = document15.cssSelector();
        org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str25 = document24.className();
        java.lang.String str26 = document24.outerHtml();
        boolean boolean28 = document24.hasSameValue((java.lang.Object) 1);
        boolean boolean29 = indexLessThan1.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document24);
        org.jsoup.nodes.Document.QuirksMode quirksMode30 = org.jsoup.nodes.Document.QuirksMode.quirks;
        org.jsoup.nodes.Document document31 = document24.quirksMode(quirksMode30);
        boolean boolean32 = document24.isBlock();
        org.jsoup.select.Elements elements33 = document24.siblingElements();
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNull(element9);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#root" + "'", str22, "#root");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str26, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + quirksMode30 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode30.equals(org.jsoup.nodes.Document.QuirksMode.quirks));
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(elements33);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body>\n  Content-Encoding=\"#root\"\n </body>\n</html>");
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages();
        boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2);
        org.jsoup.safety.Whitelist whitelist6 = whitelist2.removeEnforcedAttribute("Content-Encoding", "#root");
        java.lang.String str7 = org.jsoup.Jsoup.clean("", whitelist6);
        org.jsoup.parser.TokenQueue tokenQueue10 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        java.lang.String[] strArray15 = new java.lang.String[] { "multipart/form-data", "Content-Encoding", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36" };
        java.lang.String str16 = tokenQueue10.consumeToAny(strArray15);
        org.jsoup.safety.Whitelist whitelist17 = whitelist6.removeAttributes("multipart", strArray15);
        org.jsoup.helper.Validate.notNull((java.lang.Object) "multipart");
        org.junit.Assert.assertNotNull(whitelist2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(whitelist6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(whitelist17);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType2 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.id();
        org.jsoup.select.Elements elements6 = document4.previousElementSiblings();
        org.jsoup.nodes.Element element7 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType2, (org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.className();
        java.lang.String str11 = document9.outerHtml();
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.id();
        java.lang.String str15 = document13.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan17 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean18 = document13.is((org.jsoup.select.Evaluator) indexLessThan17);
        boolean boolean19 = isNthLastOfType2.matches((org.jsoup.nodes.Element) document9, (org.jsoup.nodes.Element) document13);
        java.lang.String str20 = document13.cssSelector();
        org.jsoup.nodes.Element element21 = document13.clearAttributes();
        org.jsoup.nodes.Node node22 = element21.root();
        org.jsoup.select.Elements elements25 = element21.getElementsByAttributeValueMatching("hi", "org.jsoup.HttpStatusException: Content-Encoding=\"#root\". Status=1, URL=:nth-last-of-type(100n-1)");
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNull(element7);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#root" + "'", str20, "#root");
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(elements25);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.jsoup.select.NodeVisitor nodeVisitor0 = null;
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType3 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.wholeText();
        org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str9 = document8.className();
        boolean boolean10 = isNthLastOfType3.matches((org.jsoup.nodes.Element) document5, (org.jsoup.nodes.Element) document8);
        org.jsoup.nodes.Document document11 = document5.clone();
        org.jsoup.select.Elements elements13 = document5.getElementsByIndexEquals((int) (short) 10);
        org.jsoup.select.Elements elements15 = elements13.before(":containsOwn(system)");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.NodeTraversor.traverse(nodeVisitor0, elements13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements15);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType3 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.className();
        java.lang.String str7 = document5.outerHtml();
        boolean boolean9 = document5.hasSameValue((java.lang.Object) 1);
        java.lang.String str10 = document5.tagName();
        org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element14 = document12.val("hi!");
        boolean boolean15 = isNthLastOfType3.matches((org.jsoup.nodes.Element) document5, element14);
        org.jsoup.select.Elements elements16 = element14.nextElementSiblings();
        org.jsoup.nodes.Element element17 = null;
        boolean boolean18 = allElements0.matches(element14, element17);
        org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element22 = document20.val("hi!");
        org.jsoup.nodes.Element element23 = document20.clone();
        org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan25 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) '#');
        org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parseBodyFragment("");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType30 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str33 = document32.className();
        java.lang.String str34 = document32.outerHtml();
        boolean boolean36 = document32.hasSameValue((java.lang.Object) 1);
        java.lang.String str37 = document32.tagName();
        org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element41 = document39.val("hi!");
        boolean boolean42 = isNthLastOfType30.matches((org.jsoup.nodes.Element) document32, element41);
        java.lang.String str43 = document32.title();
        org.jsoup.select.Elements elements45 = document32.getElementsMatchingText("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        boolean boolean46 = indexGreaterThan25.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document32);
        boolean boolean47 = allElements0.matches((org.jsoup.nodes.Element) document20, (org.jsoup.nodes.Element) document32);
        org.jsoup.nodes.Element element49 = document32.append("multipart/form-data");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str7, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#root" + "'", str10, "#root");
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str34, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "#root" + "'", str37, "#root");
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(element41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(elements45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(element49);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element3 = document1.val("hi!");
        org.jsoup.nodes.Element element4 = document1.clone();
        java.util.List<org.jsoup.nodes.DataNode> dataNodeList5 = document1.dataNodes();
        java.lang.String str6 = document1.nodeName();
        org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        org.jsoup.nodes.Node node11 = textNode9.removeAttr("multipart/form-data");
        org.jsoup.nodes.Node node13 = textNode9.removeAttr("#document");
        org.jsoup.nodes.Element element14 = document1.prependChild(node13);
        org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str17 = document16.id();
        org.jsoup.select.Elements elements18 = document16.previousElementSiblings();
        org.jsoup.nodes.Document.QuirksMode quirksMode19 = document16.quirksMode();
        org.jsoup.nodes.Document document20 = document1.quirksMode(quirksMode19);
        org.jsoup.nodes.Element element21 = document1.nextElementSibling();
        java.util.regex.Pattern pattern23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements24 = element21.getElementsByAttributeValueMatching("                                   ", pattern23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.getClass()\" because \"o\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(dataNodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#document" + "'", str6, "#document");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertTrue("'" + quirksMode19 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode19.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks));
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(element21);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.KeyVal keyVal3 = httpConnection0.data("Content-Encoding");
        java.net.Proxy proxy4 = null;
        org.jsoup.Connection connection5 = httpConnection0.proxy(proxy4);
        org.jsoup.Connection.Request request6 = httpConnection0.request();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNull(keyVal3);
        org.junit.Assert.assertNotNull(connection5);
        org.junit.Assert.assertNotNull(request6);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.jsoup.nodes.CDataNode cDataNode1 = new org.jsoup.nodes.CDataNode("<!DOCTYPE hi! :eq(-1) \"<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\" \"#root\">\n<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        boolean boolean3 = cDataNode1.hasAttr("hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        boolean boolean6 = elements3.equals((java.lang.Object) 1.0d);
        java.lang.String str7 = elements3.text();
        org.jsoup.nodes.Element element9 = null;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("", element9, "", parseErrorList11);
        boolean boolean13 = parseErrorList11.isEmpty();
        int int14 = parseErrorList11.size();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList15.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList15.parallelStream();
        org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str20 = document19.id();
        org.jsoup.select.Elements elements21 = document19.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor22 = elements21.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor23 = elements21.listIterator();
        org.jsoup.select.Elements elements24 = elements21.empty();
        org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str27 = document26.id();
        org.jsoup.select.Elements elements28 = document26.previousElementSiblings();
        org.jsoup.select.Elements elements30 = elements28.prev("#text");
        boolean boolean31 = elements28.hasText();
        org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str34 = document33.id();
        org.jsoup.select.Elements elements35 = document33.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor36 = elements35.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor37 = elements35.listIterator();
        org.jsoup.select.Elements elements38 = elements35.empty();
        org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str41 = document40.id();
        org.jsoup.select.Elements elements42 = document40.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor43 = elements42.listIterator();
        boolean boolean45 = elements42.equals((java.lang.Object) 1.0d);
        java.lang.String str46 = elements42.text();
        org.jsoup.select.Elements elements48 = elements42.wrap("#root");
        org.jsoup.select.Elements[] elementsArray49 = new org.jsoup.select.Elements[] { elements21, elements28, elements35, elements48 };
        org.jsoup.select.Elements[] elementsArray50 = parseErrorList15.toArray(elementsArray49);
        boolean boolean51 = parseErrorList11.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        boolean boolean52 = elements3.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        org.jsoup.select.Elements elements53 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements3);
        boolean boolean55 = elements3.hasAttr("system");
        org.jsoup.select.Elements elements57 = elements3.removeClass("#comment");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(elementItor22);
        org.junit.Assert.assertNotNull(elementItor23);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(elementItor36);
        org.junit.Assert.assertNotNull(elementItor37);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertNotNull(elementItor43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertNotNull(elementsArray49);
        org.junit.Assert.assertNotNull(elementsArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(elements57);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.noTracking();
        int int4 = parseErrorList1.indexOf((java.lang.Object) parseErrorList3);
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        org.jsoup.Connection connection7 = httpConnection5.sslSocketFactory(sSLSocketFactory6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = null;
        org.jsoup.Connection connection9 = httpConnection5.sslSocketFactory(sSLSocketFactory8);
        org.jsoup.Connection connection11 = httpConnection5.ignoreContentType(true);
        boolean boolean12 = parseErrorList1.equals((java.lang.Object) true);
        boolean boolean13 = parseErrorList1.isEmpty();
        parseErrorList1.clear();
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator15 = parseErrorList1.spliterator();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(connection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(parseErrorSpliterator15);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType4 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        org.jsoup.nodes.Element element9 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType4, (org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.className();
        java.lang.String str13 = document11.outerHtml();
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.id();
        java.lang.String str17 = document15.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan19 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean20 = document15.is((org.jsoup.select.Evaluator) indexLessThan19);
        boolean boolean21 = isNthLastOfType4.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document15);
        java.lang.String str22 = document15.cssSelector();
        org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str25 = document24.className();
        java.lang.String str26 = document24.outerHtml();
        boolean boolean28 = document24.hasSameValue((java.lang.Object) 1);
        boolean boolean29 = indexLessThan1.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document24);
        org.jsoup.nodes.Document.QuirksMode quirksMode30 = org.jsoup.nodes.Document.QuirksMode.quirks;
        org.jsoup.nodes.Document document31 = document24.quirksMode(quirksMode30);
        org.jsoup.select.Elements elements34 = document31.getElementsByAttributeValueMatching("multipart/form-data", "hi!");
        java.util.List<org.jsoup.nodes.TextNode> textNodeList35 = document31.textNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.outline();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings36.outline(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings36.clone();
        org.jsoup.nodes.Document document41 = document31.outputSettings(outputSettings40);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNull(element9);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#root" + "'", str22, "#root");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str26, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + quirksMode30 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode30.equals(org.jsoup.nodes.Document.QuirksMode.quirks));
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(textNodeList35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(document41);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        java.lang.StringBuilder stringBuilder0 = org.jsoup.internal.StringUtil.borrowBuilder();
        java.lang.String str1 = org.jsoup.internal.StringUtil.releaseBuilder(stringBuilder0);
        org.jsoup.internal.StringUtil.appendNormalisedWhitespace(stringBuilder0, ":gt(35)", true);
        org.junit.Assert.assertNotNull(stringBuilder0);
        org.junit.Assert.assertEquals(stringBuilder0.toString(), ":gt(35)");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("*", "<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element4 = document2.before(":contains(content-encoding)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("", "#root=\"\"");
        org.jsoup.nodes.Node node3 = document2.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node4 = node3.shallowClone();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        boolean boolean8 = request4.hasHeader("multipart/form-data");
        java.lang.String str9 = request4.requestBody();
        org.jsoup.Connection.Request request12 = request4.addHeader("[mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36*=#doctype]", ":matchesOwn(null)");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = request12.multiHeaders();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        java.io.InputStream inputStream4 = null;
        org.jsoup.helper.HttpConnection httpConnection7 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request8 = httpConnection7.request();
        org.jsoup.Connection.Request request11 = request8.addHeader("multipart/form-data", "hi!");
        boolean boolean13 = request11.hasHeader("multipart/form-data");
        boolean boolean15 = request11.hasCookie("#text");
        org.jsoup.parser.Parser parser16 = request11.parser();
        org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse(inputStream4, "", "multipart/form-data", parser16);
        org.jsoup.parser.ParseErrorList parseErrorList18 = parser16.getErrors();
        org.jsoup.Connection connection19 = connection3.parser(parser16);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser21 = parser16.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder20);
        org.jsoup.parser.Parser parser22 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = htmlTreeBuilder20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"this.stack\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parser16);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(connection19);
        org.junit.Assert.assertNotNull(parser21);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (short) 0);
        org.jsoup.parser.ParseErrorList parseErrorList3 = parser0.getErrors();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNotNull(parseErrorList3);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.jsoup.nodes.XmlDeclaration xmlDeclaration2 = new org.jsoup.nodes.XmlDeclaration("[system$=<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    </head>\n    <body>hi!</body>\n</html>]", false);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attribute attribute3 = org.jsoup.nodes.Attribute.createFromEncoded("#root", "");
        org.jsoup.nodes.Attributes attributes4 = attributes0.put(attribute3);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor9 = elements8.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor10 = elements8.listIterator();
        org.jsoup.select.Elements elements11 = elements8.empty();
        boolean boolean12 = attributes4.equals((java.lang.Object) elements8);
        org.jsoup.nodes.Attributes attributes15 = attributes4.add("#root=\"\"", " hi!=\"multipart/form-data\"");
        boolean boolean16 = attributes15.isEmpty();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = attributes15.dataset();
        java.lang.String str19 = attributes15.get(":eq(-1)");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor20 = attributes15.iterator();
        org.junit.Assert.assertNotNull(attribute3);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elementItor9);
        org.junit.Assert.assertNotNull(elementItor10);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(attributeItor20);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.helper.HttpConnection httpConnection2 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request3 = httpConnection2.request();
        org.jsoup.Connection connection5 = httpConnection2.referrer("multipart/form-data");
        java.io.InputStream inputStream6 = null;
        org.jsoup.helper.HttpConnection httpConnection9 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request10 = httpConnection9.request();
        org.jsoup.Connection.Request request13 = request10.addHeader("multipart/form-data", "hi!");
        boolean boolean15 = request13.hasHeader("multipart/form-data");
        boolean boolean17 = request13.hasCookie("#text");
        org.jsoup.parser.Parser parser18 = request13.parser();
        org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse(inputStream6, "", "multipart/form-data", parser18);
        org.jsoup.parser.ParseErrorList parseErrorList20 = parser18.getErrors();
        org.jsoup.Connection connection21 = connection5.parser(parser18);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser23 = parser18.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder22);
        org.jsoup.parser.Parser parser24 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder22);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(connection5);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parser18);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(connection21);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(parser24);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.className();
        java.lang.String str4 = document1.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str5 = document1.normalName();
        java.lang.String str6 = document1.html();
        org.jsoup.nodes.Element element8 = document1.addClass("[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]");
        org.jsoup.nodes.Document document9 = document1.normalise();
        java.io.InputStream inputStream10 = null;
        org.jsoup.helper.HttpConnection httpConnection13 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request14 = httpConnection13.request();
        org.jsoup.Connection.Request request17 = request14.addHeader("multipart/form-data", "hi!");
        boolean boolean19 = request17.hasHeader("multipart/form-data");
        boolean boolean21 = request17.hasCookie("#text");
        org.jsoup.parser.Parser parser22 = request17.parser();
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse(inputStream10, "", "multipart/form-data", parser22);
        org.jsoup.nodes.Document document24 = document9.parser(parser22);
        org.jsoup.select.Elements elements26 = document9.getElementsByIndexLessThan((int) '\000');
        elements26.trimToSize();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#root" + "'", str5, "#root");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str6, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(elements26);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.formatAsBlock();
        org.jsoup.nodes.Attributes attributes4 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes5 = attributes4.clone();
        attributes5.remove("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.nodes.PseudoTextElement pseudoTextElement8 = new org.jsoup.nodes.PseudoTextElement(tag1, "#root", attributes5);
        java.util.regex.Pattern pattern10 = null;
        org.jsoup.select.Elements elements11 = pseudoTextElement8.getElementsByAttributeValueMatching("hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!", pattern10);
        org.jsoup.nodes.Element element13 = pseudoTextElement8.removeClass(":contains(content-encoding)");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element13);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.isBlock();
        org.jsoup.nodes.Element element5 = new org.jsoup.nodes.Element(tag1, "ultipart");
        boolean boolean6 = tag1.isEmpty();
        java.lang.String str7 = tag1.normalName();
        org.jsoup.select.Evaluator.IsFirstOfType isFirstOfType9 = new org.jsoup.select.Evaluator.IsFirstOfType();
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element13 = document11.val("hi!");
        org.jsoup.nodes.Element element15 = element13.html("");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType18 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str21 = document20.wholeText();
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str24 = document23.className();
        boolean boolean25 = isNthLastOfType18.matches((org.jsoup.nodes.Element) document20, (org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Document document26 = document20.clone();
        document26.setBaseUri("#root");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan30 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType33 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str36 = document35.id();
        org.jsoup.select.Elements elements37 = document35.previousElementSiblings();
        org.jsoup.nodes.Element element38 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType33, (org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str41 = document40.className();
        java.lang.String str42 = document40.outerHtml();
        org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str45 = document44.id();
        java.lang.String str46 = document44.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan48 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean49 = document44.is((org.jsoup.select.Evaluator) indexLessThan48);
        boolean boolean50 = isNthLastOfType33.matches((org.jsoup.nodes.Element) document40, (org.jsoup.nodes.Element) document44);
        java.lang.String str51 = document44.cssSelector();
        org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str54 = document53.className();
        java.lang.String str55 = document53.outerHtml();
        boolean boolean57 = document53.hasSameValue((java.lang.Object) 1);
        boolean boolean58 = indexLessThan30.matches((org.jsoup.nodes.Element) document44, (org.jsoup.nodes.Element) document53);
        org.jsoup.nodes.Element element59 = document26.prependChild((org.jsoup.nodes.Node) document53);
        org.jsoup.nodes.Element element61 = element59.removeClass("#root");
        boolean boolean62 = isFirstOfType9.matches(element13, element59);
        org.jsoup.nodes.Attributes attributes63 = element59.attributes();
        org.jsoup.nodes.FormElement formElement64 = new org.jsoup.nodes.FormElement(tag1, "multipart", attributes63);
        java.util.List<org.jsoup.Connection.KeyVal> keyValList65 = formElement64.formData();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection connection66 = formElement64.submit();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Malformed URL: multipart");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#document" + "'", str7, "#document");
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(elements37);
        org.junit.Assert.assertNull(element38);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str42, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "#root" + "'", str51, "#root");
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str55, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(element59);
        org.junit.Assert.assertNotNull(element61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(attributes63);
        org.junit.Assert.assertNotNull(keyValList65);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = request4.multiHeaders();
        org.jsoup.Connection.Request request7 = request4.ignoreHttpErrors(true);
        java.net.URL uRL8 = request7.url();
        int int9 = request7.maxBodySize();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = request7.multiHeaders();
        boolean boolean12 = request7.hasHeader("[public=<!#root!>]");
        org.jsoup.parser.Parser parser13 = request7.parser();
        boolean boolean14 = request7.followRedirects();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNull(uRL8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1048576 + "'", int9 == 1048576);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parser13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean3 = tokenQueue1.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        java.lang.String str5 = tokenQueue1.chompTo("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        boolean boolean7 = tokenQueue1.matchChomp("hi!");
        org.jsoup.parser.CharacterReader characterReader9 = new org.jsoup.parser.CharacterReader("<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n");
        org.jsoup.parser.TokenQueue tokenQueue11 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean13 = tokenQueue11.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        char char14 = tokenQueue11.consume();
        char[] charArray15 = new char[] {};
        boolean boolean16 = tokenQueue11.matchesAny(charArray15);
        java.lang.String str17 = characterReader9.consumeToAny(charArray15);
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n");
        org.jsoup.parser.TokenQueue tokenQueue21 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean23 = tokenQueue21.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        char char24 = tokenQueue21.consume();
        char[] charArray25 = new char[] {};
        boolean boolean26 = tokenQueue21.matchesAny(charArray25);
        java.lang.String str27 = characterReader19.consumeToAny(charArray25);
        java.lang.String str28 = characterReader9.consumeToAny(charArray25);
        org.jsoup.parser.TokenQueue tokenQueue30 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        tokenQueue30.addFirst((java.lang.Character) 'a');
        boolean boolean33 = tokenQueue30.matchesWhitespace();
        org.jsoup.parser.TokenQueue tokenQueue35 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean37 = tokenQueue35.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        char char38 = tokenQueue35.consume();
        org.jsoup.parser.TokenQueue tokenQueue40 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean42 = tokenQueue40.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        char char43 = tokenQueue40.consume();
        char[] charArray44 = new char[] {};
        boolean boolean45 = tokenQueue40.matchesAny(charArray44);
        boolean boolean46 = tokenQueue35.matchesAny(charArray44);
        boolean boolean47 = tokenQueue30.matchesAny(charArray44);
        java.lang.String str48 = characterReader9.consumeToAny(charArray44);
        boolean boolean49 = tokenQueue1.matchesAny(charArray44);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data" + "'", str5, "multipart/form-data");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + 'm' + "'", char14 == 'm');
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n" + "'", str17, "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + char24 + "' != '" + 'm' + "'", char24 == 'm');
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n" + "'", str27, "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + char38 + "' != '" + 'm' + "'", char38 == 'm');
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + char43 + "' != '" + 'm' + "'", char43 == 'm');
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        java.io.InputStream inputStream7 = null;
        org.jsoup.Connection connection8 = httpConnection0.data("#document", "hi!", inputStream7);
        org.jsoup.Connection.Request request9 = httpConnection0.request();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = request9.sslSocketFactory();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(sSLSocketFactory10);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class("Content-Encoding");
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str4 = document3.wholeText();
        org.jsoup.select.Elements elements5 = document3.parents();
        org.jsoup.nodes.Element element7 = document3.appendElement("#root=\"\"");
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.wholeText();
        org.jsoup.select.Elements elements11 = document9.parents();
        java.nio.charset.Charset charset12 = document9.charset();
        org.jsoup.select.Elements elements14 = document9.getElementsByIndexGreaterThan((int) '#');
        boolean boolean15 = class1.matches((org.jsoup.nodes.Element) document3, (org.jsoup.nodes.Element) document9);
        java.lang.String str16 = document3.text();
        int int17 = document3.childNodeSize();
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
        org.jsoup.parser.TokenQueue tokenQueue3 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        tokenQueue3.addFirst((java.lang.Character) 'a');
        boolean boolean6 = tokenQueue3.matchesWhitespace();
        org.jsoup.parser.TokenQueue tokenQueue8 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean10 = tokenQueue8.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        char char11 = tokenQueue8.consume();
        org.jsoup.parser.TokenQueue tokenQueue13 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean15 = tokenQueue13.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        char char16 = tokenQueue13.consume();
        char[] charArray17 = new char[] {};
        boolean boolean18 = tokenQueue13.matchesAny(charArray17);
        boolean boolean19 = tokenQueue8.matchesAny(charArray17);
        boolean boolean20 = tokenQueue3.matchesAny(charArray17);
        java.lang.String str21 = characterReader1.consumeToAny(charArray17);
        int int22 = characterReader1.pos();
        java.lang.String str23 = characterReader1.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'm' + "'", char11 == 'm');
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'm' + "'", char16 == 'm');
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]" + "'", str21, "[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 82 + "'", int22 == 82);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.className();
        java.lang.String str3 = document1.location();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        org.jsoup.Connection.Response response6 = response4.removeCookie("SYSTEM");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = response6.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(response6);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        boolean boolean8 = request4.hasHeader("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection9 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request10 = httpConnection9.request();
        org.jsoup.Connection.Request request13 = request10.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method14 = request10.method();
        org.jsoup.Connection.Request request15 = request4.method(method14);
        org.jsoup.Connection.Request request18 = request15.addHeader(":first-child", ":contains(content-encoding)");
        java.io.InputStream inputStream19 = null;
        org.jsoup.parser.Parser parser22 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse(inputStream19, "", "#root", parser22);
        org.jsoup.Connection.Request request24 = request18.parser(parser22);
        org.jsoup.Connection.Method method25 = request24.method();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertTrue("'" + method14 + "' != '" + org.jsoup.Connection.Method.GET + "'", method14.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertTrue("'" + method25 + "' != '" + org.jsoup.Connection.Method.GET + "'", method25.equals(org.jsoup.Connection.Method.GET));
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType2 = new org.jsoup.select.Evaluator.IsNthLastOfType((int) ':', 100);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response1 = httpConnection0.response();
        org.jsoup.Connection.Method method2 = org.jsoup.Connection.Method.OPTIONS;
        boolean boolean3 = method2.hasBody();
        org.jsoup.Connection.Response response4 = response1.method(method2);
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request6 = httpConnection5.request();
        org.jsoup.Connection.Request request9 = request6.addHeader("multipart/form-data", "hi!");
        boolean boolean11 = request9.hasHeader("multipart/form-data");
        boolean boolean13 = request9.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method14 = request9.method();
        org.jsoup.Connection.Method method15 = request9.method();
        org.jsoup.Connection.Response response16 = response1.method(method15);
        org.jsoup.Connection.Response response18 = response1.charset("system");
        int int19 = response1.statusCode();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertTrue("'" + method2 + "' != '" + org.jsoup.Connection.Method.OPTIONS + "'", method2.equals(org.jsoup.Connection.Method.OPTIONS));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + method14 + "' != '" + org.jsoup.Connection.Method.GET + "'", method14.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method15 + "' != '" + org.jsoup.Connection.Method.GET + "'", method15.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        boolean boolean1 = org.jsoup.internal.StringUtil.isNumeric("#document");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.formatAsBlock();
        org.jsoup.nodes.Attributes attributes4 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes5 = attributes4.clone();
        attributes5.remove("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.nodes.PseudoTextElement pseudoTextElement8 = new org.jsoup.nodes.PseudoTextElement(tag1, "#root", attributes5);
        org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str11 = document10.className();
        java.lang.String str12 = document10.outerHtml();
        boolean boolean14 = document10.hasSameValue((java.lang.Object) 1);
        java.lang.String str15 = document10.tagName();
        org.jsoup.nodes.Element element16 = document10.head();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "multipart/form-data");
        org.jsoup.nodes.Element element20 = document10.prependChild((org.jsoup.nodes.Node) document19);
        boolean boolean21 = tag1.equals((java.lang.Object) document19);
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str24 = document23.className();
        java.lang.String str26 = document23.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str27 = document23.normalName();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType30 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str33 = document32.wholeText();
        org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str36 = document35.className();
        boolean boolean37 = isNthLastOfType30.matches((org.jsoup.nodes.Element) document32, (org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Document document38 = document32.clone();
        org.jsoup.nodes.Element element40 = document32.tagName("#root");
        java.lang.String str41 = element40.tagName();
        org.jsoup.nodes.Node node42 = element40.clone();
        org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str45 = document44.className();
        java.lang.String str46 = document44.outerHtml();
        boolean boolean48 = document44.hasSameValue((java.lang.Object) 1);
        java.lang.String str49 = document44.tagName();
        java.lang.String str50 = document44.baseUri();
        org.jsoup.nodes.Element[] elementArray51 = new org.jsoup.nodes.Element[] { document19, document23, element40, document44 };
        org.jsoup.select.Elements elements52 = new org.jsoup.select.Elements(elementArray51);
        org.jsoup.select.Elements elements53 = new org.jsoup.select.Elements(elementArray51);
        org.jsoup.select.Elements elements55 = elements53.next("#text");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str12, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#root" + "'", str15, "#root");
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "#root" + "'", str27, "#root");
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "#root" + "'", str41, "#root");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str46, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "#root" + "'", str49, "#root");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(elementArray51);
        org.junit.Assert.assertNotNull(elements55);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.jsoup.select.Elements elements1 = new org.jsoup.select.Elements(0);
        java.lang.String str2 = elements1.outerHtml();
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.noTracking();
        int int7 = parseErrorList4.indexOf((java.lang.Object) parseErrorList6);
        org.jsoup.helper.HttpConnection httpConnection8 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = null;
        org.jsoup.Connection connection10 = httpConnection8.sslSocketFactory(sSLSocketFactory9);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = null;
        org.jsoup.Connection connection12 = httpConnection8.sslSocketFactory(sSLSocketFactory11);
        org.jsoup.Connection connection14 = httpConnection8.ignoreContentType(true);
        boolean boolean15 = parseErrorList4.equals((java.lang.Object) true);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream16 = parseErrorList4.parallelStream();
        boolean boolean17 = elements1.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.select.Elements elements19 = elements1.removeAttr("#declaration");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(connection10);
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(connection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(elements19);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("");
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.wholeText();
        org.jsoup.nodes.Document document3 = document1.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element5 = document1.getElementById("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(document3);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("[]", "#text");
        org.jsoup.nodes.Document document3 = document2.ownerDocument();
        java.lang.String str4 = document2.wholeText();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection connection20 = httpConnection0.referrer("#document");
        org.jsoup.helper.HttpConnection httpConnection21 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request22 = httpConnection21.request();
        org.jsoup.Connection.Request request25 = request22.addHeader("multipart/form-data", "hi!");
        boolean boolean27 = request25.hasHeader("multipart/form-data");
        boolean boolean29 = request25.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method30 = request25.method();
        org.jsoup.Connection.Method method31 = request25.method();
        org.jsoup.Connection.Request request34 = request25.addHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ":eq(-1)");
        org.jsoup.Connection connection35 = httpConnection0.request(request25);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection connection37 = connection35.url(":nth-last-of-type(100n-1)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Malformed URL: :nth-last-of-type(100n-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(connection20);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + method30 + "' != '" + org.jsoup.Connection.Method.GET + "'", method30.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method31 + "' != '" + org.jsoup.Connection.Method.GET + "'", method31.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(connection35);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        boolean boolean6 = elements3.equals((java.lang.Object) 1.0d);
        java.lang.String str7 = elements3.text();
        org.jsoup.nodes.Element element9 = null;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("", element9, "", parseErrorList11);
        boolean boolean13 = parseErrorList11.isEmpty();
        int int14 = parseErrorList11.size();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList15.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList15.parallelStream();
        org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str20 = document19.id();
        org.jsoup.select.Elements elements21 = document19.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor22 = elements21.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor23 = elements21.listIterator();
        org.jsoup.select.Elements elements24 = elements21.empty();
        org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str27 = document26.id();
        org.jsoup.select.Elements elements28 = document26.previousElementSiblings();
        org.jsoup.select.Elements elements30 = elements28.prev("#text");
        boolean boolean31 = elements28.hasText();
        org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str34 = document33.id();
        org.jsoup.select.Elements elements35 = document33.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor36 = elements35.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor37 = elements35.listIterator();
        org.jsoup.select.Elements elements38 = elements35.empty();
        org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str41 = document40.id();
        org.jsoup.select.Elements elements42 = document40.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor43 = elements42.listIterator();
        boolean boolean45 = elements42.equals((java.lang.Object) 1.0d);
        java.lang.String str46 = elements42.text();
        org.jsoup.select.Elements elements48 = elements42.wrap("#root");
        org.jsoup.select.Elements[] elementsArray49 = new org.jsoup.select.Elements[] { elements21, elements28, elements35, elements48 };
        org.jsoup.select.Elements[] elementsArray50 = parseErrorList15.toArray(elementsArray49);
        boolean boolean51 = parseErrorList11.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        boolean boolean52 = elements3.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        org.jsoup.parser.ParseError[] parseErrorArray53 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList54 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54, parseErrorArray53);
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.noTracking();
        int int57 = parseErrorList54.indexOf((java.lang.Object) parseErrorList56);
        org.jsoup.helper.HttpConnection httpConnection58 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory59 = null;
        org.jsoup.Connection connection60 = httpConnection58.sslSocketFactory(sSLSocketFactory59);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = null;
        org.jsoup.Connection connection62 = httpConnection58.sslSocketFactory(sSLSocketFactory61);
        org.jsoup.Connection connection64 = httpConnection58.ignoreContentType(true);
        boolean boolean65 = parseErrorList54.equals((java.lang.Object) true);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream66 = parseErrorList54.parallelStream();
        boolean boolean67 = parseErrorList15.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.parser.ParseError> parseErrorList70 = parseErrorList54.subList((int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: fromIndex = -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(elementItor22);
        org.junit.Assert.assertNotNull(elementItor23);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(elementItor36);
        org.junit.Assert.assertNotNull(elementItor37);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertNotNull(elementItor43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertNotNull(elementsArray49);
        org.junit.Assert.assertNotNull(elementsArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(parseErrorArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(connection60);
        org.junit.Assert.assertNotNull(connection62);
        org.junit.Assert.assertNotNull(connection64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(parseErrorStream66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.select.Elements elements5 = elements3.prev("#text");
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.noTracking();
        int int10 = parseErrorList7.indexOf((java.lang.Object) parseErrorList9);
        boolean boolean11 = elements5.equals((java.lang.Object) parseErrorList9);
        org.jsoup.nodes.Element element13 = null;
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("", element13, "", parseErrorList15);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList15.listIterator();
        boolean boolean18 = parseErrorList9.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.noTracking();
        int int23 = parseErrorList20.indexOf((java.lang.Object) parseErrorList22);
        boolean boolean24 = parseErrorList9.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.lang.Object[] objArray25 = parseErrorList9.toArray();
        org.jsoup.parser.ParseError parseError26 = null;
        boolean boolean27 = parseErrorList9.add(parseError26);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request7 = httpConnection6.request();
        org.jsoup.Connection.Request request10 = request7.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method11 = request7.method();
        org.jsoup.Connection connection12 = httpConnection0.method(method11);
        org.jsoup.helper.HttpConnection httpConnection13 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request14 = httpConnection13.request();
        org.jsoup.Connection.Request request17 = request14.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = request17.multiHeaders();
        org.jsoup.Connection.Request request20 = request17.ignoreHttpErrors(true);
        org.jsoup.Connection connection21 = httpConnection0.request(request20);
        org.jsoup.helper.HttpConnection httpConnection22 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request23 = httpConnection22.request();
        org.jsoup.Connection connection25 = httpConnection22.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection26 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = null;
        org.jsoup.Connection connection28 = httpConnection26.sslSocketFactory(sSLSocketFactory27);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = null;
        org.jsoup.Connection connection30 = httpConnection26.sslSocketFactory(sSLSocketFactory29);
        org.jsoup.Connection.Request request31 = httpConnection26.request();
        org.jsoup.helper.HttpConnection httpConnection32 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request33 = httpConnection32.request();
        org.jsoup.Connection.Request request36 = request33.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = request36.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = request36.cookies();
        org.jsoup.Connection connection39 = httpConnection26.headers(strMap38);
        org.jsoup.Connection connection40 = httpConnection22.data(strMap38);
        org.jsoup.Connection connection42 = httpConnection22.referrer("#document");
        org.jsoup.helper.HttpConnection httpConnection43 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request44 = httpConnection43.request();
        org.jsoup.Connection.Request request47 = request44.addHeader("multipart/form-data", "hi!");
        boolean boolean49 = request47.hasHeader("multipart/form-data");
        boolean boolean51 = request47.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method52 = request47.method();
        org.jsoup.Connection.Method method53 = request47.method();
        org.jsoup.Connection.Request request56 = request47.addHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ":eq(-1)");
        org.jsoup.Connection connection57 = httpConnection22.request(request47);
        org.jsoup.Connection.Method method58 = org.jsoup.Connection.Method.PATCH;
        org.jsoup.Connection.Request request59 = request47.method(method58);
        org.jsoup.Connection.Request request60 = request20.method(method58);
        boolean boolean63 = request20.hasHeaderWithValue("SYSTEM", ":matches(null)");
        org.jsoup.Connection.Method method64 = request20.method();
        java.net.URL uRL65 = request20.url();
        java.net.Proxy proxy66 = null;
        org.jsoup.Connection.Request request67 = request20.proxy(proxy66);
        java.net.URL uRL68 = request67.url();
        int int69 = request67.maxBodySize();
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertTrue("'" + method11 + "' != '" + org.jsoup.Connection.Method.GET + "'", method11.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(connection21);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(connection25);
        org.junit.Assert.assertNotNull(connection28);
        org.junit.Assert.assertNotNull(connection30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(connection39);
        org.junit.Assert.assertNotNull(connection40);
        org.junit.Assert.assertNotNull(connection42);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + method52 + "' != '" + org.jsoup.Connection.Method.GET + "'", method52.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method53 + "' != '" + org.jsoup.Connection.Method.GET + "'", method53.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(connection57);
        org.junit.Assert.assertTrue("'" + method58 + "' != '" + org.jsoup.Connection.Method.PATCH + "'", method58.equals(org.jsoup.Connection.Method.PATCH));
        org.junit.Assert.assertNotNull(request59);
        org.junit.Assert.assertNotNull(request60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + method64 + "' != '" + org.jsoup.Connection.Method.PATCH + "'", method64.equals(org.jsoup.Connection.Method.PATCH));
        org.junit.Assert.assertNull(uRL65);
        org.junit.Assert.assertNotNull(request67);
        org.junit.Assert.assertNull(uRL68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1048576 + "'", int69 == 1048576);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.jsoup.select.NodeVisitor nodeVisitor0 = null;
        org.jsoup.select.NodeTraversor nodeTraversor1 = new org.jsoup.select.NodeTraversor(nodeVisitor0);
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.className();
        java.lang.String str7 = document4.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.nodes.Element element9 = document4.text("");
        java.lang.String str10 = document4.cssSelector();
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.id();
        org.jsoup.select.Elements elements15 = document13.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor16 = elements15.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor17 = elements15.listIterator();
        org.jsoup.select.Elements elements19 = elements15.next("#text");
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList20.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList20.parallelStream();
        org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str25 = document24.id();
        org.jsoup.select.Elements elements26 = document24.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor27 = elements26.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor28 = elements26.listIterator();
        org.jsoup.select.Elements elements29 = elements26.empty();
        org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str32 = document31.id();
        org.jsoup.select.Elements elements33 = document31.previousElementSiblings();
        org.jsoup.select.Elements elements35 = elements33.prev("#text");
        boolean boolean36 = elements33.hasText();
        org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str39 = document38.id();
        org.jsoup.select.Elements elements40 = document38.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor41 = elements40.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor42 = elements40.listIterator();
        org.jsoup.select.Elements elements43 = elements40.empty();
        org.jsoup.nodes.Document document45 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str46 = document45.id();
        org.jsoup.select.Elements elements47 = document45.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor48 = elements47.listIterator();
        boolean boolean50 = elements47.equals((java.lang.Object) 1.0d);
        java.lang.String str51 = elements47.text();
        org.jsoup.select.Elements elements53 = elements47.wrap("#root");
        org.jsoup.select.Elements[] elementsArray54 = new org.jsoup.select.Elements[] { elements26, elements33, elements40, elements53 };
        org.jsoup.select.Elements[] elementsArray55 = parseErrorList20.toArray(elementsArray54);
        int int56 = elements15.indexOf((java.lang.Object) parseErrorList20);
        java.util.List<org.jsoup.nodes.Node> nodeList57 = org.jsoup.parser.Parser.parseFragment("amultipart", (org.jsoup.nodes.Element) document4, ":first-of-type", parseErrorList20);
        // The following exception was thrown during execution in test generation
        try {
            nodeTraversor1.traverse((org.jsoup.nodes.Node) document4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.jsoup.select.NodeVisitor.head(org.jsoup.nodes.Node, int)\" because \"visitor\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(element9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#root" + "'", str10, "#root");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elementItor16);
        org.junit.Assert.assertNotNull(elementItor17);
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertNotNull(elementItor27);
        org.junit.Assert.assertNotNull(elementItor28);
        org.junit.Assert.assertNotNull(elements29);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(elements40);
        org.junit.Assert.assertNotNull(elementItor41);
        org.junit.Assert.assertNotNull(elementItor42);
        org.junit.Assert.assertNotNull(elements43);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(elements47);
        org.junit.Assert.assertNotNull(elementItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<html>\n <head></head>\n <body>\n  []\n </body>\n</html>" + "'", str51, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<html>\n <head></head>\n <body>\n  []\n </body>\n</html>");
        org.junit.Assert.assertNotNull(elements53);
        org.junit.Assert.assertNotNull(elementsArray54);
        org.junit.Assert.assertNotNull(elementsArray55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(nodeList57);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        java.lang.String str3 = document1.baseUri();
        org.jsoup.nodes.Element element6 = document1.attr("", true);
        org.jsoup.nodes.Node node9 = document1.attr("#text", "");
        org.jsoup.nodes.Node node10 = document1.clone();
        java.lang.String str11 = document1.outerHtml();
        int int12 = document1.childNodeSize();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request7 = httpConnection6.request();
        org.jsoup.Connection.Request request10 = request7.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method11 = request7.method();
        org.jsoup.Connection connection12 = httpConnection0.method(method11);
        org.jsoup.helper.HttpConnection httpConnection13 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request14 = httpConnection13.request();
        org.jsoup.Connection.Request request17 = request14.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = request17.multiHeaders();
        org.jsoup.Connection.Request request20 = request17.ignoreHttpErrors(true);
        org.jsoup.Connection connection21 = httpConnection0.request(request20);
        org.jsoup.helper.HttpConnection httpConnection22 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request23 = httpConnection22.request();
        org.jsoup.Connection connection25 = httpConnection22.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection26 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = null;
        org.jsoup.Connection connection28 = httpConnection26.sslSocketFactory(sSLSocketFactory27);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = null;
        org.jsoup.Connection connection30 = httpConnection26.sslSocketFactory(sSLSocketFactory29);
        org.jsoup.Connection.Request request31 = httpConnection26.request();
        org.jsoup.helper.HttpConnection httpConnection32 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request33 = httpConnection32.request();
        org.jsoup.Connection.Request request36 = request33.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = request36.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = request36.cookies();
        org.jsoup.Connection connection39 = httpConnection26.headers(strMap38);
        org.jsoup.Connection connection40 = httpConnection22.data(strMap38);
        org.jsoup.Connection connection42 = httpConnection22.referrer("#document");
        org.jsoup.helper.HttpConnection httpConnection43 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request44 = httpConnection43.request();
        org.jsoup.Connection.Request request47 = request44.addHeader("multipart/form-data", "hi!");
        boolean boolean49 = request47.hasHeader("multipart/form-data");
        boolean boolean51 = request47.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method52 = request47.method();
        org.jsoup.Connection.Method method53 = request47.method();
        org.jsoup.Connection.Request request56 = request47.addHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ":eq(-1)");
        org.jsoup.Connection connection57 = httpConnection22.request(request47);
        org.jsoup.Connection.Method method58 = org.jsoup.Connection.Method.PATCH;
        org.jsoup.Connection.Request request59 = request47.method(method58);
        org.jsoup.Connection.Request request60 = request20.method(method58);
        boolean boolean63 = request20.hasHeaderWithValue("SYSTEM", ":matches(null)");
        org.jsoup.Connection.Method method64 = request20.method();
        java.net.URL uRL65 = request20.url();
        java.net.Proxy proxy66 = null;
        org.jsoup.Connection.Request request67 = request20.proxy(proxy66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = request67.cookies();
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertTrue("'" + method11 + "' != '" + org.jsoup.Connection.Method.GET + "'", method11.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(connection21);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(connection25);
        org.junit.Assert.assertNotNull(connection28);
        org.junit.Assert.assertNotNull(connection30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(connection39);
        org.junit.Assert.assertNotNull(connection40);
        org.junit.Assert.assertNotNull(connection42);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + method52 + "' != '" + org.jsoup.Connection.Method.GET + "'", method52.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method53 + "' != '" + org.jsoup.Connection.Method.GET + "'", method53.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(connection57);
        org.junit.Assert.assertTrue("'" + method58 + "' != '" + org.jsoup.Connection.Method.PATCH + "'", method58.equals(org.jsoup.Connection.Method.PATCH));
        org.junit.Assert.assertNotNull(request59);
        org.junit.Assert.assertNotNull(request60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + method64 + "' != '" + org.jsoup.Connection.Method.PATCH + "'", method64.equals(org.jsoup.Connection.Method.PATCH));
        org.junit.Assert.assertNull(uRL65);
        org.junit.Assert.assertNotNull(request67);
        org.junit.Assert.assertNotNull(strMap68);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) 'u');
        org.junit.Assert.assertNotNull(parseErrorList1);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document3 = org.jsoup.helper.DataUtil.load(file0, "/form-data", "[=:first-child]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        org.jsoup.Connection.KeyVal[] keyValArray6 = new org.jsoup.Connection.KeyVal[] {};
        java.util.ArrayList<org.jsoup.Connection.KeyVal> keyValList7 = new java.util.ArrayList<org.jsoup.Connection.KeyVal>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList7, keyValArray6);
        org.jsoup.Connection connection9 = httpConnection0.data((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList7);
        java.io.InputStream inputStream12 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream15 = new org.jsoup.internal.ConstrainableInputStream(inputStream12, 1, (int) (byte) 0);
        constrainableInputStream15.close();
        org.jsoup.Connection connection17 = httpConnection0.data("hi!hi!", "#declaration", (java.io.InputStream) constrainableInputStream15);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = constrainableInputStream15.readAllBytes();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(keyValArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(connection17);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.jsoup.select.NodeVisitor nodeVisitor0 = null;
        org.jsoup.select.NodeTraversor nodeTraversor1 = new org.jsoup.select.NodeTraversor(nodeVisitor0);
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element5 = document3.val("hi!");
        org.jsoup.nodes.Element element6 = document3.clone();
        java.util.List<org.jsoup.nodes.DataNode> dataNodeList7 = document3.dataNodes();
        java.lang.String str8 = document3.nodeName();
        org.jsoup.nodes.TextNode textNode11 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        org.jsoup.nodes.Node node13 = textNode11.removeAttr("multipart/form-data");
        org.jsoup.nodes.Node node15 = textNode11.removeAttr("#document");
        org.jsoup.nodes.Element element16 = document3.prependChild(node15);
        org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str19 = document18.id();
        org.jsoup.select.Elements elements20 = document18.previousElementSiblings();
        org.jsoup.nodes.Document.QuirksMode quirksMode21 = document18.quirksMode();
        org.jsoup.nodes.Document document22 = document3.quirksMode(quirksMode21);
        // The following exception was thrown during execution in test generation
        try {
            nodeTraversor1.traverse((org.jsoup.nodes.Node) document3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.jsoup.select.NodeVisitor.head(org.jsoup.nodes.Node, int)\" because \"visitor\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertNotNull(element5);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(dataNodeList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#document" + "'", str8, "#document");
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertTrue("'" + quirksMode21 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode21.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks));
        org.junit.Assert.assertNotNull(document22);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        java.io.InputStream inputStream2 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal3 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream2);
        java.io.InputStream inputStream4 = keyVal3.inputStream();
        java.io.InputStream inputStream7 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal8 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream7);
        java.io.InputStream inputStream9 = keyVal8.inputStream();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = null;
        org.jsoup.Connection connection12 = httpConnection10.sslSocketFactory(sSLSocketFactory11);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = null;
        org.jsoup.Connection connection14 = httpConnection10.sslSocketFactory(sSLSocketFactory13);
        org.jsoup.Connection.Request request15 = httpConnection10.request();
        org.jsoup.helper.HttpConnection httpConnection16 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request17 = httpConnection16.request();
        org.jsoup.Connection.Request request20 = request17.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = request20.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = request20.cookies();
        org.jsoup.Connection connection23 = httpConnection10.headers(strMap22);
        java.io.InputStream inputStream26 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream29 = new org.jsoup.internal.ConstrainableInputStream(inputStream26, 1, (int) (byte) 0);
        org.jsoup.Connection connection30 = httpConnection10.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream29);
        org.jsoup.helper.HttpConnection.KeyVal keyVal31 = keyVal8.inputStream((java.io.InputStream) constrainableInputStream29);
        constrainableInputStream29.skipNBytes(0L);
        org.jsoup.helper.HttpConnection.KeyVal keyVal34 = keyVal3.inputStream((java.io.InputStream) constrainableInputStream29);
        java.lang.String str35 = keyVal34.value();
        org.jsoup.Connection.KeyVal keyVal37 = keyVal34.contentType("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str38 = keyVal34.contentType();
        org.junit.Assert.assertNotNull(keyVal3);
        org.junit.Assert.assertNull(inputStream4);
        org.junit.Assert.assertNotNull(keyVal8);
        org.junit.Assert.assertNull(inputStream9);
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(connection14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(connection23);
        org.junit.Assert.assertNotNull(connection30);
        org.junit.Assert.assertNotNull(keyVal31);
        org.junit.Assert.assertNotNull(keyVal34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "#declaration" + "'", str35, "#declaration");
        org.junit.Assert.assertNotNull(keyVal37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str38, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        java.io.InputStream inputStream0 = null;
        org.jsoup.parser.Parser parser3 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse(inputStream0, "", "#root", parser3);
        org.jsoup.parser.ParseErrorList parseErrorList5 = parser3.getErrors();
        org.jsoup.parser.ParseErrorList parseErrorList6 = parser3.getErrors();
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator7 = parseErrorList6.spliterator();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!", "", "multipart/form-data", "hi!" };
        boolean boolean16 = org.jsoup.internal.StringUtil.in("", strArray15);
        boolean boolean17 = org.jsoup.internal.StringUtil.in("org.jsoup.HttpStatusException: multipart. Status=100, URL=application/x-www-form-urlencoded", strArray15);
        java.lang.constant.ConstantDesc[] constantDescArray18 = parseErrorList6.toArray((java.lang.constant.ConstantDesc[]) strArray15);
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertNotNull(parseErrorSpliterator7);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(constantDescArray18);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str3 = document2.id();
        org.jsoup.select.Elements elements4 = document2.previousElementSiblings();
        org.jsoup.select.Elements elements6 = elements4.prev("#text");
        java.lang.Object[] objArray7 = elements6.toArray();
        org.jsoup.select.Selector.SelectorParseException selectorParseException8 = new org.jsoup.select.Selector.SelectorParseException("", objArray7);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.jsoup.select.Evaluator.Id id1 = new org.jsoup.select.Evaluator.Id(":first-child");
        java.io.InputStream inputStream4 = null;
        org.jsoup.helper.HttpConnection httpConnection7 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request8 = httpConnection7.request();
        org.jsoup.Connection.Request request11 = request8.addHeader("multipart/form-data", "hi!");
        boolean boolean13 = request11.hasHeader("multipart/form-data");
        boolean boolean15 = request11.hasCookie("#text");
        org.jsoup.parser.Parser parser16 = request11.parser();
        org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse(inputStream4, "", "multipart/form-data", parser16);
        boolean boolean18 = parser16.isTrackErrors();
        org.jsoup.parser.Parser parser20 = parser16.setTrackErrors(10);
        org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("PUBLIC", "Content-Type", parser20);
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str24 = document23.wholeText();
        org.jsoup.select.Elements elements25 = document23.parents();
        org.jsoup.nodes.Element element26 = document23.shallowClone();
        java.lang.Object obj27 = null;
        boolean boolean28 = document23.hasSameValue(obj27);
        org.jsoup.nodes.Element element30 = document23.appendText("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        org.jsoup.nodes.Element element31 = document23.root();
        org.jsoup.nodes.Element element33 = document23.createElement("application/x-www-form-urlencoded");
        boolean boolean34 = id1.matches((org.jsoup.nodes.Element) document21, element33);
        java.lang.String str35 = id1.toString();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType38 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str41 = document40.id();
        org.jsoup.select.Elements elements42 = document40.previousElementSiblings();
        org.jsoup.nodes.Element element43 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType38, (org.jsoup.nodes.Element) document40);
        org.jsoup.nodes.Document document45 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str46 = document45.className();
        java.lang.String str47 = document45.outerHtml();
        org.jsoup.nodes.Document document49 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str50 = document49.id();
        java.lang.String str51 = document49.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan53 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean54 = document49.is((org.jsoup.select.Evaluator) indexLessThan53);
        boolean boolean55 = isNthLastOfType38.matches((org.jsoup.nodes.Element) document45, (org.jsoup.nodes.Element) document49);
        java.lang.String str56 = document49.cssSelector();
        java.nio.charset.Charset charset57 = document49.charset();
        org.jsoup.nodes.Element element58 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = id1.matches((org.jsoup.nodes.Element) document49, element58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.jsoup.nodes.Element.id()\" because \"element\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parser16);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(element33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "#:first-child" + "'", str35, "#:first-child");
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertNull(element43);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str47, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "#root" + "'", str56, "#root");
        org.junit.Assert.assertNotNull(charset57);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.jsoup.select.Elements elements1 = new org.jsoup.select.Elements(0);
        java.lang.String str2 = elements1.outerHtml();
        org.jsoup.select.Elements elements4 = elements1.removeClass("");
        org.jsoup.select.Elements elements7 = elements4.attr(" ", "[#declaration!=content-encoding]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements7);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        boolean boolean1 = org.jsoup.parser.Tag.isKnownTag("<!DOCTYPE hi! :eq(-1) \"<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\" \"#root\">\n<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.jsoup.helper.HttpConnection.KeyVal keyVal2 = org.jsoup.helper.HttpConnection.KeyVal.create("SYSTEM", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str3 = keyVal2.value();
        org.jsoup.helper.HttpConnection.KeyVal keyVal5 = keyVal2.value("");
        java.io.InputStream inputStream6 = keyVal5.inputStream();
        org.jsoup.Connection.KeyVal keyVal8 = keyVal5.contentType("#declaration");
        org.jsoup.Connection.KeyVal keyVal10 = keyVal8.contentType("multipart/form-data");
        java.io.InputStream inputStream11 = keyVal8.inputStream();
        org.junit.Assert.assertNotNull(keyVal2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str3, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(keyVal5);
        org.junit.Assert.assertNull(inputStream6);
        org.junit.Assert.assertNotNull(keyVal8);
        org.junit.Assert.assertNotNull(keyVal10);
        org.junit.Assert.assertNull(inputStream11);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        org.jsoup.Connection connection6 = httpConnection0.ignoreContentType(false);
        org.jsoup.Connection.Request request7 = httpConnection0.request();
        org.jsoup.Connection connection9 = httpConnection0.maxBodySize((int) '\uffff');
        org.jsoup.Connection connection11 = httpConnection0.requestBody("#text");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(connection11);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.listIterator();
        java.lang.String str4 = parseErrorList1.toString();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList1.stream();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(parseErrorStream5);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.className();
        org.jsoup.select.Elements elements5 = document1.getElementsByAttributeValueMatching("multipart/form-data", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.select.Elements elements6 = elements5.prev();
        org.jsoup.select.Elements elements8 = elements5.next(":last-of-type");
        org.jsoup.select.Elements elements10 = elements8.after(":eq(-1)=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        java.lang.String str3 = document1.baseUri();
        org.jsoup.nodes.Element element6 = document1.attr("", true);
        org.jsoup.select.Elements elements8 = document1.getElementsContainingOwnText("[]");
        org.jsoup.nodes.Element element10 = document1.tagName("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        java.lang.String str11 = document1.html();
        org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot14 = new org.jsoup.select.Evaluator.AttributeWithValueNot(":eq(-1)", "#doctype");
        java.lang.String str15 = attributeWithValueNot14.toString();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType18 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str21 = document20.wholeText();
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str24 = document23.className();
        boolean boolean25 = isNthLastOfType18.matches((org.jsoup.nodes.Element) document20, (org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str28 = document27.id();
        int int29 = document27.elementSiblingIndex();
        boolean boolean30 = attributeWithValueNot14.matches((org.jsoup.nodes.Element) document20, (org.jsoup.nodes.Element) document27);
        // The following exception was thrown during execution in test generation
        try {
            document1.replaceWith((org.jsoup.nodes.Node) document27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[:eq(-1)!=#doctype]" + "'", str15, "[:eq(-1)!=#doctype]");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.jsoup.select.NodeFilter nodeFilter0 = null;
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan2 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType5 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str8 = document7.id();
        org.jsoup.select.Elements elements9 = document7.previousElementSiblings();
        org.jsoup.nodes.Element element10 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType5, (org.jsoup.nodes.Element) document7);
        org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str13 = document12.className();
        java.lang.String str14 = document12.outerHtml();
        org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str17 = document16.id();
        java.lang.String str18 = document16.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan20 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean21 = document16.is((org.jsoup.select.Evaluator) indexLessThan20);
        boolean boolean22 = isNthLastOfType5.matches((org.jsoup.nodes.Element) document12, (org.jsoup.nodes.Element) document16);
        java.lang.String str23 = document16.cssSelector();
        org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str26 = document25.className();
        java.lang.String str27 = document25.outerHtml();
        boolean boolean29 = document25.hasSameValue((java.lang.Object) 1);
        boolean boolean30 = indexLessThan2.matches((org.jsoup.nodes.Element) document16, (org.jsoup.nodes.Element) document25);
        org.jsoup.nodes.Document.QuirksMode quirksMode31 = org.jsoup.nodes.Document.QuirksMode.quirks;
        org.jsoup.nodes.Document document32 = document25.quirksMode(quirksMode31);
        org.jsoup.select.Elements elements34 = document25.getElementsMatchingOwnText("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str37 = document36.id();
        org.jsoup.select.Elements elements38 = document36.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor39 = elements38.listIterator();
        boolean boolean41 = elements38.equals((java.lang.Object) 1.0d);
        java.lang.String str42 = elements38.text();
        org.jsoup.select.Elements elements44 = elements38.wrap("#root");
        org.jsoup.select.Elements elements46 = elements44.toggleClass("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.select.Elements elements48 = elements44.html("#text");
        boolean boolean49 = elements34.contains((java.lang.Object) elements44);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.NodeTraversor.filter(nodeFilter0, elements44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNull(element10);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str14, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "#root" + "'", str23, "#root");
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str27, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + quirksMode31 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode31.equals(org.jsoup.nodes.Document.QuirksMode.quirks));
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(elementItor39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(elements44);
        org.junit.Assert.assertNotNull(elements46);
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.preserveWhitespace();
        boolean boolean4 = tag1.isData();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Request request7 = request4.cookie("#text", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        boolean boolean10 = request4.hasHeaderWithValue("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "#document");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = request4.headers();
        java.lang.String str13 = request4.header("hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
        org.jsoup.Connection.Request request15 = request4.followRedirects(false);
        java.lang.String str17 = request15.cookie(":containsData( )");
        java.lang.String str19 = request15.cookie("application/x-www-form-urlencoded");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot2 = new org.jsoup.select.Evaluator.AttributeWithValueNot(":eq(-1)", "#doctype");
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.id();
        org.jsoup.select.Elements elements6 = document4.previousElementSiblings();
        org.jsoup.nodes.Document.QuirksMode quirksMode7 = document4.quirksMode();
        boolean boolean9 = document4.hasClass("multipart/form-data");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType12 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str15 = document14.wholeText();
        org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str18 = document17.className();
        boolean boolean19 = isNthLastOfType12.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document17);
        boolean boolean20 = attributeWithValueNot2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document14);
        org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str23 = document22.id();
        org.jsoup.select.Elements elements24 = document22.previousElementSiblings();
        org.jsoup.nodes.Element element25 = document22.body();
        org.jsoup.nodes.Node node28 = element25.attr(":only-child", "[mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36*=#doctype]");
        org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str31 = document30.wholeText();
        org.jsoup.nodes.Document document32 = document30.clone();
        boolean boolean33 = attributeWithValueNot2.matches(element25, (org.jsoup.nodes.Element) document32);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertTrue("'" + quirksMode7 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode7.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.outline();
        int int2 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings.Syntax syntax3 = org.jsoup.nodes.Document.OutputSettings.Syntax.html;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.syntax(syntax3);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings4.clone();
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + syntax3 + "' != '" + org.jsoup.nodes.Document.OutputSettings.Syntax.html + "'", syntax3.equals(org.jsoup.nodes.Document.OutputSettings.Syntax.html));
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.jsoup.helper.Validate.isTrue(true, ":eq(1)");
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection connection1 = org.jsoup.Jsoup.connect("ltipart/form-data");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Malformed URL: ltipart/form-data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element3 = document1.val("hi!");
        org.jsoup.nodes.Element element5 = element3.html("");
        java.lang.String str6 = element3.tagName();
        org.jsoup.nodes.Element element8 = element3.html(":nth-last-of-type(100n-1)");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(element5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#root" + "'", str6, "#root");
        org.junit.Assert.assertNotNull(element8);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        boolean boolean6 = elements3.equals((java.lang.Object) 1.0d);
        java.lang.String str7 = elements3.text();
        org.jsoup.select.Elements elements9 = elements3.wrap("#root");
        org.jsoup.select.Elements elements11 = elements9.toggleClass("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.select.Elements elements13 = elements9.html("#text");
        org.jsoup.nodes.Element element14 = elements9.last();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNull(element14);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n");
        java.lang.String str2 = characterReader1.toString();
        int int3 = characterReader1.pos();
        boolean boolean4 = characterReader1.isEmpty();
        boolean boolean5 = characterReader1.isEmpty();
        java.lang.String str7 = characterReader1.consumeTo('#');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n" + "'", str2, "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n" + "'", str7, "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n");
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        boolean boolean8 = request4.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method9 = request4.method();
        org.jsoup.Connection.Method method10 = request4.method();
        org.jsoup.Connection.Request request13 = request4.addHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ":eq(-1)");
        org.jsoup.Connection.Request request16 = request13.addHeader("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", "                                   ");
        org.jsoup.Connection.Method method17 = request16.method();
        java.lang.String str18 = request16.requestBody();
        boolean boolean19 = request16.followRedirects();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + method9 + "' != '" + org.jsoup.Connection.Method.GET + "'", method9.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method10 + "' != '" + org.jsoup.Connection.Method.GET + "'", method10.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertTrue("'" + method17 + "' != '" + org.jsoup.Connection.Method.GET + "'", method17.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.jsoup.nodes.Document document3 = org.jsoup.parser.Parser.parse("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "multipart/form-data");
        org.jsoup.select.Elements elements6 = document3.getElementsByAttributeValueMatching("#root=\"\"", "#cdata");
        org.jsoup.select.Elements elements7 = org.jsoup.select.Selector.select(":first-child", (java.lang.Iterable<org.jsoup.nodes.Element>) elements6);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements7);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        java.io.InputStream inputStream0 = null;
        org.jsoup.helper.HttpConnection httpConnection3 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request4 = httpConnection3.request();
        org.jsoup.Connection.Request request7 = request4.addHeader("multipart/form-data", "hi!");
        boolean boolean9 = request7.hasHeader("multipart/form-data");
        boolean boolean11 = request7.hasCookie("#text");
        org.jsoup.parser.Parser parser12 = request7.parser();
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse(inputStream0, "", "multipart/form-data", parser12);
        org.jsoup.nodes.Element element14 = document13.nextElementSibling();
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parser12);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(element14);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request7 = httpConnection6.request();
        org.jsoup.Connection.Request request10 = request7.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = request10.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = request10.cookies();
        org.jsoup.Connection connection13 = httpConnection0.headers(strMap12);
        org.jsoup.Connection connection16 = connection13.data("multipart/form-data", "");
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = null;
        org.jsoup.Connection connection18 = connection16.sslSocketFactory(sSLSocketFactory17);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList20.listIterator();
        org.jsoup.helper.HttpConnection httpConnection23 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request24 = httpConnection23.request();
        org.jsoup.Connection.Request request27 = request24.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method28 = request24.method();
        int int29 = parseErrorList20.indexOf((java.lang.Object) request24);
        java.net.URL uRL30 = request24.url();
        org.jsoup.Connection.Request request33 = request24.header("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<#root value=\"hi!\">\n <html>\n  <head></head>\n  <body>\n   hi!\n  </body>\n </html>\n</#root>", "multipart/form-data");
        org.jsoup.Connection.Request request35 = request33.removeCookie("<#root=\"\"></#root=\"\">");
        boolean boolean37 = request35.hasCookie("hi!");
        org.jsoup.Connection connection38 = connection16.request(request35);
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(connection13);
        org.junit.Assert.assertNotNull(connection16);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertTrue("'" + method28 + "' != '" + org.jsoup.Connection.Method.GET + "'", method28.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(uRL30);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(connection38);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element3 = document1.val("hi!");
        org.jsoup.nodes.Element element4 = document1.clone();
        org.jsoup.select.Elements elements6 = element4.getElementsMatchingText("");
        org.jsoup.select.Elements elements8 = element4.getElementsContainingText("#text");
        org.jsoup.select.Elements elements10 = elements8.addClass("Content-Encoding");
        org.jsoup.select.Elements elements12 = elements10.before("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.select.Elements elements14 = elements12.toggleClass("");
        org.jsoup.select.Elements elements15 = elements12.next();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(elements15);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.noTracking();
        int int4 = parseErrorList1.indexOf((java.lang.Object) parseErrorList3);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList1.iterator();
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request7 = httpConnection6.request();
        org.jsoup.Connection connection9 = httpConnection6.referrer("multipart/form-data");
        org.jsoup.Connection.Response response10 = httpConnection6.response();
        org.jsoup.Connection connection12 = httpConnection6.ignoreContentType(false);
        org.jsoup.Connection connection15 = httpConnection6.header("[]", "/form-data");
        boolean boolean16 = parseErrorList1.equals((java.lang.Object) httpConnection6);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(connection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType2 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.className();
        java.lang.String str6 = document4.outerHtml();
        boolean boolean8 = document4.hasSameValue((java.lang.Object) 1);
        java.lang.String str9 = document4.tagName();
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element13 = document11.val("hi!");
        boolean boolean14 = isNthLastOfType2.matches((org.jsoup.nodes.Element) document4, element13);
        java.lang.String str15 = document4.title();
        org.jsoup.select.Elements elements17 = document4.getElementsMatchingText("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str18 = document4.baseUri();
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str6, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#root" + "'", str9, "#root");
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        boolean boolean8 = request4.hasHeader("multipart/form-data");
        java.lang.String str9 = request4.requestBody();
        org.jsoup.parser.Parser parser10 = request4.parser();
        java.lang.String str12 = request4.cookie("org.jsoup.HttpStatusException: Content-Type. Status=-1, URL=#declaration");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.jsoup.nodes.DataNode dataNode2 = org.jsoup.nodes.DataNode.createFromEncoded("#text", "");
        java.lang.String str3 = dataNode2.getWholeData();
        org.jsoup.nodes.DataNode dataNode5 = dataNode2.setWholeData("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.nodes.DataNode dataNode7 = dataNode5.setWholeData("org.jsoup.HttpStatusException: multipart. Status=100, URL=application/x-www-form-urlencoded");
        boolean boolean9 = dataNode7.hasAttr("Content-Encoding=#declaration");
        org.junit.Assert.assertNotNull(dataNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertNotNull(dataNode5);
        org.junit.Assert.assertNotNull(dataNode7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("Content-Encoding", "[]");
        org.junit.Assert.assertNotNull(textNode2);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        java.io.InputStream inputStream0 = null;
        org.jsoup.parser.Parser parser3 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse(inputStream0, "", "#root", parser3);
        org.jsoup.parser.ParseErrorList parseErrorList5 = parser3.getErrors();
        org.jsoup.parser.ParseErrorList parseErrorList6 = parser3.getErrors();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder7 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Parser parser8 = parser3.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder7);
        org.jsoup.helper.HttpConnection httpConnection9 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request10 = httpConnection9.request();
        org.jsoup.Connection connection12 = httpConnection9.referrer("multipart/form-data");
        java.io.InputStream inputStream13 = null;
        org.jsoup.helper.HttpConnection httpConnection16 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request17 = httpConnection16.request();
        org.jsoup.Connection.Request request20 = request17.addHeader("multipart/form-data", "hi!");
        boolean boolean22 = request20.hasHeader("multipart/form-data");
        boolean boolean24 = request20.hasCookie("#text");
        org.jsoup.parser.Parser parser25 = request20.parser();
        org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse(inputStream13, "", "multipart/form-data", parser25);
        org.jsoup.parser.ParseErrorList parseErrorList27 = parser25.getErrors();
        org.jsoup.Connection connection28 = connection12.parser(parser25);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser30 = parser25.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder29);
        org.jsoup.parser.Parser parser31 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder29);
        org.jsoup.parser.Parser parser32 = parser3.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = htmlTreeBuilder29.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"this.stack\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parser25);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertNotNull(connection28);
        org.junit.Assert.assertNotNull(parser30);
        org.junit.Assert.assertNotNull(parser32);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection connection6 = httpConnection0.header("#data", ":only-child");
        org.jsoup.Connection.Response response7 = connection6.response();
        org.jsoup.Connection.Response response9 = response7.charset("<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = response9.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNotNull(response9);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        boolean boolean1 = org.jsoup.internal.StringUtil.isBlank("<!DOCTYPE hi! :eq(-1) \"<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\" \"#root\">\n<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str3 = document2.className();
        java.lang.String str5 = document2.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.nodes.Element element7 = document2.text("");
        java.lang.String str8 = document2.cssSelector();
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.id();
        org.jsoup.select.Elements elements13 = document11.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor14 = elements13.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor15 = elements13.listIterator();
        org.jsoup.select.Elements elements17 = elements13.next("#text");
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList18.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList18.parallelStream();
        org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str23 = document22.id();
        org.jsoup.select.Elements elements24 = document22.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor25 = elements24.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor26 = elements24.listIterator();
        org.jsoup.select.Elements elements27 = elements24.empty();
        org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str30 = document29.id();
        org.jsoup.select.Elements elements31 = document29.previousElementSiblings();
        org.jsoup.select.Elements elements33 = elements31.prev("#text");
        boolean boolean34 = elements31.hasText();
        org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str37 = document36.id();
        org.jsoup.select.Elements elements38 = document36.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor39 = elements38.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor40 = elements38.listIterator();
        org.jsoup.select.Elements elements41 = elements38.empty();
        org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str44 = document43.id();
        org.jsoup.select.Elements elements45 = document43.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor46 = elements45.listIterator();
        boolean boolean48 = elements45.equals((java.lang.Object) 1.0d);
        java.lang.String str49 = elements45.text();
        org.jsoup.select.Elements elements51 = elements45.wrap("#root");
        org.jsoup.select.Elements[] elementsArray52 = new org.jsoup.select.Elements[] { elements24, elements31, elements38, elements51 };
        org.jsoup.select.Elements[] elementsArray53 = parseErrorList18.toArray(elementsArray52);
        int int54 = elements13.indexOf((java.lang.Object) parseErrorList18);
        java.util.List<org.jsoup.nodes.Node> nodeList55 = org.jsoup.parser.Parser.parseFragment("amultipart", (org.jsoup.nodes.Element) document2, ":first-of-type", parseErrorList18);
        org.jsoup.select.Elements elements56 = document2.parents();
        org.jsoup.nodes.Element element57 = document2.shallowClone();
        org.jsoup.nodes.Element element60 = document2.attr("Content-Type", "");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#root" + "'", str8, "#root");
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elementItor14);
        org.junit.Assert.assertNotNull(elementItor15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(elementItor25);
        org.junit.Assert.assertNotNull(elementItor26);
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(elementItor39);
        org.junit.Assert.assertNotNull(elementItor40);
        org.junit.Assert.assertNotNull(elements41);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(elements45);
        org.junit.Assert.assertNotNull(elementItor46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(elements51);
        org.junit.Assert.assertNotNull(elementsArray52);
        org.junit.Assert.assertNotNull(elementsArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertNotNull(elements56);
        org.junit.Assert.assertNotNull(element57);
        org.junit.Assert.assertNotNull(element60);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.jsoup.parser.TreeBuilder.defaultSettings()\" because \"treeBuilder\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("org.jsoup.HttpStatusException: Content-Type. Status=-1, URL=#declaration", "Content-Type=#declaration");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.jsoup.select.Evaluator.IsNthOfType isNthOfType2 = new org.jsoup.select.Evaluator.IsNthOfType((int) (short) 0, (int) (byte) 0);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.jsoup.select.Evaluator.Id id1 = new org.jsoup.select.Evaluator.Id("content-encoding=\"#root\"");
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) '4');
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.isBlock();
        org.jsoup.nodes.Element element5 = new org.jsoup.nodes.Element(tag1, "ultipart");
        boolean boolean6 = tag1.isEmpty();
        java.lang.String str7 = tag1.normalName();
        org.jsoup.select.Evaluator.IsFirstOfType isFirstOfType9 = new org.jsoup.select.Evaluator.IsFirstOfType();
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element13 = document11.val("hi!");
        org.jsoup.nodes.Element element15 = element13.html("");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType18 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str21 = document20.wholeText();
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str24 = document23.className();
        boolean boolean25 = isNthLastOfType18.matches((org.jsoup.nodes.Element) document20, (org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Document document26 = document20.clone();
        document26.setBaseUri("#root");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan30 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType33 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str36 = document35.id();
        org.jsoup.select.Elements elements37 = document35.previousElementSiblings();
        org.jsoup.nodes.Element element38 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType33, (org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str41 = document40.className();
        java.lang.String str42 = document40.outerHtml();
        org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str45 = document44.id();
        java.lang.String str46 = document44.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan48 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean49 = document44.is((org.jsoup.select.Evaluator) indexLessThan48);
        boolean boolean50 = isNthLastOfType33.matches((org.jsoup.nodes.Element) document40, (org.jsoup.nodes.Element) document44);
        java.lang.String str51 = document44.cssSelector();
        org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str54 = document53.className();
        java.lang.String str55 = document53.outerHtml();
        boolean boolean57 = document53.hasSameValue((java.lang.Object) 1);
        boolean boolean58 = indexLessThan30.matches((org.jsoup.nodes.Element) document44, (org.jsoup.nodes.Element) document53);
        org.jsoup.nodes.Element element59 = document26.prependChild((org.jsoup.nodes.Node) document53);
        org.jsoup.nodes.Element element61 = element59.removeClass("#root");
        boolean boolean62 = isFirstOfType9.matches(element13, element59);
        org.jsoup.nodes.Attributes attributes63 = element59.attributes();
        org.jsoup.nodes.FormElement formElement64 = new org.jsoup.nodes.FormElement(tag1, "multipart", attributes63);
        org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str67 = document66.id();
        java.lang.String str68 = document66.baseUri();
        org.jsoup.nodes.Element element70 = document66.toggleClass("multipart");
        org.jsoup.select.Elements elements71 = document66.getAllElements();
        org.jsoup.nodes.FormElement formElement72 = formElement64.addElement((org.jsoup.nodes.Element) document66);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection connection73 = formElement64.submit();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Malformed URL: multipart");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#document" + "'", str7, "#document");
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(document20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!" + "'", str21, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(elements37);
        org.junit.Assert.assertNull(element38);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str42, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "#root" + "'", str51, "#root");
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str55, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(element59);
        org.junit.Assert.assertNotNull(element61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(attributes63);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(element70);
        org.junit.Assert.assertNotNull(elements71);
        org.junit.Assert.assertNotNull(formElement72);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection connection6 = httpConnection0.header("#data", ":only-child");
        org.jsoup.Connection.Response response7 = connection6.response();
        org.jsoup.Connection.Response response9 = response7.charset("<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>");
        org.jsoup.Connection.Response response12 = response9.addHeader("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!", "hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!multipart/form-data");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response13 = response9.bufferUp();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(response12);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.jsoup.select.NodeVisitor nodeVisitor0 = null;
        java.io.InputStream inputStream1 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream4 = new org.jsoup.internal.ConstrainableInputStream(inputStream1, 1, (int) (byte) 0);
        org.jsoup.parser.Parser parser7 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document8 = org.jsoup.helper.DataUtil.load(inputStream1, ":eq(-1)", "Content-Encoding", parser7);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.NodeTraversor.traverse(nodeVisitor0, (org.jsoup.nodes.Node) document8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.jsoup.select.NodeVisitor.head(org.jsoup.nodes.Node, int)\" because \"visitor\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser7);
        org.junit.Assert.assertNotNull(document8);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        boolean boolean1 = org.jsoup.internal.StringUtil.isBlank("#document");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType2 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.id();
        org.jsoup.select.Elements elements6 = document4.previousElementSiblings();
        org.jsoup.nodes.Element element7 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType2, (org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.className();
        java.lang.String str11 = document9.outerHtml();
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.id();
        java.lang.String str15 = document13.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan17 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean18 = document13.is((org.jsoup.select.Evaluator) indexLessThan17);
        boolean boolean19 = isNthLastOfType2.matches((org.jsoup.nodes.Element) document9, (org.jsoup.nodes.Element) document13);
        java.lang.String str20 = document13.cssSelector();
        org.jsoup.nodes.Element element21 = document13.clearAttributes();
        org.jsoup.select.Elements elements22 = document13.getAllElements();
        java.lang.String str23 = elements22.text();
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNull(element7);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#root" + "'", str20, "#root");
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi! hi!  hi!" + "'", str23, "hi! hi!  hi!");
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor5 = elements3.listIterator();
        org.jsoup.select.Elements elements7 = elements3.next("#text");
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList8.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList8.parallelStream();
        org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str13 = document12.id();
        org.jsoup.select.Elements elements14 = document12.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor15 = elements14.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor16 = elements14.listIterator();
        org.jsoup.select.Elements elements17 = elements14.empty();
        org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str20 = document19.id();
        org.jsoup.select.Elements elements21 = document19.previousElementSiblings();
        org.jsoup.select.Elements elements23 = elements21.prev("#text");
        boolean boolean24 = elements21.hasText();
        org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str27 = document26.id();
        org.jsoup.select.Elements elements28 = document26.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor29 = elements28.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor30 = elements28.listIterator();
        org.jsoup.select.Elements elements31 = elements28.empty();
        org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str34 = document33.id();
        org.jsoup.select.Elements elements35 = document33.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor36 = elements35.listIterator();
        boolean boolean38 = elements35.equals((java.lang.Object) 1.0d);
        java.lang.String str39 = elements35.text();
        org.jsoup.select.Elements elements41 = elements35.wrap("#root");
        org.jsoup.select.Elements[] elementsArray42 = new org.jsoup.select.Elements[] { elements14, elements21, elements28, elements41 };
        org.jsoup.select.Elements[] elementsArray43 = parseErrorList8.toArray(elementsArray42);
        int int44 = elements3.indexOf((java.lang.Object) parseErrorList8);
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator45 = parseErrorList8.spliterator();
        parseErrorList8.trimToSize();
        boolean boolean47 = parseErrorList8.isEmpty();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertNotNull(elementItor5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(elementItor15);
        org.junit.Assert.assertNotNull(elementItor16);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(elementItor29);
        org.junit.Assert.assertNotNull(elementItor30);
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(elementItor36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(elements41);
        org.junit.Assert.assertNotNull(elementsArray42);
        org.junit.Assert.assertNotNull(elementsArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(parseErrorSpliterator45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        java.io.InputStream inputStream2 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal3 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream2);
        java.io.InputStream inputStream4 = keyVal3.inputStream();
        java.io.InputStream inputStream7 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal8 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream7);
        java.io.InputStream inputStream9 = keyVal8.inputStream();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = null;
        org.jsoup.Connection connection12 = httpConnection10.sslSocketFactory(sSLSocketFactory11);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = null;
        org.jsoup.Connection connection14 = httpConnection10.sslSocketFactory(sSLSocketFactory13);
        org.jsoup.Connection.Request request15 = httpConnection10.request();
        org.jsoup.helper.HttpConnection httpConnection16 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request17 = httpConnection16.request();
        org.jsoup.Connection.Request request20 = request17.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = request20.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = request20.cookies();
        org.jsoup.Connection connection23 = httpConnection10.headers(strMap22);
        java.io.InputStream inputStream26 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream29 = new org.jsoup.internal.ConstrainableInputStream(inputStream26, 1, (int) (byte) 0);
        org.jsoup.Connection connection30 = httpConnection10.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream29);
        org.jsoup.helper.HttpConnection.KeyVal keyVal31 = keyVal8.inputStream((java.io.InputStream) constrainableInputStream29);
        constrainableInputStream29.skipNBytes(0L);
        org.jsoup.helper.HttpConnection.KeyVal keyVal34 = keyVal3.inputStream((java.io.InputStream) constrainableInputStream29);
        java.lang.String str35 = keyVal34.value();
        boolean boolean36 = keyVal34.hasInputStream();
        org.junit.Assert.assertNotNull(keyVal3);
        org.junit.Assert.assertNull(inputStream4);
        org.junit.Assert.assertNotNull(keyVal8);
        org.junit.Assert.assertNull(inputStream9);
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(connection14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(connection23);
        org.junit.Assert.assertNotNull(connection30);
        org.junit.Assert.assertNotNull(keyVal31);
        org.junit.Assert.assertNotNull(keyVal34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "#declaration" + "'", str35, "#declaration");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element3 = document1.val("hi!");
        org.jsoup.nodes.Element element4 = document1.clone();
        org.jsoup.select.Elements elements6 = element4.getElementsMatchingText("");
        org.jsoup.select.Elements elements8 = element4.getElementsContainingText("#text");
        org.jsoup.select.Elements elements10 = elements8.addClass("Content-Encoding");
        org.jsoup.select.Elements elements12 = elements10.before("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.select.Elements elements13 = elements12.nextAll();
        org.jsoup.select.Elements elements15 = elements13.prepend(":gt(100)");
        org.jsoup.select.Elements elements17 = elements15.append(":eq(1)");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements17);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.jsoup.select.Evaluator.MatchText matchText0 = new org.jsoup.select.Evaluator.MatchText();
        org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot3 = new org.jsoup.select.Evaluator.AttributeWithValueNot(":eq(-1)", "#doctype");
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.id();
        java.lang.String str7 = document5.baseUri();
        org.jsoup.nodes.Element element10 = document5.attr("", true);
        org.jsoup.nodes.Node node13 = document5.attr("#text", "");
        org.jsoup.nodes.Element element14 = document5.shallowClone();
        org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str17 = document16.id();
        java.lang.String str18 = document16.baseUri();
        org.jsoup.nodes.Element element19 = document16.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = document16.dataset();
        org.jsoup.nodes.Element element22 = document16.html("#root=\"\"");
        boolean boolean23 = attributeWithValueNot3.matches(element14, (org.jsoup.nodes.Element) document16);
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType26 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str29 = document28.wholeText();
        org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str32 = document31.className();
        boolean boolean33 = isNthLastOfType26.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document31);
        org.jsoup.nodes.Document document34 = document28.clone();
        org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot37 = new org.jsoup.select.Evaluator.AttributeWithValueNot("#text", "#text");
        org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("", "#doctype");
        org.jsoup.nodes.Document document43 = org.jsoup.parser.Parser.parse(" hi!=\"multipart/form-data\"", "Content-Encoding");
        boolean boolean44 = attributeWithValueNot37.matches((org.jsoup.nodes.Element) document40, (org.jsoup.nodes.Element) document43);
        boolean boolean45 = attributeWithValueNot3.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document40);
        org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str48 = document47.id();
        java.lang.String str49 = document47.baseUri();
        org.jsoup.nodes.Element element50 = document47.body();
        org.jsoup.helper.HttpConnection httpConnection51 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request52 = httpConnection51.request();
        org.jsoup.Connection.Request request55 = request52.addHeader("multipart/form-data", "hi!");
        boolean boolean57 = request55.hasHeader("multipart/form-data");
        boolean boolean59 = request55.hasCookie("#text");
        org.jsoup.parser.Parser parser60 = request55.parser();
        org.jsoup.nodes.Document document61 = document47.parser(parser60);
        org.jsoup.nodes.Node node62 = document61.parent();
        org.jsoup.select.Elements elements63 = document61.children();
        boolean boolean64 = matchText0.matches((org.jsoup.nodes.Element) document40, (org.jsoup.nodes.Element) document61);
        org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str67 = document66.id();
        java.lang.String str68 = document66.baseUri();
        org.jsoup.nodes.Element element71 = document66.attr("", true);
        org.jsoup.select.Elements elements73 = document66.getElementsContainingOwnText("[]");
        org.jsoup.nodes.Element element75 = document66.tagName("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        java.lang.String str76 = document66.html();
        org.jsoup.nodes.Document document78 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str79 = document78.id();
        java.lang.String str80 = document78.baseUri();
        org.jsoup.nodes.Element element81 = document78.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap82 = document78.dataset();
        boolean boolean83 = matchText0.matches((org.jsoup.nodes.Element) document66, (org.jsoup.nodes.Element) document78);
        org.jsoup.nodes.Document document85 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str86 = document85.id();
        java.lang.String str87 = document85.baseUri();
        org.jsoup.nodes.Element element89 = document85.toggleClass("multipart");
        org.jsoup.select.Elements elements90 = element89.children();
        org.jsoup.select.Elements elements91 = org.jsoup.select.Selector.select((org.jsoup.select.Evaluator) matchText0, element89);
        org.jsoup.select.Elements elements94 = element89.getElementsByAttributeValue("Content-Encoding", "org.jsoup.HttpStatusException: Content-Encoding=\"#root\". Status=1, URL=:nth-last-of-type(100n-1)");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(element50);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(request55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(parser60);
        org.junit.Assert.assertNotNull(document61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(elements63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(element71);
        org.junit.Assert.assertNotNull(elements73);
        org.junit.Assert.assertNotNull(element75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str76, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(element81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(document85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(element89);
        org.junit.Assert.assertNotNull(elements90);
        org.junit.Assert.assertNotNull(elements91);
        org.junit.Assert.assertNotNull(elements94);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.jsoup.parser.ParseErrorList parseErrorList0 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor1 = parseErrorList0.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList0.parallelStream();
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.id();
        org.jsoup.select.Elements elements6 = document4.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor7 = elements6.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor8 = elements6.listIterator();
        org.jsoup.select.Elements elements9 = elements6.empty();
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.id();
        org.jsoup.select.Elements elements13 = document11.previousElementSiblings();
        org.jsoup.select.Elements elements15 = elements13.prev("#text");
        boolean boolean16 = elements13.hasText();
        org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str19 = document18.id();
        org.jsoup.select.Elements elements20 = document18.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor21 = elements20.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor22 = elements20.listIterator();
        org.jsoup.select.Elements elements23 = elements20.empty();
        org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str26 = document25.id();
        org.jsoup.select.Elements elements27 = document25.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor28 = elements27.listIterator();
        boolean boolean30 = elements27.equals((java.lang.Object) 1.0d);
        java.lang.String str31 = elements27.text();
        org.jsoup.select.Elements elements33 = elements27.wrap("#root");
        org.jsoup.select.Elements[] elementsArray34 = new org.jsoup.select.Elements[] { elements6, elements13, elements20, elements33 };
        org.jsoup.select.Elements[] elementsArray35 = parseErrorList0.toArray(elementsArray34);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream36 = parseErrorList0.stream();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError38 = parseErrorList0.get(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 100 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList0);
        org.junit.Assert.assertNotNull(parseErrorItor1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elementItor7);
        org.junit.Assert.assertNotNull(elementItor8);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(elementItor21);
        org.junit.Assert.assertNotNull(elementItor22);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertNotNull(elementItor28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertNotNull(elementsArray34);
        org.junit.Assert.assertNotNull(elementsArray35);
        org.junit.Assert.assertNotNull(parseErrorStream36);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        boolean boolean8 = request4.hasCookie("#text");
        org.jsoup.Connection.Request request11 = request4.cookie("#doctype", "#root=\"\"");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Request request14 = request4.addHeader("", "amultipart/form-data");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(request11);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        java.lang.String str3 = document1.baseUri();
        org.jsoup.nodes.Element element6 = document1.attr("", true);
        org.jsoup.select.Elements elements8 = document1.getElementsByIndexEquals((int) ' ');
        java.util.Iterator<org.jsoup.nodes.Element> elementItor9 = elements8.iterator();
        java.lang.String str11 = org.jsoup.internal.StringUtil.join((java.util.Iterator) elementItor9, "#doctype");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elementItor9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.jsoup.examples.HtmlToPlainText htmlToPlainText0 = new org.jsoup.examples.HtmlToPlainText();
        org.jsoup.select.Evaluator.IsOnlyChild isOnlyChild1 = new org.jsoup.select.Evaluator.IsOnlyChild();
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str4 = document3.id();
        java.lang.String str5 = document3.baseUri();
        org.jsoup.nodes.Element element7 = document3.toggleClass("multipart");
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.className();
        java.lang.String str11 = document9.outerHtml();
        boolean boolean13 = document9.hasSameValue((java.lang.Object) 1);
        boolean boolean14 = isOnlyChild1.matches((org.jsoup.nodes.Element) document3, (org.jsoup.nodes.Element) document9);
        java.lang.String str15 = htmlToPlainText0.getPlainText((org.jsoup.nodes.Element) document9);
        org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str18 = document17.className();
        java.lang.String str20 = document17.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str21 = document17.normalName();
        java.lang.String str22 = document17.html();
        org.jsoup.nodes.Element element24 = document17.addClass("[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]");
        org.jsoup.nodes.Document document25 = document17.normalise();
        java.lang.String str26 = document17.baseUri();
        java.lang.String str27 = htmlToPlainText0.getPlainText((org.jsoup.nodes.Element) document17);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#root" + "'", str21, "#root");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str22, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.jsoup.select.Evaluator.IsEmpty isEmpty0 = new org.jsoup.select.Evaluator.IsEmpty();
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str3 = document2.className();
        java.lang.String str4 = document2.outerHtml();
        org.jsoup.nodes.Element element6 = document2.removeAttr(":lt(52)");
        org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parseBodyFragment("#cdata");
        boolean boolean9 = isEmpty0.matches((org.jsoup.nodes.Element) document2, (org.jsoup.nodes.Element) document8);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str4, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        java.lang.String str2 = org.jsoup.parser.Parser.unescapeEntities("#text", true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "#text" + "'", str2, "#text");
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element3 = document1.val("hi!");
        org.jsoup.nodes.Element element5 = element3.html("");
        java.lang.String str6 = element3.tagName();
        org.jsoup.select.Elements elements8 = element3.getElementsByAttribute("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.select.Elements elements10 = elements8.addClass("#root=\"\"");
        java.util.List<java.lang.String> strList12 = elements8.eachAttr("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(element5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#root" + "'", str6, "#root");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.jsoup.helper.W3CDom w3CDom0 = new org.jsoup.helper.W3CDom();
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str3 = document2.className();
        java.lang.String str5 = document2.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str6 = document2.normalName();
        org.w3c.dom.Document document7 = w3CDom0.fromJsoup(document2);
        org.jsoup.nodes.Document document8 = document2.ownerDocument();
        org.jsoup.parser.Tag tag9 = document2.tag();
        java.lang.String str10 = tag9.toString();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#root" + "'", str6, "#root");
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNull("document7.getDocumentURI() == null", document7.getDocumentURI());
        org.junit.Assert.assertNull("document7.getInputEncoding() == null", document7.getInputEncoding());
        org.junit.Assert.assertNull("document7.getXmlEncoding() == null", document7.getXmlEncoding());
        org.junit.Assert.assertEquals(document7.getXmlVersion(), "1.0");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#root" + "'", str10, "#root");
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        boolean boolean8 = request4.hasCookie("#text");
        org.jsoup.parser.Parser parser9 = request4.parser();
        org.jsoup.Connection.Request request12 = request4.header("#text", "multipart/form-data");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = request12.multiHeaders();
        boolean boolean15 = request12.hasCookie("[:eq(-1)!=#doctype]");
        int int16 = request12.timeout();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parser9);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 30000 + "'", int16 == 30000);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        java.lang.String str3 = document1.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan5 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean6 = document1.is((org.jsoup.select.Evaluator) indexLessThan5);
        org.jsoup.nodes.Element element7 = null;
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType10 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str13 = document12.wholeText();
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.className();
        boolean boolean17 = isNthLastOfType10.matches((org.jsoup.nodes.Element) document12, (org.jsoup.nodes.Element) document15);
        org.jsoup.nodes.Document document18 = document12.clone();
        org.jsoup.select.Elements elements20 = document12.getElementsByIndexEquals((int) (short) 10);
        boolean boolean21 = indexLessThan5.matches(element7, (org.jsoup.nodes.Element) document12);
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan25 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType28 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str31 = document30.id();
        org.jsoup.select.Elements elements32 = document30.previousElementSiblings();
        org.jsoup.nodes.Element element33 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType28, (org.jsoup.nodes.Element) document30);
        org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str36 = document35.className();
        java.lang.String str37 = document35.outerHtml();
        org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str40 = document39.id();
        java.lang.String str41 = document39.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan43 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean44 = document39.is((org.jsoup.select.Evaluator) indexLessThan43);
        boolean boolean45 = isNthLastOfType28.matches((org.jsoup.nodes.Element) document35, (org.jsoup.nodes.Element) document39);
        java.lang.String str46 = document39.cssSelector();
        org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str49 = document48.className();
        java.lang.String str50 = document48.outerHtml();
        boolean boolean52 = document48.hasSameValue((java.lang.Object) 1);
        boolean boolean53 = indexLessThan25.matches((org.jsoup.nodes.Element) document39, (org.jsoup.nodes.Element) document48);
        org.jsoup.nodes.Document.QuirksMode quirksMode54 = org.jsoup.nodes.Document.QuirksMode.quirks;
        org.jsoup.nodes.Document document55 = document48.quirksMode(quirksMode54);
        document48.updateMetaCharsetElement(false);
        org.jsoup.nodes.Element element59 = document48.append("SYSTEM");
        org.jsoup.nodes.Attributes attributes60 = element59.attributes();
        org.jsoup.nodes.Attribute attribute61 = new org.jsoup.nodes.Attribute("[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", "hi!hi!", attributes60);
        boolean boolean62 = document12.equals((java.lang.Object) attributes60);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(elements32);
        org.junit.Assert.assertNull(element33);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str37, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#root" + "'", str46, "#root");
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str50, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + quirksMode54 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode54.equals(org.jsoup.nodes.Document.QuirksMode.quirks));
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(element59);
        org.junit.Assert.assertNotNull(attributes60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        java.lang.String str3 = document1.baseUri();
        org.jsoup.nodes.Element element4 = document1.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = document1.dataset();
        org.jsoup.nodes.Element element7 = document1.html("#root=\"\"");
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.noTracking();
        int int14 = parseErrorList11.indexOf((java.lang.Object) parseErrorList13);
        org.jsoup.helper.HttpConnection httpConnection15 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = null;
        org.jsoup.Connection connection17 = httpConnection15.sslSocketFactory(sSLSocketFactory16);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = null;
        org.jsoup.Connection connection19 = httpConnection15.sslSocketFactory(sSLSocketFactory18);
        org.jsoup.Connection connection21 = httpConnection15.ignoreContentType(true);
        boolean boolean22 = parseErrorList11.equals((java.lang.Object) true);
        org.jsoup.nodes.DataNode dataNode25 = org.jsoup.nodes.DataNode.createFromEncoded("#text", "");
        java.lang.String str26 = dataNode25.getWholeData();
        org.jsoup.nodes.DataNode dataNode28 = dataNode25.setWholeData("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.nodes.LeafNode[] leafNodeArray29 = new org.jsoup.nodes.LeafNode[] { dataNode28 };
        org.jsoup.nodes.LeafNode[] leafNodeArray30 = parseErrorList11.toArray(leafNodeArray29);
        org.jsoup.select.Selector.SelectorParseException selectorParseException31 = new org.jsoup.select.Selector.SelectorParseException(":lt(52)", (java.lang.Object[]) leafNodeArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element32 = document1.insertChildren((int) (byte) 100, (org.jsoup.nodes.Node[]) leafNodeArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Insert position out of bounds.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection19);
        org.junit.Assert.assertNotNull(connection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dataNode25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#text" + "'", str26, "#text");
        org.junit.Assert.assertNotNull(dataNode28);
        org.junit.Assert.assertNotNull(leafNodeArray29);
        org.junit.Assert.assertNotNull(leafNodeArray30);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) (byte) -1);
        java.lang.String str2 = indexEquals1.toString();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType5 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str8 = document7.className();
        java.lang.String str9 = document7.outerHtml();
        boolean boolean11 = document7.hasSameValue((java.lang.Object) 1);
        java.lang.String str12 = document7.tagName();
        org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element16 = document14.val("hi!");
        boolean boolean17 = isNthLastOfType5.matches((org.jsoup.nodes.Element) document7, element16);
        java.lang.String str18 = document7.wholeText();
        org.jsoup.nodes.Element element20 = document7.removeClass("#root=\"\"");
        org.jsoup.nodes.Document document21 = document7.ownerDocument();
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str24 = document23.className();
        java.lang.String str25 = document23.outerHtml();
        boolean boolean27 = document23.hasSameValue((java.lang.Object) 1);
        java.lang.String str28 = document23.tagName();
        org.jsoup.nodes.Element element29 = document23.shallowClone();
        boolean boolean30 = indexEquals1.matches((org.jsoup.nodes.Element) document21, (org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("#document", "hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str36 = document35.id();
        java.lang.String str37 = document35.baseUri();
        org.jsoup.nodes.Element element40 = document35.attr("", true);
        org.jsoup.select.Elements elements42 = document35.getElementsContainingOwnText("[]");
        org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str45 = document44.id();
        org.jsoup.select.Elements elements46 = document44.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor47 = elements46.listIterator();
        boolean boolean49 = elements46.equals((java.lang.Object) 1.0d);
        java.lang.String str50 = elements46.text();
        org.jsoup.select.Elements elements52 = elements46.wrap("#root");
        org.jsoup.select.Elements elements54 = elements52.toggleClass("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.select.Elements elements56 = elements52.html("#text");
        org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str59 = document58.id();
        java.lang.String str60 = document58.baseUri();
        org.jsoup.nodes.Element element61 = document58.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap62 = document58.dataset();
        boolean boolean63 = elements52.add((org.jsoup.nodes.Element) document58);
        int int64 = document58.elementSiblingIndex();
        org.jsoup.nodes.Element element65 = document35.prependChild((org.jsoup.nodes.Node) document58);
        boolean boolean66 = indexEquals1.matches((org.jsoup.nodes.Element) document33, (org.jsoup.nodes.Element) document35);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":eq(-1)" + "'", str2, ":eq(-1)");
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str9, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#root" + "'", str12, "#root");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str25, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "#root" + "'", str28, "#root");
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(elements46);
        org.junit.Assert.assertNotNull(elementItor47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(elements52);
        org.junit.Assert.assertNotNull(elements54);
        org.junit.Assert.assertNotNull(elements56);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(element61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(element65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.jsoup.select.NodeFilter nodeFilter0 = null;
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str3 = document2.id();
        org.jsoup.select.Elements elements4 = document2.previousElementSiblings();
        org.jsoup.select.Elements elements6 = elements4.prev("#text");
        java.lang.String str7 = elements6.val();
        org.jsoup.select.Elements elements8 = elements6.nextAll();
        java.util.List<java.lang.String> strList10 = elements6.eachAttr("amultipart");
        org.jsoup.select.Elements elements11 = elements6.nextAll();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.NodeTraversor.filter(nodeFilter0, elements11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(elements11);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        boolean boolean8 = request4.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method9 = request4.method();
        org.jsoup.Connection.Method method10 = request4.method();
        org.jsoup.Connection.Request request13 = request4.addHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ":eq(-1)");
        org.jsoup.Connection.Request request16 = request13.addHeader("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", "                                   ");
        org.jsoup.Connection.Method method17 = request16.method();
        boolean boolean20 = request16.hasHeaderWithValue("Content-Type", "multipart");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + method9 + "' != '" + org.jsoup.Connection.Method.GET + "'", method9.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method10 + "' != '" + org.jsoup.Connection.Method.GET + "'", method10.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertTrue("'" + method17 + "' != '" + org.jsoup.Connection.Method.GET + "'", method17.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.jsoup.helper.HttpConnection.KeyVal keyVal2 = org.jsoup.helper.HttpConnection.KeyVal.create("#root", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.helper.HttpConnection.KeyVal keyVal4 = keyVal2.key("Content-Encoding");
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request6 = httpConnection5.request();
        org.jsoup.Connection connection8 = httpConnection5.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection9 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        org.jsoup.Connection connection11 = httpConnection9.sslSocketFactory(sSLSocketFactory10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        org.jsoup.Connection connection13 = httpConnection9.sslSocketFactory(sSLSocketFactory12);
        org.jsoup.Connection.Request request14 = httpConnection9.request();
        org.jsoup.helper.HttpConnection httpConnection15 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request16 = httpConnection15.request();
        org.jsoup.Connection.Request request19 = request16.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = request19.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = request19.cookies();
        org.jsoup.Connection connection22 = httpConnection9.headers(strMap21);
        org.jsoup.Connection connection23 = httpConnection5.data(strMap21);
        java.io.InputStream inputStream28 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal29 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream28);
        java.io.InputStream inputStream30 = keyVal29.inputStream();
        org.jsoup.helper.HttpConnection httpConnection31 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory32 = null;
        org.jsoup.Connection connection33 = httpConnection31.sslSocketFactory(sSLSocketFactory32);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = null;
        org.jsoup.Connection connection35 = httpConnection31.sslSocketFactory(sSLSocketFactory34);
        org.jsoup.Connection.Request request36 = httpConnection31.request();
        org.jsoup.helper.HttpConnection httpConnection37 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request38 = httpConnection37.request();
        org.jsoup.Connection.Request request41 = request38.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = request41.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = request41.cookies();
        org.jsoup.Connection connection44 = httpConnection31.headers(strMap43);
        java.io.InputStream inputStream47 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream50 = new org.jsoup.internal.ConstrainableInputStream(inputStream47, 1, (int) (byte) 0);
        org.jsoup.Connection connection51 = httpConnection31.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream50);
        org.jsoup.helper.HttpConnection.KeyVal keyVal52 = keyVal29.inputStream((java.io.InputStream) constrainableInputStream50);
        constrainableInputStream50.skipNBytes(0L);
        org.jsoup.Connection connection55 = httpConnection5.data("[:eq(-1)!=#doctype]", ":contains(content-encoding)", (java.io.InputStream) constrainableInputStream50);
        constrainableInputStream50.close();
        org.jsoup.helper.HttpConnection.KeyVal keyVal57 = keyVal4.inputStream((java.io.InputStream) constrainableInputStream50);
        org.junit.Assert.assertNotNull(keyVal2);
        org.junit.Assert.assertNotNull(keyVal4);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(connection11);
        org.junit.Assert.assertNotNull(connection13);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(connection22);
        org.junit.Assert.assertNotNull(connection23);
        org.junit.Assert.assertNotNull(keyVal29);
        org.junit.Assert.assertNull(inputStream30);
        org.junit.Assert.assertNotNull(connection33);
        org.junit.Assert.assertNotNull(connection35);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(connection44);
        org.junit.Assert.assertNotNull(connection51);
        org.junit.Assert.assertNotNull(keyVal52);
        org.junit.Assert.assertNotNull(connection55);
        org.junit.Assert.assertNotNull(keyVal57);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        java.io.InputStream inputStream4 = null;
        org.jsoup.Connection connection6 = httpConnection0.data("#root", "Content-Encoding", inputStream4, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.helper.HttpConnection httpConnection7 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request8 = httpConnection7.request();
        org.jsoup.Connection.Request request11 = request8.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = request11.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = request11.cookies();
        org.jsoup.Connection connection14 = httpConnection0.headers(strMap13);
        org.jsoup.Connection connection16 = httpConnection0.requestBody("PUBLIC");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection connection18 = httpConnection0.postDataCharset("#:first-child");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: #:first-child");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(connection14);
        org.junit.Assert.assertNotNull(connection16);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.jsoup.nodes.Attributes attributes2 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes5 = attributes2.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor6 = attributes2.iterator();
        org.jsoup.nodes.Attribute attribute7 = new org.jsoup.nodes.Attribute("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>=\"#root\"", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<#root value=\"hi!\">\n <html>\n  <head></head>\n  <body>\n   hi!\n  </body>\n </html>\n</#root>", attributes2);
        org.jsoup.nodes.Attributes attributes8 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attribute attribute11 = org.jsoup.nodes.Attribute.createFromEncoded("#root", "");
        org.jsoup.nodes.Attributes attributes12 = attributes8.put(attribute11);
        java.lang.String str13 = attribute11.html();
        org.jsoup.nodes.Attributes attributes14 = attributes2.put(attribute11);
        java.lang.String str16 = attributes14.get("                                   ");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(attributeItor6);
        org.junit.Assert.assertNotNull(attribute11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#root=\"\"" + "'", str13, "#root=\"\"");
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.noTracking();
        int int4 = parseErrorList1.indexOf((java.lang.Object) parseErrorList3);
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        org.jsoup.Connection connection7 = httpConnection5.sslSocketFactory(sSLSocketFactory6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = null;
        org.jsoup.Connection connection9 = httpConnection5.sslSocketFactory(sSLSocketFactory8);
        org.jsoup.Connection connection11 = httpConnection5.ignoreContentType(true);
        boolean boolean12 = parseErrorList1.equals((java.lang.Object) true);
        org.jsoup.parser.ParseError[] parseErrorArray13 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList14 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14, parseErrorArray13);
        parseErrorList14.ensureCapacity(10);
        boolean boolean18 = parseErrorList1.remove((java.lang.Object) parseErrorList14);
        org.jsoup.helper.HttpConnection httpConnection19 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = null;
        org.jsoup.Connection connection21 = httpConnection19.sslSocketFactory(sSLSocketFactory20);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = null;
        org.jsoup.Connection connection23 = httpConnection19.sslSocketFactory(sSLSocketFactory22);
        org.jsoup.Connection.Request request24 = httpConnection19.request();
        org.jsoup.Connection.KeyVal[] keyValArray25 = new org.jsoup.Connection.KeyVal[] {};
        java.util.ArrayList<org.jsoup.Connection.KeyVal> keyValList26 = new java.util.ArrayList<org.jsoup.Connection.KeyVal>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList26, keyValArray25);
        org.jsoup.Connection connection28 = httpConnection19.data((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList26);
        java.io.InputStream inputStream31 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream34 = new org.jsoup.internal.ConstrainableInputStream(inputStream31, 1, (int) (byte) 0);
        constrainableInputStream34.close();
        org.jsoup.Connection connection36 = httpConnection19.data("hi!hi!", "#declaration", (java.io.InputStream) constrainableInputStream34);
        int int37 = parseErrorList1.indexOf((java.lang.Object) "#declaration");
        org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element41 = document39.val("hi!");
        org.jsoup.nodes.Element element42 = document39.clone();
        java.util.List<org.jsoup.nodes.DataNode> dataNodeList43 = document39.dataNodes();
        boolean boolean44 = parseErrorList1.equals((java.lang.Object) document39);
        java.lang.Object obj45 = parseErrorList1.clone();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(connection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(connection21);
        org.junit.Assert.assertNotNull(connection23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(keyValArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(connection28);
        org.junit.Assert.assertNotNull(connection36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(element41);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertNotNull(dataNodeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "[]");
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        java.lang.String str1 = org.jsoup.parser.TokenQueue.unescape("[system$=<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    </head>\n    <body>hi!</body>\n</html>]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[system$=<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    </head>\n    <body>hi!</body>\n</html>]" + "'", str1, "[system$=<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    </head>\n    <body>hi!</body>\n</html>]");
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        boolean boolean1 = org.jsoup.parser.Tag.isKnownTag("SYSTEM=<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element3 = document1.val("hi!");
        org.jsoup.nodes.Element element4 = document1.clone();
        org.jsoup.nodes.Element element6 = document1.appendText("hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
        document1.updateMetaCharsetElement(false);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(element6);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection.Request request19 = httpConnection0.request();
        org.jsoup.Connection connection21 = httpConnection0.requestBody("#document");
        org.jsoup.Connection connection23 = httpConnection0.requestBody("Content-Encoding");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(connection21);
        org.junit.Assert.assertNotNull(connection23);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        boolean boolean6 = elements3.equals((java.lang.Object) 1.0d);
        java.lang.String str7 = elements3.text();
        org.jsoup.nodes.Element element9 = null;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("", element9, "", parseErrorList11);
        boolean boolean13 = parseErrorList11.isEmpty();
        int int14 = parseErrorList11.size();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList15.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList15.parallelStream();
        org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str20 = document19.id();
        org.jsoup.select.Elements elements21 = document19.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor22 = elements21.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor23 = elements21.listIterator();
        org.jsoup.select.Elements elements24 = elements21.empty();
        org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str27 = document26.id();
        org.jsoup.select.Elements elements28 = document26.previousElementSiblings();
        org.jsoup.select.Elements elements30 = elements28.prev("#text");
        boolean boolean31 = elements28.hasText();
        org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str34 = document33.id();
        org.jsoup.select.Elements elements35 = document33.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor36 = elements35.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor37 = elements35.listIterator();
        org.jsoup.select.Elements elements38 = elements35.empty();
        org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str41 = document40.id();
        org.jsoup.select.Elements elements42 = document40.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor43 = elements42.listIterator();
        boolean boolean45 = elements42.equals((java.lang.Object) 1.0d);
        java.lang.String str46 = elements42.text();
        org.jsoup.select.Elements elements48 = elements42.wrap("#root");
        org.jsoup.select.Elements[] elementsArray49 = new org.jsoup.select.Elements[] { elements21, elements28, elements35, elements48 };
        org.jsoup.select.Elements[] elementsArray50 = parseErrorList15.toArray(elementsArray49);
        boolean boolean51 = parseErrorList11.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        boolean boolean52 = elements3.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        java.util.Collection<org.jsoup.parser.ParseError> parseErrorCollection53 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = parseErrorList15.retainAll(parseErrorCollection53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(elementItor22);
        org.junit.Assert.assertNotNull(elementItor23);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(elementItor36);
        org.junit.Assert.assertNotNull(elementItor37);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertNotNull(elementItor43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertNotNull(elementsArray49);
        org.junit.Assert.assertNotNull(elementsArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection.Request request19 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection20 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request21 = httpConnection20.request();
        org.jsoup.Connection.Request request24 = request21.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Request request27 = request24.cookie("#text", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        boolean boolean30 = request24.hasHeaderWithValue("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "#document");
        org.jsoup.Connection.Request request33 = request24.cookie("#document", "#document");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = request33.headers();
        org.jsoup.Connection connection35 = httpConnection0.headers(strMap34);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory36 = null;
        org.jsoup.Connection connection37 = httpConnection0.sslSocketFactory(sSLSocketFactory36);
        org.jsoup.Connection connection40 = httpConnection0.data("org.jsoup.select.Selector$SelectorParseException: #doctype", "Content-Type");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(connection35);
        org.junit.Assert.assertNotNull(connection37);
        org.junit.Assert.assertNotNull(connection40);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor5 = elements3.listIterator();
        java.lang.String str7 = elements3.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.select.Elements elements9 = elements3.before("#doctype");
        elements3.trimToSize();
        boolean boolean12 = elements3.hasClass("#data");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertNotNull(elementItor5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.jsoup.select.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.select.Evaluator.AttributeWithValueEnding("system", "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n");
        java.lang.String str3 = attributeWithValueEnding2.toString();
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element7 = document5.html("Content-Encoding");
        org.jsoup.select.Elements elements9 = document5.getElementsByIndexEquals((int) (short) -1);
        org.jsoup.select.Elements elements11 = document5.getElementsMatchingText("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan13 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType16 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str19 = document18.id();
        org.jsoup.select.Elements elements20 = document18.previousElementSiblings();
        org.jsoup.nodes.Element element21 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType16, (org.jsoup.nodes.Element) document18);
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str24 = document23.className();
        java.lang.String str25 = document23.outerHtml();
        org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str28 = document27.id();
        java.lang.String str29 = document27.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan31 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean32 = document27.is((org.jsoup.select.Evaluator) indexLessThan31);
        boolean boolean33 = isNthLastOfType16.matches((org.jsoup.nodes.Element) document23, (org.jsoup.nodes.Element) document27);
        java.lang.String str34 = document27.cssSelector();
        org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str37 = document36.className();
        java.lang.String str38 = document36.outerHtml();
        boolean boolean40 = document36.hasSameValue((java.lang.Object) 1);
        boolean boolean41 = indexLessThan13.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document36);
        boolean boolean42 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document5, (org.jsoup.nodes.Element) document27);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[system$=<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    </head>\n    <body>hi!</body>\n</html>]" + "'", str3, "[system$=<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    </head>\n    <body>hi!</body>\n</html>]");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNull(element21);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str25, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "#root" + "'", str34, "#root");
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str38, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.jsoup.nodes.XmlDeclaration xmlDeclaration3 = new org.jsoup.nodes.XmlDeclaration(":matchesOwn(null)", "SYSTEM", false);
        java.lang.String str4 = xmlDeclaration3.getWholeDeclaration();
        java.lang.String str5 = xmlDeclaration3.name();
        java.lang.String str6 = xmlDeclaration3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":matchesOwn(null)" + "'", str5, ":matchesOwn(null)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<?:matchesOwn(null)?>" + "'", str6, "<?:matchesOwn(null)?>");
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType4 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        org.jsoup.nodes.Element element9 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType4, (org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.className();
        java.lang.String str13 = document11.outerHtml();
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.id();
        java.lang.String str17 = document15.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan19 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean20 = document15.is((org.jsoup.select.Evaluator) indexLessThan19);
        boolean boolean21 = isNthLastOfType4.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document15);
        java.lang.String str22 = document15.cssSelector();
        org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str25 = document24.className();
        java.lang.String str26 = document24.outerHtml();
        boolean boolean28 = document24.hasSameValue((java.lang.Object) 1);
        boolean boolean29 = indexLessThan1.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document24);
        org.jsoup.nodes.Document.QuirksMode quirksMode30 = org.jsoup.nodes.Document.QuirksMode.quirks;
        org.jsoup.nodes.Document document31 = document24.quirksMode(quirksMode30);
        boolean boolean33 = document31.hasAttr("<![CDATA[<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>]]>");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element35 = document31.after(":containsData( )");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNull(element9);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#root" + "'", str22, "#root");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str26, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + quirksMode30 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode30.equals(org.jsoup.nodes.Document.QuirksMode.quirks));
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.jsoup.nodes.Element element1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = org.jsoup.parser.Parser.parseFragment("", element1, "", parseErrorList3);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.listIterator();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method15 = request11.method();
        int int16 = parseErrorList7.indexOf((java.lang.Object) request11);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList7.stream();
        boolean boolean18 = parseErrorList3.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        parseErrorList3.ensureCapacity((int) '\000');
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertTrue("'" + method15 + "' != '" + org.jsoup.Connection.Method.GET + "'", method15.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.jsoup.nodes.DataNode dataNode2 = new org.jsoup.nodes.DataNode(":only-of-type", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>=\"#root\"");
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.jsoup.nodes.CDataNode cDataNode1 = new org.jsoup.nodes.CDataNode("hi!hi!");
        java.lang.String str2 = cDataNode1.text();
        java.lang.String str4 = cDataNode1.attr("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!" + "'", str2, "hi!hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType4 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        org.jsoup.nodes.Element element9 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType4, (org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.className();
        java.lang.String str13 = document11.outerHtml();
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.id();
        java.lang.String str17 = document15.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan19 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean20 = document15.is((org.jsoup.select.Evaluator) indexLessThan19);
        boolean boolean21 = isNthLastOfType4.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document15);
        java.lang.String str22 = document15.cssSelector();
        org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str25 = document24.className();
        java.lang.String str26 = document24.outerHtml();
        boolean boolean28 = document24.hasSameValue((java.lang.Object) 1);
        boolean boolean29 = indexLessThan1.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document24);
        org.jsoup.parser.Parser parser30 = document15.parser();
        org.jsoup.select.Elements elements33 = document15.getElementsByAttributeValueStarting("                                   ", "[]");
        org.jsoup.select.Elements elements35 = elements33.prev(":only-of-type");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNull(element9);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#root" + "'", str22, "#root");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str26, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(parser30);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertNotNull(elements35);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.jsoup.nodes.CDataNode cDataNode1 = new org.jsoup.nodes.CDataNode("multipart/form-data");
        org.jsoup.helper.Validate.notNull((java.lang.Object) cDataNode1, "#document");
        java.lang.String str4 = cDataNode1.text();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode6 = cDataNode1.splitText(30000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data" + "'", str4, "multipart/form-data");
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.className();
        java.lang.String str3 = document1.outerHtml();
        boolean boolean5 = document1.hasSameValue((java.lang.Object) 1);
        java.lang.String str6 = document1.tagName();
        org.jsoup.nodes.Element element7 = document1.head();
        java.util.regex.Pattern pattern9 = null;
        org.jsoup.select.Elements elements10 = element7.getElementsByAttributeValueMatching("org.jsoup.HttpStatusException: multipart. Status=100, URL=application/x-www-form-urlencoded", pattern9);
        org.jsoup.nodes.Element element12 = element7.prepend("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<#root value=\"hi!\">\n <html>\n  <head></head>\n  <body>\n   hi!\n  </body>\n </html>\n</#root>");
        org.jsoup.select.Elements elements13 = element12.siblingElements();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str3, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#root" + "'", str6, "#root");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements13);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.select.Elements elements5 = elements3.prev("#text");
        org.jsoup.select.Elements elements7 = elements5.prev("#root");
        org.jsoup.parser.ParseError[] parseErrorArray8 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList9 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9, parseErrorArray8);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.noTracking();
        int int12 = parseErrorList9.indexOf((java.lang.Object) parseErrorList11);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList9.iterator();
        boolean boolean14 = elements5.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        org.jsoup.parser.ParseError parseError15 = null;
        boolean boolean16 = parseErrorList9.add(parseError15);
        org.jsoup.helper.HttpConnection httpConnection17 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request18 = httpConnection17.request();
        org.jsoup.Connection.Request request21 = request18.addHeader("multipart/form-data", "hi!");
        boolean boolean23 = request21.hasHeader("multipart/form-data");
        boolean boolean25 = request21.hasCookie("#text");
        org.jsoup.parser.Parser parser26 = request21.parser();
        org.jsoup.Connection.Request request29 = request21.header("#text", "multipart/form-data");
        boolean boolean30 = parseErrorList9.remove((java.lang.Object) request29);
        org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str33 = document32.id();
        java.lang.String str34 = document32.baseUri();
        org.jsoup.nodes.Element element35 = document32.body();
        org.jsoup.helper.HttpConnection httpConnection36 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request37 = httpConnection36.request();
        org.jsoup.Connection.Request request40 = request37.addHeader("multipart/form-data", "hi!");
        boolean boolean42 = request40.hasHeader("multipart/form-data");
        boolean boolean44 = request40.hasCookie("#text");
        org.jsoup.parser.Parser parser45 = request40.parser();
        org.jsoup.nodes.Document document46 = document32.parser(parser45);
        java.util.List<org.jsoup.nodes.Node> nodeList47 = document46.siblingNodes();
        boolean boolean48 = parseErrorList9.equals((java.lang.Object) document46);
        org.jsoup.nodes.Element element50 = document46.text(":first-of-type");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(parseErrorArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(parser45);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(element50);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        org.jsoup.Connection connection4 = httpConnection0.ignoreContentType(true);
        org.jsoup.Connection connection7 = httpConnection0.cookie("amultipart", "<!#root!>");
        java.io.InputStream inputStream10 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream13 = new org.jsoup.internal.ConstrainableInputStream(inputStream10, 1, (int) (byte) 0);
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream16 = constrainableInputStream13.timeout((long) ' ', (long) (short) 1);
        constrainableInputStream13.close();
        org.jsoup.Connection connection18 = httpConnection0.data("org.jsoup.HttpStatusException: multipart. Status=100, URL=application/x-www-form-urlencoded", "[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream13);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer20 = constrainableInputStream13.readToByteBuffer(0);
            org.junit.Assert.fail("Expected exception of type java.net.SocketTimeoutException; message: Read timeout");
        } catch (java.net.SocketTimeoutException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(constrainableInputStream16);
        org.junit.Assert.assertNotNull(connection18);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class("Content-Encoding");
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str4 = document3.wholeText();
        org.jsoup.select.Elements elements5 = document3.parents();
        org.jsoup.nodes.Element element7 = document3.appendElement("#root=\"\"");
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.wholeText();
        org.jsoup.select.Elements elements11 = document9.parents();
        java.nio.charset.Charset charset12 = document9.charset();
        org.jsoup.select.Elements elements14 = document9.getElementsByIndexGreaterThan((int) '#');
        boolean boolean15 = class1.matches((org.jsoup.nodes.Element) document3, (org.jsoup.nodes.Element) document9);
        java.lang.String str16 = document3.data();
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.isBlock();
        org.jsoup.nodes.Element element5 = new org.jsoup.nodes.Element(tag1, "ultipart");
        boolean boolean6 = tag1.isEmpty();
        java.lang.String str7 = tag1.normalName();
        org.jsoup.select.Evaluator.IsFirstOfType isFirstOfType9 = new org.jsoup.select.Evaluator.IsFirstOfType();
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element13 = document11.val("hi!");
        org.jsoup.nodes.Element element15 = element13.html("");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType18 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str21 = document20.wholeText();
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str24 = document23.className();
        boolean boolean25 = isNthLastOfType18.matches((org.jsoup.nodes.Element) document20, (org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Document document26 = document20.clone();
        document26.setBaseUri("#root");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan30 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType33 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str36 = document35.id();
        org.jsoup.select.Elements elements37 = document35.previousElementSiblings();
        org.jsoup.nodes.Element element38 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType33, (org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str41 = document40.className();
        java.lang.String str42 = document40.outerHtml();
        org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str45 = document44.id();
        java.lang.String str46 = document44.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan48 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean49 = document44.is((org.jsoup.select.Evaluator) indexLessThan48);
        boolean boolean50 = isNthLastOfType33.matches((org.jsoup.nodes.Element) document40, (org.jsoup.nodes.Element) document44);
        java.lang.String str51 = document44.cssSelector();
        org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str54 = document53.className();
        java.lang.String str55 = document53.outerHtml();
        boolean boolean57 = document53.hasSameValue((java.lang.Object) 1);
        boolean boolean58 = indexLessThan30.matches((org.jsoup.nodes.Element) document44, (org.jsoup.nodes.Element) document53);
        org.jsoup.nodes.Element element59 = document26.prependChild((org.jsoup.nodes.Node) document53);
        org.jsoup.nodes.Element element61 = element59.removeClass("#root");
        boolean boolean62 = isFirstOfType9.matches(element13, element59);
        org.jsoup.nodes.Attributes attributes63 = element59.attributes();
        org.jsoup.nodes.FormElement formElement64 = new org.jsoup.nodes.FormElement(tag1, "multipart", attributes63);
        org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str67 = document66.id();
        java.lang.String str68 = document66.baseUri();
        org.jsoup.nodes.Element element70 = document66.toggleClass("multipart");
        org.jsoup.select.Elements elements71 = document66.getAllElements();
        org.jsoup.nodes.FormElement formElement72 = formElement64.addElement((org.jsoup.nodes.Element) document66);
        org.jsoup.nodes.Document document74 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str75 = document74.className();
        java.lang.String str77 = document74.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str78 = document74.normalName();
        document74.setBaseUri("ultipart");
        org.jsoup.nodes.FormElement formElement81 = formElement72.addElement((org.jsoup.nodes.Element) document74);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#document" + "'", str7, "#document");
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(elements37);
        org.junit.Assert.assertNull(element38);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str42, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "#root" + "'", str51, "#root");
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str55, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(element59);
        org.junit.Assert.assertNotNull(element61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(attributes63);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(element70);
        org.junit.Assert.assertNotNull(elements71);
        org.junit.Assert.assertNotNull(formElement72);
        org.junit.Assert.assertNotNull(document74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "#root" + "'", str78, "#root");
        org.junit.Assert.assertNotNull(formElement81);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        org.jsoup.nodes.Node node4 = textNode2.removeAttr("multipart/form-data");
        int int5 = textNode2.childNodeSize();
        java.lang.String str6 = textNode2.nodeName();
        java.lang.String str8 = textNode2.attr("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode10 = textNode2.splitText((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must be not be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.select.Elements elements5 = elements3.prev("#text");
        org.jsoup.select.Elements elements7 = elements5.prev("#root");
        org.jsoup.parser.ParseError[] parseErrorArray8 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList9 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9, parseErrorArray8);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.noTracking();
        int int12 = parseErrorList9.indexOf((java.lang.Object) parseErrorList11);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList9.iterator();
        boolean boolean14 = elements5.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        org.jsoup.parser.ParseError parseError15 = null;
        boolean boolean16 = parseErrorList9.add(parseError15);
        org.jsoup.helper.HttpConnection httpConnection17 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request18 = httpConnection17.request();
        org.jsoup.Connection.Request request21 = request18.addHeader("multipart/form-data", "hi!");
        boolean boolean23 = request21.hasHeader("multipart/form-data");
        boolean boolean25 = request21.hasCookie("#text");
        org.jsoup.parser.Parser parser26 = request21.parser();
        org.jsoup.Connection.Request request29 = request21.header("#text", "multipart/form-data");
        boolean boolean30 = parseErrorList9.remove((java.lang.Object) request29);
        org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str33 = document32.id();
        java.lang.String str34 = document32.baseUri();
        org.jsoup.nodes.Element element35 = document32.body();
        org.jsoup.helper.HttpConnection httpConnection36 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request37 = httpConnection36.request();
        org.jsoup.Connection.Request request40 = request37.addHeader("multipart/form-data", "hi!");
        boolean boolean42 = request40.hasHeader("multipart/form-data");
        boolean boolean44 = request40.hasCookie("#text");
        org.jsoup.parser.Parser parser45 = request40.parser();
        org.jsoup.nodes.Document document46 = document32.parser(parser45);
        java.util.List<org.jsoup.nodes.Node> nodeList47 = document46.siblingNodes();
        boolean boolean48 = parseErrorList9.equals((java.lang.Object) document46);
        boolean boolean50 = document46.hasClass("");
        java.lang.String str51 = document46.ownText();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(parseErrorArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(parser45);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot2 = new org.jsoup.select.Evaluator.AttributeWithValueNot(":eq(-1)", "#doctype");
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.id();
        java.lang.String str6 = document4.baseUri();
        org.jsoup.nodes.Element element9 = document4.attr("", true);
        org.jsoup.nodes.Node node12 = document4.attr("#text", "");
        org.jsoup.nodes.Element element13 = document4.shallowClone();
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.id();
        java.lang.String str17 = document15.baseUri();
        org.jsoup.nodes.Element element18 = document15.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = document15.dataset();
        org.jsoup.nodes.Element element21 = document15.html("#root=\"\"");
        boolean boolean22 = attributeWithValueNot2.matches(element13, (org.jsoup.nodes.Element) document15);
        java.lang.String str23 = attributeWithValueNot2.toString();
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(element9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[:eq(-1)!=#doctype]" + "'", str23, "[:eq(-1)!=#doctype]");
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        boolean boolean6 = elements3.equals((java.lang.Object) 1.0d);
        java.lang.String str7 = elements3.text();
        org.jsoup.nodes.Element element9 = null;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("", element9, "", parseErrorList11);
        boolean boolean13 = parseErrorList11.isEmpty();
        int int14 = parseErrorList11.size();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList15.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList15.parallelStream();
        org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str20 = document19.id();
        org.jsoup.select.Elements elements21 = document19.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor22 = elements21.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor23 = elements21.listIterator();
        org.jsoup.select.Elements elements24 = elements21.empty();
        org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str27 = document26.id();
        org.jsoup.select.Elements elements28 = document26.previousElementSiblings();
        org.jsoup.select.Elements elements30 = elements28.prev("#text");
        boolean boolean31 = elements28.hasText();
        org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str34 = document33.id();
        org.jsoup.select.Elements elements35 = document33.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor36 = elements35.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor37 = elements35.listIterator();
        org.jsoup.select.Elements elements38 = elements35.empty();
        org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str41 = document40.id();
        org.jsoup.select.Elements elements42 = document40.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor43 = elements42.listIterator();
        boolean boolean45 = elements42.equals((java.lang.Object) 1.0d);
        java.lang.String str46 = elements42.text();
        org.jsoup.select.Elements elements48 = elements42.wrap("#root");
        org.jsoup.select.Elements[] elementsArray49 = new org.jsoup.select.Elements[] { elements21, elements28, elements35, elements48 };
        org.jsoup.select.Elements[] elementsArray50 = parseErrorList15.toArray(elementsArray49);
        boolean boolean51 = parseErrorList11.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        boolean boolean52 = elements3.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        boolean boolean54 = elements3.hasAttr(":eq(-1)");
        org.jsoup.select.Elements elements55 = elements3.nextAll();
        org.jsoup.select.Elements elements56 = elements3.remove();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(elementItor22);
        org.junit.Assert.assertNotNull(elementItor23);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(elementItor36);
        org.junit.Assert.assertNotNull(elementItor37);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertNotNull(elementItor43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertNotNull(elementsArray49);
        org.junit.Assert.assertNotNull(elementsArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(elements55);
        org.junit.Assert.assertNotNull(elements56);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        java.io.InputStream inputStream2 = null;
        org.jsoup.parser.Parser parser5 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse(inputStream2, "", "#root", parser5);
        org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "#root", parser5);
        org.jsoup.nodes.Document document8 = document7.normalise();
        java.lang.String str9 = document8.normalName();
        org.jsoup.select.Elements elements11 = document8.getElementsMatchingOwnText("#root");
        org.junit.Assert.assertNotNull(parser5);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#root" + "'", str9, "#root");
        org.junit.Assert.assertNotNull(elements11);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        org.jsoup.Connection connection4 = httpConnection0.ignoreContentType(true);
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request6 = httpConnection5.request();
        org.jsoup.Connection.Request request9 = request6.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = request9.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = request9.headers();
        java.net.Proxy proxy12 = request9.proxy();
        org.jsoup.Connection connection13 = httpConnection0.request(request9);
        org.jsoup.Connection.KeyVal keyVal15 = httpConnection0.data("#root");
        org.jsoup.parser.TokenQueue tokenQueue17 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        java.lang.String[] strArray22 = new java.lang.String[] { "multipart/form-data", "Content-Encoding", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36" };
        java.lang.String str23 = tokenQueue17.consumeToAny(strArray22);
        org.jsoup.Connection connection24 = httpConnection0.data(strArray22);
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connection13);
        org.junit.Assert.assertNull(keyVal15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(connection24);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist();
        org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true);
        org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist1);
        java.lang.String str5 = org.jsoup.Jsoup.clean("", whitelist1);
        org.junit.Assert.assertNotNull(whitelist3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.jsoup.helper.HttpConnection.KeyVal keyVal2 = org.jsoup.helper.HttpConnection.KeyVal.create("#root", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.helper.HttpConnection.KeyVal keyVal4 = keyVal2.key("Content-Encoding");
        org.jsoup.Connection.KeyVal keyVal6 = keyVal4.value("multipart");
        org.jsoup.Connection.KeyVal keyVal8 = keyVal6.value("[system$=<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    </head>\n    <body>hi!</body>\n</html>]");
        org.junit.Assert.assertNotNull(keyVal2);
        org.junit.Assert.assertNotNull(keyVal4);
        org.junit.Assert.assertNotNull(keyVal6);
        org.junit.Assert.assertNotNull(keyVal8);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.jsoup.select.Evaluator.ContainsText containsText1 = new org.jsoup.select.Evaluator.ContainsText("Content-Encoding");
        java.lang.String str2 = containsText1.toString();
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.id();
        int int6 = document4.elementSiblingIndex();
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("[]", "#text");
        boolean boolean10 = containsText1.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document9);
        org.jsoup.nodes.Element element11 = document9.parent();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements12 = element11.getAllElements();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":contains(content-encoding)" + "'", str2, ":contains(content-encoding)");
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(element11);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "hi!", "", "multipart/form-data", "hi!" };
        boolean boolean9 = org.jsoup.internal.StringUtil.in("", strArray8);
        boolean boolean10 = org.jsoup.internal.StringUtil.in("", strArray8);
        java.lang.String str12 = org.jsoup.internal.StringUtil.join(strArray8, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.select.Selector.SelectorParseException selectorParseException13 = new org.jsoup.select.Selector.SelectorParseException("org.jsoup.HttpStatusException: multipart. Status=100, URL=application/x-www-form-urlencoded", (java.lang.Object[]) strArray8);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!" + "'", str12, "hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.jsoup.select.Elements elements1 = new org.jsoup.select.Elements(0);
        org.jsoup.select.Elements elements4 = elements1.attr(":eq(-1)", "[]");
        org.jsoup.select.Elements elements5 = elements4.prevAll();
        org.jsoup.select.Evaluator.IndexEquals indexEquals7 = new org.jsoup.select.Evaluator.IndexEquals((int) (byte) -1);
        java.lang.String str8 = indexEquals7.toString();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType11 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.className();
        java.lang.String str15 = document13.outerHtml();
        boolean boolean17 = document13.hasSameValue((java.lang.Object) 1);
        java.lang.String str18 = document13.tagName();
        org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element22 = document20.val("hi!");
        boolean boolean23 = isNthLastOfType11.matches((org.jsoup.nodes.Element) document13, element22);
        java.lang.String str24 = document13.wholeText();
        org.jsoup.nodes.Element element26 = document13.removeClass("#root=\"\"");
        org.jsoup.nodes.Document document27 = document13.ownerDocument();
        org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str30 = document29.className();
        java.lang.String str31 = document29.outerHtml();
        boolean boolean33 = document29.hasSameValue((java.lang.Object) 1);
        java.lang.String str34 = document29.tagName();
        org.jsoup.nodes.Element element35 = document29.shallowClone();
        boolean boolean36 = indexEquals7.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document29);
        document29.title("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        boolean boolean39 = elements5.equals((java.lang.Object) document29);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + ":eq(-1)" + "'", str8, ":eq(-1)");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str15, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#root" + "'", str18, "#root");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str31, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "#root" + "'", str34, "#root");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.helper.HttpConnection httpConnection19 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request20 = httpConnection19.request();
        org.jsoup.Connection connection22 = httpConnection19.referrer("multipart/form-data");
        org.jsoup.Connection.Response response23 = httpConnection19.response();
        org.jsoup.Connection connection25 = httpConnection19.ignoreContentType(false);
        java.io.InputStream inputStream28 = null;
        org.jsoup.parser.Parser parser31 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse(inputStream28, "", "#root", parser31);
        org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "#root", parser31);
        org.jsoup.Connection connection34 = connection25.parser(parser31);
        org.jsoup.Connection connection35 = httpConnection0.parser(parser31);
        org.jsoup.Connection.Method method36 = org.jsoup.Connection.Method.DELETE;
        org.jsoup.Connection connection37 = httpConnection0.method(method36);
        org.jsoup.Connection connection40 = httpConnection0.proxy("#:first-child", (int) (short) 1);
        java.io.InputStream inputStream41 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream44 = new org.jsoup.internal.ConstrainableInputStream(inputStream41, 1, (int) (byte) 0);
        org.jsoup.parser.Parser parser47 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document48 = org.jsoup.helper.DataUtil.load(inputStream41, ":eq(-1)", "Content-Encoding", parser47);
        org.jsoup.parser.ParseErrorList parseErrorList49 = parser47.getErrors();
        org.jsoup.Connection connection50 = httpConnection0.parser(parser47);
        org.jsoup.Connection connection52 = httpConnection0.referrer("hi!hi!");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(connection22);
        org.junit.Assert.assertNotNull(response23);
        org.junit.Assert.assertNotNull(connection25);
        org.junit.Assert.assertNotNull(parser31);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(connection34);
        org.junit.Assert.assertNotNull(connection35);
        org.junit.Assert.assertTrue("'" + method36 + "' != '" + org.jsoup.Connection.Method.DELETE + "'", method36.equals(org.jsoup.Connection.Method.DELETE));
        org.junit.Assert.assertNotNull(connection37);
        org.junit.Assert.assertNotNull(connection40);
        org.junit.Assert.assertNotNull(parser47);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertNotNull(connection50);
        org.junit.Assert.assertNotNull(connection52);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType2 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.wholeText();
        org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str8 = document7.className();
        boolean boolean9 = isNthLastOfType2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document7);
        org.jsoup.nodes.Document document10 = document4.clone();
        org.jsoup.select.Elements elements12 = document4.getElementsByIndexEquals((int) (short) 10);
        java.lang.String str13 = document4.data();
        org.jsoup.select.Elements elements14 = document4.siblingElements();
        org.jsoup.nodes.Attributes attributes15 = document4.attributes();
        org.jsoup.select.Elements elements18 = document4.getElementsByAttributeValueEnding("[mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36*=#doctype]", ":first-child");
        boolean boolean20 = document4.hasAttr("org.jsoup.select.Selector$SelectorParseException: :lt(52)");
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.jsoup.select.Evaluator.ContainsText containsText1 = new org.jsoup.select.Evaluator.ContainsText("Content-Encoding");
        org.jsoup.nodes.Element element2 = null;
        org.jsoup.select.Elements elements3 = org.jsoup.select.Collector.collect((org.jsoup.select.Evaluator) containsText1, element2);
        org.jsoup.select.Evaluator.IsRoot isRoot5 = new org.jsoup.select.Evaluator.IsRoot();
        java.lang.String str6 = isRoot5.toString();
        org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str9 = document8.id();
        java.lang.String str10 = document8.baseUri();
        org.jsoup.nodes.Element element13 = document8.attr("", true);
        java.lang.String str14 = document8.title();
        org.jsoup.nodes.Element element16 = document8.val("Content-Encoding");
        org.jsoup.nodes.Element element18 = document8.appendElement("[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
        org.jsoup.nodes.Element element20 = element18.after(":containsData( )");
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("", "#doctype");
        boolean boolean24 = isRoot5.matches(element20, (org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Element element25 = element20.lastElementSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element26 = elements3.set((int) '\uffff', element25);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 65535 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + ":root" + "'", str6, ":root");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(element25);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response1 = httpConnection0.response();
        org.jsoup.Connection.Method method2 = org.jsoup.Connection.Method.OPTIONS;
        boolean boolean3 = method2.hasBody();
        org.jsoup.Connection.Response response4 = response1.method(method2);
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request6 = httpConnection5.request();
        org.jsoup.Connection.Request request9 = request6.addHeader("multipart/form-data", "hi!");
        boolean boolean11 = request9.hasHeader("multipart/form-data");
        boolean boolean13 = request9.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method14 = request9.method();
        org.jsoup.Connection.Method method15 = request9.method();
        org.jsoup.Connection.Response response16 = response1.method(method15);
        java.lang.String str17 = response16.statusMessage();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertTrue("'" + method2 + "' != '" + org.jsoup.Connection.Method.OPTIONS + "'", method2.equals(org.jsoup.Connection.Method.OPTIONS));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + method14 + "' != '" + org.jsoup.Connection.Method.GET + "'", method14.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method15 + "' != '" + org.jsoup.Connection.Method.GET + "'", method15.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        boolean boolean3 = document1.hasText();
        java.lang.String str4 = document1.nodeName();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#document" + "'", str4, "#document");
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        java.io.InputStream inputStream0 = null;
        org.jsoup.parser.Parser parser3 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse(inputStream0, "", "#root", parser3);
        org.jsoup.parser.ParseErrorList parseErrorList5 = parser3.getErrors();
        org.jsoup.parser.ParseErrorList parseErrorList6 = parser3.getErrors();
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator7 = parseErrorList6.spliterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList6.parallelStream();
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertNotNull(parseErrorSpliterator7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attribute attribute3 = org.jsoup.nodes.Attribute.createFromEncoded("#root", "");
        org.jsoup.nodes.Attributes attributes4 = attributes0.put(attribute3);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor9 = elements8.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor10 = elements8.listIterator();
        org.jsoup.select.Elements elements11 = elements8.empty();
        boolean boolean12 = attributes4.equals((java.lang.Object) elements8);
        org.jsoup.nodes.Attributes attributes15 = attributes4.add("#root=\"\"", " hi!=\"multipart/form-data\"");
        boolean boolean16 = attributes15.isEmpty();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator17 = attributes15.spliterator();
        java.lang.String str19 = attributes15.get(" ");
        org.junit.Assert.assertNotNull(attribute3);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elementItor9);
        org.junit.Assert.assertNotNull(elementItor10);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(attributeSpliterator17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi", "");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element3 = document1.val("hi!");
        org.jsoup.nodes.Element element4 = document1.clone();
        org.jsoup.select.Elements elements6 = element4.getElementsMatchingText("");
        org.jsoup.select.Elements elements8 = element4.getElementsContainingText("#text");
        org.jsoup.select.Elements elements10 = elements8.addClass("Content-Encoding");
        org.jsoup.select.Elements elements12 = elements10.nextAll("[system$=<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    </head>\n    <body>hi!</body>\n</html>]");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response1 = httpConnection0.response();
        java.lang.String str2 = response1.statusMessage();
        java.lang.String str4 = response1.header("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.Connection.Response response7 = response1.header("content-encoding=\"#root\"", "<!hi!!>");
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(response7);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.formatAsBlock();
        boolean boolean3 = tag1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse(file0, "<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.getAbsolutePath()\" because \"in\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes3 = attributes0.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes6 = attributes0.add("hi!", "multipart/form-data");
        org.jsoup.nodes.Attributes attributes9 = null;
        org.jsoup.nodes.Attribute attribute10 = new org.jsoup.nodes.Attribute("Content-Encoding", "#root", attributes9);
        java.lang.String str11 = attribute10.getValue();
        org.jsoup.nodes.Attributes attributes12 = attributes0.put(attribute10);
        org.jsoup.parser.Tag tag14 = new org.jsoup.parser.Tag("#document");
        boolean boolean15 = tag14.isInline();
        org.jsoup.nodes.Attributes attributes17 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes20 = attributes17.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes23 = attributes17.add("hi!", "multipart/form-data");
        attributes23.normalize();
        org.jsoup.nodes.Element element25 = new org.jsoup.nodes.Element(tag14, "[public=<!#root!>]", attributes23);
        attributes12.addAll(attributes23);
        org.jsoup.nodes.Attributes attributes27 = new org.jsoup.nodes.Attributes();
        int int28 = attributes27.size();
        attributes23.addAll(attributes27);
        java.lang.String str31 = attributes23.get("<html>\n <head></head>\n <body>\n  Content-Encoding=\"#root\"\n </body>\n</html>");
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#root" + "'", str11, "#root");
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertNotNull(attributes23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method5 = request1.method();
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection6.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection connection10 = httpConnection6.ignoreContentType(true);
        org.jsoup.helper.HttpConnection httpConnection11 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request12 = httpConnection11.request();
        org.jsoup.Connection.Request request15 = request12.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = request15.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = request15.headers();
        java.net.Proxy proxy18 = request15.proxy();
        org.jsoup.Connection connection19 = httpConnection6.request(request15);
        org.jsoup.Connection.Method method20 = request15.method();
        org.jsoup.Connection.Request request21 = request1.method(method20);
        java.util.List<java.lang.String> strList23 = request1.headers("<!DOCTYPE hi! :eq(-1) \"<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\" \"#root\">\n<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + method5 + "' != '" + org.jsoup.Connection.Method.GET + "'", method5.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(connection10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(proxy18);
        org.junit.Assert.assertNotNull(connection19);
        org.junit.Assert.assertTrue("'" + method20 + "' != '" + org.jsoup.Connection.Method.GET + "'", method20.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.nodes.Document.QuirksMode quirksMode4 = document1.quirksMode();
        boolean boolean6 = document1.hasClass("multipart/form-data");
        org.jsoup.parser.Tag tag7 = document1.tag();
        org.jsoup.select.Elements elements9 = document1.getElementsByAttribute("[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.outline();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings10.outline(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings10.clone();
        org.jsoup.nodes.Document document15 = document1.outputSettings(outputSettings10);
        org.jsoup.helper.HttpConnection.KeyVal keyVal18 = org.jsoup.helper.HttpConnection.KeyVal.create("                                   ", ":matchesOwn(null)");
        java.lang.String str19 = keyVal18.contentType();
        boolean boolean20 = document1.equals((java.lang.Object) keyVal18);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertTrue("'" + quirksMode4 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode4.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertNotNull(keyVal18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        java.io.InputStream inputStream0 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream3 = new org.jsoup.internal.ConstrainableInputStream(inputStream0, 1, (int) (byte) 0);
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream6 = constrainableInputStream3.timeout((long) ' ', (long) (short) 1);
        constrainableInputStream3.close();
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream10 = org.jsoup.internal.ConstrainableInputStream.wrap((java.io.InputStream) constrainableInputStream3, (int) '4', (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer12 = org.jsoup.helper.DataUtil.readToByteBuffer((java.io.InputStream) constrainableInputStream10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.net.SocketTimeoutException; message: Read timeout");
        } catch (java.net.SocketTimeoutException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(constrainableInputStream6);
        org.junit.Assert.assertNotNull(constrainableInputStream10);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.listIterator();
        java.lang.String str4 = parseErrorList1.toString();
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor9 = elements8.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor10 = elements8.listIterator();
        org.jsoup.select.Elements elements12 = elements8.next("#text");
        org.jsoup.nodes.Element element14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.List<org.jsoup.nodes.Node> nodeList17 = org.jsoup.parser.Parser.parseFragment("", element14, "", parseErrorList16);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        boolean boolean19 = elements8.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        int int20 = parseErrorList1.lastIndexOf((java.lang.Object) elements8);
        org.jsoup.select.Elements elements22 = elements8.tagName("#document");
        org.jsoup.select.Elements elements23 = elements8.empty();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elementItor9);
        org.junit.Assert.assertNotNull(elementItor10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(elements23);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.select.Elements elements5 = elements3.prev("#text");
        org.jsoup.select.Elements elements7 = elements5.prev("#root");
        org.jsoup.parser.ParseError[] parseErrorArray8 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList9 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9, parseErrorArray8);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.noTracking();
        int int12 = parseErrorList9.indexOf((java.lang.Object) parseErrorList11);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList9.iterator();
        boolean boolean14 = elements5.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        org.jsoup.parser.ParseError parseError15 = null;
        boolean boolean16 = parseErrorList9.add(parseError15);
        org.jsoup.nodes.Attributes attributes19 = null;
        org.jsoup.nodes.Attribute attribute20 = new org.jsoup.nodes.Attribute("Content-Encoding", "#root", attributes19);
        java.lang.String str21 = attribute20.getValue();
        java.lang.String str23 = attribute20.setValue("#root");
        java.lang.String str24 = attribute20.getKey();
        boolean boolean25 = parseErrorList9.equals((java.lang.Object) attribute20);
        attribute20.setKey("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<#root value=\"hi!\">\n <html>\n  <head></head>\n  <body>\n   hi!\n  </body>\n </html>\n</#root>");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(parseErrorArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#root" + "'", str21, "#root");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "#root" + "'", str23, "#root");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Content-Encoding" + "'", str24, "Content-Encoding");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str3 = document2.id();
        java.lang.String str4 = document2.baseUri();
        org.jsoup.nodes.Element element5 = document2.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = document2.dataset();
        org.jsoup.Connection connection7 = httpConnection0.data(strMap6);
        java.io.InputStream inputStream10 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream13 = new org.jsoup.internal.ConstrainableInputStream(inputStream10, 1, (int) (byte) 0);
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream16 = constrainableInputStream13.timeout((long) ' ', (long) (short) 1);
        constrainableInputStream13.close();
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream20 = org.jsoup.internal.ConstrainableInputStream.wrap((java.io.InputStream) constrainableInputStream13, (int) '4', (int) (short) 0);
        org.jsoup.Connection connection21 = connection7.data("[]", "Content-Encoding=\"#root\"", (java.io.InputStream) constrainableInputStream13);
        java.io.OutputStream outputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = constrainableInputStream13.transferTo(outputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: out");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(element5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(constrainableInputStream16);
        org.junit.Assert.assertNotNull(constrainableInputStream20);
        org.junit.Assert.assertNotNull(connection21);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.jsoup.nodes.CDataNode cDataNode1 = new org.jsoup.nodes.CDataNode("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str2 = cDataNode1.nodeName();
        boolean boolean3 = cDataNode1.isBlank();
        java.lang.String str4 = cDataNode1.toString();
        java.lang.String str5 = cDataNode1.text();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "#cdata" + "'", str2, "#cdata");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "<![CDATA[<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>]]>" + "'", str4, "<![CDATA[<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>]]>");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str5, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.jsoup.select.Evaluator.IsNthOfType isNthOfType2 = new org.jsoup.select.Evaluator.IsNthOfType((int) (short) 100, (int) 'm');
        org.jsoup.parser.Tag tag4 = new org.jsoup.parser.Tag("#document");
        boolean boolean5 = tag4.formatAsBlock();
        java.lang.String str6 = tag4.toString();
        org.jsoup.nodes.Attributes attributes8 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes11 = attributes8.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes14 = attributes8.add("hi!", "multipart/form-data");
        java.lang.String str15 = attributes14.html();
        org.jsoup.nodes.Attributes attributes16 = attributes14.clone();
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor17 = attributes14.iterator();
        org.jsoup.nodes.PseudoTextElement pseudoTextElement18 = new org.jsoup.nodes.PseudoTextElement(tag4, "ultipart", attributes14);
        org.jsoup.select.Elements elements19 = org.jsoup.select.Collector.collect((org.jsoup.select.Evaluator) isNthOfType2, (org.jsoup.nodes.Element) pseudoTextElement18);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#document" + "'", str6, "#document");
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + " hi!=\"multipart/form-data\"" + "'", str15, " hi!=\"multipart/form-data\"");
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertNotNull(attributeItor17);
        org.junit.Assert.assertNotNull(elements19);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("amultipart/form-data");
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse(file0, "[#declaration!=content-encoding]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.getAbsolutePath()\" because \"in\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.jsoup.nodes.TextNode textNode1 = org.jsoup.nodes.TextNode.createFromEncoded("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>=\"#root\"");
        boolean boolean2 = textNode1.isBlank();
        org.junit.Assert.assertNotNull(textNode1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        boolean boolean8 = request4.hasCookie("#text");
        org.jsoup.parser.Parser parser9 = request4.parser();
        org.jsoup.Connection.Request request12 = request4.header("#text", "multipart/form-data");
        boolean boolean15 = request12.hasHeaderWithValue(":nth-last-of-type(100n-1)", "multipart/form-data");
        org.jsoup.helper.HttpConnection.KeyVal keyVal18 = org.jsoup.helper.HttpConnection.KeyVal.create("SYSTEM", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str19 = keyVal18.value();
        org.jsoup.helper.HttpConnection.KeyVal keyVal21 = keyVal18.value("");
        java.io.InputStream inputStream22 = keyVal21.inputStream();
        org.jsoup.Connection.Request request23 = request12.data((org.jsoup.Connection.KeyVal) keyVal21);
        org.jsoup.Connection.Request request26 = request23.cookie("Content-Encoding=\"#root\"", "");
        java.net.URL uRL27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Request request28 = request26.url(uRL27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parser9);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(keyVal18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(keyVal21);
        org.junit.Assert.assertNull(inputStream22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request26);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.jsoup.nodes.Comment comment2 = new org.jsoup.nodes.Comment("", ":eq(-1)");
        java.lang.String str3 = comment2.nodeName();
        java.lang.String str4 = comment2.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.XmlDeclaration xmlDeclaration5 = comment2.asXmlDeclaration();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Range [1, -1) out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#comment" + "'", str3, "#comment");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.jsoup.helper.Validate.isFalse(false, "Content-Type=#declaration");
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = request4.multiHeaders();
        org.jsoup.Connection.Request request7 = request4.ignoreHttpErrors(true);
        java.net.URL uRL8 = request7.url();
        int int9 = request7.maxBodySize();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = request7.multiHeaders();
        org.jsoup.helper.HttpConnection httpConnection11 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request12 = httpConnection11.request();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = null;
        org.jsoup.Connection connection14 = httpConnection11.sslSocketFactory(sSLSocketFactory13);
        org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str17 = document16.id();
        java.lang.String str18 = document16.baseUri();
        org.jsoup.nodes.Element element19 = document16.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = document16.dataset();
        org.jsoup.Connection connection21 = httpConnection11.cookies(strMap20);
        org.jsoup.Connection.Request request22 = connection21.request();
        org.jsoup.Connection.Method method23 = org.jsoup.Connection.Method.OPTIONS;
        org.jsoup.Connection.Request request24 = request22.method(method23);
        org.jsoup.Connection.Request request25 = request7.method(method23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = request7.multiHeaders();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNull(uRL8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1048576 + "'", int9 == 1048576);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(connection14);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(connection21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertTrue("'" + method23 + "' != '" + org.jsoup.Connection.Method.OPTIONS + "'", method23.equals(org.jsoup.Connection.Method.OPTIONS));
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(strMap26);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.select.Elements elements5 = elements3.prev("#text");
        org.jsoup.select.Elements elements7 = elements5.prev("#root");
        boolean boolean9 = elements5.hasClass("system");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.jsoup.helper.Validate.notEmpty(":last-child", "SYSTEM");
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        org.jsoup.Connection connection4 = httpConnection0.ignoreContentType(true);
        java.io.InputStream inputStream7 = null;
        org.jsoup.Connection connection9 = httpConnection0.data("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "Content-Encoding", inputStream7, "Content-Encoding");
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection connection13 = httpConnection10.referrer("multipart/form-data");
        org.jsoup.Connection.Response response14 = httpConnection10.response();
        org.jsoup.Connection connection16 = httpConnection10.ignoreContentType(false);
        org.jsoup.Connection.Request request17 = httpConnection10.request();
        org.jsoup.Connection connection20 = httpConnection10.cookie(":lt(52)", "multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection21 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = null;
        org.jsoup.Connection connection23 = httpConnection21.sslSocketFactory(sSLSocketFactory22);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory24 = null;
        org.jsoup.Connection connection25 = httpConnection21.sslSocketFactory(sSLSocketFactory24);
        org.jsoup.Connection.Request request26 = httpConnection21.request();
        org.jsoup.helper.HttpConnection httpConnection27 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request28 = httpConnection27.request();
        org.jsoup.Connection.Request request31 = request28.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = request31.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = request31.cookies();
        org.jsoup.Connection connection34 = httpConnection21.headers(strMap33);
        org.jsoup.helper.HttpConnection.KeyVal keyVal37 = org.jsoup.helper.HttpConnection.KeyVal.create("#root", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.Connection.KeyVal[] keyValArray38 = new org.jsoup.Connection.KeyVal[] { keyVal37 };
        java.util.ArrayList<org.jsoup.Connection.KeyVal> keyValList39 = new java.util.ArrayList<org.jsoup.Connection.KeyVal>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList39, keyValArray38);
        org.jsoup.Connection connection41 = connection34.data((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList39);
        org.jsoup.Connection connection42 = httpConnection10.data((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList39);
        org.jsoup.Connection connection43 = httpConnection0.data((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList39);
        org.jsoup.Connection connection46 = httpConnection0.data("application/x-www-form-urlencoded", ":eq(-1)");
        org.jsoup.Connection connection48 = httpConnection0.followRedirects(false);
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(connection13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertNotNull(connection16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(connection20);
        org.junit.Assert.assertNotNull(connection23);
        org.junit.Assert.assertNotNull(connection25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(connection34);
        org.junit.Assert.assertNotNull(keyVal37);
        org.junit.Assert.assertNotNull(keyValArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(connection41);
        org.junit.Assert.assertNotNull(connection42);
        org.junit.Assert.assertNotNull(connection43);
        org.junit.Assert.assertNotNull(connection46);
        org.junit.Assert.assertNotNull(connection48);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        java.io.InputStream inputStream0 = null;
        org.jsoup.parser.Parser parser3 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse(inputStream0, "", "#root", parser3);
        org.jsoup.parser.ParseErrorList parseErrorList5 = parser3.getErrors();
        org.jsoup.parser.ParseErrorList parseErrorList6 = parser3.getErrors();
        boolean boolean7 = parseErrorList6.isEmpty();
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes1 = attributes0.clone();
        attributes1.remove("#root");
        boolean boolean4 = attributes1.isEmpty();
        org.jsoup.nodes.DataNode dataNode6 = new org.jsoup.nodes.DataNode("");
        java.lang.String str7 = dataNode6.getWholeData();
        org.jsoup.nodes.Node node9 = dataNode6.removeAttr("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        boolean boolean10 = attributes1.equals((java.lang.Object) "hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        org.jsoup.nodes.Attributes attributes13 = attributes1.add("&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n  hi!\n &lt;/body&gt;\n&lt;/html&gt;=\"#root\"", "[:eq(-1)!=#doctype]");
        attributes13.remove(":matches(null)");
        org.junit.Assert.assertNotNull(attributes1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(attributes13);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.jsoup.nodes.Element element1 = new org.jsoup.nodes.Element(":nth-last-of-type(100n-1)");
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean3 = tokenQueue1.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        char char4 = tokenQueue1.consume();
        org.jsoup.parser.TokenQueue tokenQueue6 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean8 = tokenQueue6.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        char char9 = tokenQueue6.consume();
        char[] charArray10 = new char[] {};
        boolean boolean11 = tokenQueue6.matchesAny(charArray10);
        boolean boolean12 = tokenQueue1.matchesAny(charArray10);
        boolean boolean13 = tokenQueue1.isEmpty();
        java.lang.String str15 = tokenQueue1.consumeTo(".system");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'm' + "'", char4 == 'm');
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'm' + "'", char9 == 'm');
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ultipart/form-data" + "'", str15, "ultipart/form-data");
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.jsoup.parser.ParseErrorList parseErrorList0 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor1 = parseErrorList0.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList0.parallelStream();
        boolean boolean4 = parseErrorList0.contains((java.lang.Object) "#text");
        java.lang.String str5 = parseErrorList0.toString();
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator6 = parseErrorList0.spliterator();
        org.junit.Assert.assertNotNull(parseErrorList0);
        org.junit.Assert.assertNotNull(parseErrorItor1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(parseErrorSpliterator6);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.jsoup.nodes.Element element1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = org.jsoup.parser.Parser.parseFragment("", element1, "", parseErrorList3);
        boolean boolean5 = parseErrorList3.isEmpty();
        int int6 = parseErrorList3.size();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList7.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream9 = parseErrorList7.parallelStream();
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.id();
        org.jsoup.select.Elements elements13 = document11.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor14 = elements13.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor15 = elements13.listIterator();
        org.jsoup.select.Elements elements16 = elements13.empty();
        org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str19 = document18.id();
        org.jsoup.select.Elements elements20 = document18.previousElementSiblings();
        org.jsoup.select.Elements elements22 = elements20.prev("#text");
        boolean boolean23 = elements20.hasText();
        org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str26 = document25.id();
        org.jsoup.select.Elements elements27 = document25.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor28 = elements27.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor29 = elements27.listIterator();
        org.jsoup.select.Elements elements30 = elements27.empty();
        org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str33 = document32.id();
        org.jsoup.select.Elements elements34 = document32.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor35 = elements34.listIterator();
        boolean boolean37 = elements34.equals((java.lang.Object) 1.0d);
        java.lang.String str38 = elements34.text();
        org.jsoup.select.Elements elements40 = elements34.wrap("#root");
        org.jsoup.select.Elements[] elementsArray41 = new org.jsoup.select.Elements[] { elements13, elements20, elements27, elements40 };
        org.jsoup.select.Elements[] elementsArray42 = parseErrorList7.toArray(elementsArray41);
        boolean boolean43 = parseErrorList3.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList7.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNotNull(parseErrorStream9);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elementItor14);
        org.junit.Assert.assertNotNull(elementItor15);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertNotNull(elementItor28);
        org.junit.Assert.assertNotNull(elementItor29);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(elementItor35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(elements40);
        org.junit.Assert.assertNotNull(elementsArray41);
        org.junit.Assert.assertNotNull(elementsArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(parseErrorStream44);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        java.io.InputStream inputStream2 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal3 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream2);
        java.io.InputStream inputStream4 = keyVal3.inputStream();
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        org.jsoup.Connection connection7 = httpConnection5.sslSocketFactory(sSLSocketFactory6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = null;
        org.jsoup.Connection connection9 = httpConnection5.sslSocketFactory(sSLSocketFactory8);
        org.jsoup.Connection.Request request10 = httpConnection5.request();
        org.jsoup.helper.HttpConnection httpConnection11 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request12 = httpConnection11.request();
        org.jsoup.Connection.Request request15 = request12.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = request15.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = request15.cookies();
        org.jsoup.Connection connection18 = httpConnection5.headers(strMap17);
        java.io.InputStream inputStream21 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream24 = new org.jsoup.internal.ConstrainableInputStream(inputStream21, 1, (int) (byte) 0);
        org.jsoup.Connection connection25 = httpConnection5.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream24);
        org.jsoup.helper.HttpConnection.KeyVal keyVal26 = keyVal3.inputStream((java.io.InputStream) constrainableInputStream24);
        boolean boolean27 = keyVal26.hasInputStream();
        org.jsoup.Connection.KeyVal keyVal29 = keyVal26.value("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>");
        org.jsoup.helper.HttpConnection.KeyVal keyVal31 = keyVal26.key("org.jsoup.HttpStatusException: Content-Type. Status=-1, URL=#declaration");
        org.junit.Assert.assertNotNull(keyVal3);
        org.junit.Assert.assertNull(inputStream4);
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(connection25);
        org.junit.Assert.assertNotNull(keyVal26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(keyVal29);
        org.junit.Assert.assertNotNull(keyVal31);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request7 = httpConnection6.request();
        org.jsoup.Connection.Request request10 = request7.addHeader("multipart/form-data", "hi!");
        boolean boolean12 = request10.hasHeader("multipart/form-data");
        boolean boolean14 = request10.hasHeader("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection15 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request16 = httpConnection15.request();
        org.jsoup.Connection.Request request19 = request16.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method20 = request16.method();
        org.jsoup.Connection.Request request21 = request10.method(method20);
        org.jsoup.Connection.Request request24 = request21.addHeader(":first-child", ":contains(content-encoding)");
        java.io.InputStream inputStream25 = null;
        org.jsoup.parser.Parser parser28 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse(inputStream25, "", "#root", parser28);
        org.jsoup.Connection.Request request30 = request24.parser(parser28);
        org.jsoup.Connection.Request request31 = request5.parser(parser28);
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertTrue("'" + method20 + "' != '" + org.jsoup.Connection.Method.GET + "'", method20.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(parser28);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(request31);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        org.jsoup.Connection.KeyVal[] keyValArray6 = new org.jsoup.Connection.KeyVal[] {};
        java.util.ArrayList<org.jsoup.Connection.KeyVal> keyValList7 = new java.util.ArrayList<org.jsoup.Connection.KeyVal>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList7, keyValArray6);
        org.jsoup.Connection connection9 = httpConnection0.data((java.util.Collection<org.jsoup.Connection.KeyVal>) keyValList7);
        java.io.InputStream inputStream12 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream15 = new org.jsoup.internal.ConstrainableInputStream(inputStream12, 1, (int) (byte) 0);
        constrainableInputStream15.close();
        org.jsoup.Connection connection17 = httpConnection0.data("hi!hi!", "#declaration", (java.io.InputStream) constrainableInputStream15);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.internal.ConstrainableInputStream constrainableInputStream20 = new org.jsoup.internal.ConstrainableInputStream((java.io.InputStream) constrainableInputStream15, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Buffer size <= 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(keyValArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(connection17);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        java.net.URL uRL5 = response4.url();
        org.jsoup.Connection.Response response7 = response4.charset("PUBLIC");
        int int8 = response4.statusCode();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNull(uRL5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory2 = null;
        org.jsoup.Connection connection3 = httpConnection0.sslSocketFactory(sSLSocketFactory2);
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.id();
        java.lang.String str7 = document5.baseUri();
        org.jsoup.nodes.Element element8 = document5.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = document5.dataset();
        org.jsoup.Connection connection10 = httpConnection0.cookies(strMap9);
        org.jsoup.Connection.Response response11 = connection10.response();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(connection10);
        org.junit.Assert.assertNotNull(response11);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.outline();
        int int2 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings.Syntax syntax3 = org.jsoup.nodes.Document.OutputSettings.Syntax.html;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.syntax(syntax3);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings4.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.outline(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + syntax3 + "' != '" + org.jsoup.nodes.Document.OutputSettings.Syntax.html + "'", syntax3.equals(org.jsoup.nodes.Document.OutputSettings.Syntax.html));
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings7);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.jsoup.helper.HttpConnection.KeyVal keyVal2 = org.jsoup.helper.HttpConnection.KeyVal.create(" ", "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
        boolean boolean3 = keyVal2.hasInputStream();
        java.lang.String str4 = keyVal2.value();
        org.junit.Assert.assertNotNull(keyVal2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!" + "'", str4, "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.isBlock();
        org.jsoup.nodes.Element element5 = new org.jsoup.nodes.Element(tag1, "ultipart");
        java.lang.String str6 = tag1.normalName();
        java.lang.String str7 = tag1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#document" + "'", str6, "#document");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#document" + "'", str7, "#document");
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.jsoup.nodes.DataNode dataNode2 = org.jsoup.nodes.DataNode.createFromEncoded("#text", "");
        java.lang.String str3 = dataNode2.getWholeData();
        org.jsoup.nodes.DataNode dataNode5 = dataNode2.setWholeData("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.nodes.DataNode dataNode7 = dataNode5.setWholeData("<!#root!>");
        java.lang.String str9 = dataNode7.absUrl("*");
        org.junit.Assert.assertNotNull(dataNode2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>#text" + "'", str3, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>#text");
        org.junit.Assert.assertNotNull(dataNode5);
        org.junit.Assert.assertNotNull(dataNode7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.jsoup.select.Elements elements0 = new org.jsoup.select.Elements();
        org.jsoup.select.Elements elements2 = elements0.prepend("#:first-child");
        java.lang.String str3 = elements0.text();
        org.junit.Assert.assertNotNull(elements2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.canContainBlock();
        boolean boolean4 = tag1.isFormSubmittable();
        java.lang.String str5 = tag1.normalName();
        boolean boolean6 = tag1.isKnownTag();
        boolean boolean7 = tag1.preserveWhitespace();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#document" + "'", str5, "#document");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        java.lang.String str3 = document1.baseUri();
        org.jsoup.nodes.Element element4 = document1.body();
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request6 = httpConnection5.request();
        org.jsoup.Connection.Request request9 = request6.addHeader("multipart/form-data", "hi!");
        boolean boolean11 = request9.hasHeader("multipart/form-data");
        boolean boolean13 = request9.hasCookie("#text");
        org.jsoup.parser.Parser parser14 = request9.parser();
        org.jsoup.nodes.Document document15 = document1.parser(parser14);
        org.jsoup.nodes.Node node16 = document15.parent();
        org.jsoup.nodes.Node node17 = document15.shallowClone();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.outline();
        boolean boolean20 = outputSettings18.outline();
        org.jsoup.nodes.Document document21 = document15.outputSettings(outputSettings18);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parser14);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document21);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        boolean boolean8 = request4.hasHeader("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection9 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request10 = httpConnection9.request();
        org.jsoup.Connection.Request request13 = request10.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method14 = request10.method();
        org.jsoup.Connection.Request request15 = request4.method(method14);
        org.jsoup.Connection.Request request18 = request15.addHeader(":first-child", ":contains(content-encoding)");
        java.io.InputStream inputStream19 = null;
        org.jsoup.parser.Parser parser22 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse(inputStream19, "", "#root", parser22);
        org.jsoup.Connection.Request request24 = request18.parser(parser22);
        java.net.Proxy proxy25 = null;
        org.jsoup.Connection.Request request26 = request24.proxy(proxy25);
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertTrue("'" + method14 + "' != '" + org.jsoup.Connection.Method.GET + "'", method14.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request26);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.className();
        org.jsoup.select.Elements elements5 = document1.getElementsByAttributeValueMatching("multipart/form-data", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.select.Elements elements8 = document1.getElementsByAttributeValueStarting("[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", ":lt(52)");
        org.jsoup.select.Elements elements10 = elements8.html("[:eq(-1)!=#doctype]");
        org.jsoup.select.Elements elements12 = elements8.html("Content-Encoding");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.jsoup.nodes.DataNode dataNode2 = org.jsoup.nodes.DataNode.createFromEncoded(":matchesOwn(null)", "<!DOCTYPE hi! :eq(-1) \"<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\" \"#root\">\n<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(dataNode2);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection.Request request19 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection20 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response21 = httpConnection20.response();
        java.lang.String str22 = response21.statusMessage();
        java.lang.String str23 = response21.statusMessage();
        org.jsoup.Connection.Method method24 = response21.method();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = response21.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = response21.cookies();
        org.jsoup.Connection connection27 = httpConnection0.data(strMap26);
        org.jsoup.Connection connection29 = httpConnection0.ignoreHttpErrors(true);
        org.jsoup.helper.HttpConnection httpConnection30 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request31 = httpConnection30.request();
        org.jsoup.Connection connection33 = httpConnection30.referrer("multipart/form-data");
        java.io.InputStream inputStream34 = null;
        org.jsoup.helper.HttpConnection httpConnection37 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request38 = httpConnection37.request();
        org.jsoup.Connection.Request request41 = request38.addHeader("multipart/form-data", "hi!");
        boolean boolean43 = request41.hasHeader("multipart/form-data");
        boolean boolean45 = request41.hasCookie("#text");
        org.jsoup.parser.Parser parser46 = request41.parser();
        org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse(inputStream34, "", "multipart/form-data", parser46);
        org.jsoup.parser.ParseErrorList parseErrorList48 = parser46.getErrors();
        org.jsoup.Connection connection49 = connection33.parser(parser46);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder50 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser51 = parser46.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder50);
        org.jsoup.parser.ParseSettings parseSettings54 = new org.jsoup.parser.ParseSettings(true, false);
        org.jsoup.parser.Parser parser55 = parser46.settings(parseSettings54);
        org.jsoup.Connection connection56 = httpConnection0.parser(parser55);
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(response21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(connection27);
        org.junit.Assert.assertNotNull(connection29);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(connection33);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parser46);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertNotNull(connection49);
        org.junit.Assert.assertNotNull(parser51);
        org.junit.Assert.assertNotNull(parser55);
        org.junit.Assert.assertNotNull(connection56);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class("Content-Encoding");
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str4 = document3.wholeText();
        org.jsoup.select.Elements elements5 = document3.parents();
        org.jsoup.nodes.Element element7 = document3.appendElement("#root=\"\"");
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.wholeText();
        org.jsoup.select.Elements elements11 = document9.parents();
        java.nio.charset.Charset charset12 = document9.charset();
        org.jsoup.select.Elements elements14 = document9.getElementsByIndexGreaterThan((int) '#');
        boolean boolean15 = class1.matches((org.jsoup.nodes.Element) document3, (org.jsoup.nodes.Element) document9);
        java.lang.String str16 = class1.toString();
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + ".Content-Encoding" + "'", str16, ".Content-Encoding");
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.jsoup.nodes.DataNode dataNode4 = org.jsoup.nodes.DataNode.createFromEncoded("", ":first-of-type");
        org.jsoup.nodes.Attributes attributes5 = dataNode4.attributes();
        org.jsoup.nodes.Attribute attribute6 = new org.jsoup.nodes.Attribute("#document", " hi!=\"multipart/form-data\"", attributes5);
        java.lang.String str7 = attribute6.getKey();
        java.lang.String str9 = attribute6.setValue("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>");
        org.junit.Assert.assertNotNull(dataNode4);
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#document" + "'", str7, "#document");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.jsoup.nodes.TextNode textNode1 = org.jsoup.nodes.TextNode.createFromEncoded("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>=\"#root\"");
        org.jsoup.nodes.TextNode textNode3 = textNode1.text("hi! hi!  hi!");
        org.junit.Assert.assertNotNull(textNode1);
        org.junit.Assert.assertNotNull(textNode3);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        boolean boolean6 = elements3.equals((java.lang.Object) 1.0d);
        java.lang.String str7 = elements3.text();
        org.jsoup.select.Elements elements9 = elements3.wrap("#root");
        org.jsoup.select.Elements elements11 = elements9.toggleClass("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str12 = elements11.outerHtml();
        org.jsoup.select.Elements elements15 = elements11.attr("SYSTEM=<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  Content-Encoding=\"#root\"\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(elements15);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("hi!hi!", "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n");
        org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request7 = httpConnection6.request();
        org.jsoup.Connection.Request request10 = request7.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method11 = request7.method();
        org.jsoup.Connection connection12 = httpConnection0.method(method11);
        org.jsoup.helper.HttpConnection httpConnection13 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        org.jsoup.Connection connection15 = httpConnection13.sslSocketFactory(sSLSocketFactory14);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = null;
        org.jsoup.Connection connection17 = httpConnection13.sslSocketFactory(sSLSocketFactory16);
        org.jsoup.Connection.Request request18 = httpConnection13.request();
        org.jsoup.helper.HttpConnection httpConnection19 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request20 = httpConnection19.request();
        org.jsoup.Connection.Request request23 = request20.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = request23.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = request23.cookies();
        org.jsoup.Connection connection26 = httpConnection13.headers(strMap25);
        org.jsoup.Connection connection27 = httpConnection0.headers(strMap25);
        java.net.Proxy proxy28 = null;
        org.jsoup.Connection connection29 = httpConnection0.proxy(proxy28);
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertTrue("'" + method11 + "' != '" + org.jsoup.Connection.Method.GET + "'", method11.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(connection15);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(connection26);
        org.junit.Assert.assertNotNull(connection27);
        org.junit.Assert.assertNotNull(connection29);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.select.Elements elements5 = elements3.prev("#text");
        org.jsoup.select.Elements elements7 = elements5.prev("#root");
        org.jsoup.parser.ParseError[] parseErrorArray8 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList9 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9, parseErrorArray8);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.noTracking();
        int int12 = parseErrorList9.indexOf((java.lang.Object) parseErrorList11);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList9.iterator();
        boolean boolean14 = elements5.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str17 = document16.id();
        org.jsoup.select.Elements elements18 = document16.previousElementSiblings();
        org.jsoup.select.Elements elements20 = elements18.prev("#text");
        org.jsoup.select.Elements elements22 = elements20.prev("#root");
        org.jsoup.parser.ParseError[] parseErrorArray23 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList24 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24, parseErrorArray23);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.noTracking();
        int int27 = parseErrorList24.indexOf((java.lang.Object) parseErrorList26);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList24.iterator();
        boolean boolean29 = elements20.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        org.jsoup.parser.ParseError parseError30 = null;
        boolean boolean31 = parseErrorList24.add(parseError30);
        org.jsoup.nodes.Attributes attributes34 = null;
        org.jsoup.nodes.Attribute attribute35 = new org.jsoup.nodes.Attribute("Content-Encoding", "#root", attributes34);
        java.lang.String str36 = attribute35.getValue();
        java.lang.String str38 = attribute35.setValue("#root");
        java.lang.String str39 = attribute35.getKey();
        boolean boolean40 = parseErrorList24.equals((java.lang.Object) attribute35);
        boolean boolean41 = elements5.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str45 = document44.id();
        org.jsoup.select.Elements elements46 = document44.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor47 = elements46.listIterator();
        boolean boolean49 = elements46.equals((java.lang.Object) 1.0d);
        java.lang.String str50 = elements46.text();
        org.jsoup.nodes.Element element52 = null;
        org.jsoup.parser.ParseErrorList parseErrorList54 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.List<org.jsoup.nodes.Node> nodeList55 = org.jsoup.parser.Parser.parseFragment("", element52, "", parseErrorList54);
        boolean boolean56 = parseErrorList54.isEmpty();
        int int57 = parseErrorList54.size();
        org.jsoup.parser.ParseErrorList parseErrorList58 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor59 = parseErrorList58.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream60 = parseErrorList58.parallelStream();
        org.jsoup.nodes.Document document62 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str63 = document62.id();
        org.jsoup.select.Elements elements64 = document62.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor65 = elements64.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor66 = elements64.listIterator();
        org.jsoup.select.Elements elements67 = elements64.empty();
        org.jsoup.nodes.Document document69 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str70 = document69.id();
        org.jsoup.select.Elements elements71 = document69.previousElementSiblings();
        org.jsoup.select.Elements elements73 = elements71.prev("#text");
        boolean boolean74 = elements71.hasText();
        org.jsoup.nodes.Document document76 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str77 = document76.id();
        org.jsoup.select.Elements elements78 = document76.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor79 = elements78.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor80 = elements78.listIterator();
        org.jsoup.select.Elements elements81 = elements78.empty();
        org.jsoup.nodes.Document document83 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str84 = document83.id();
        org.jsoup.select.Elements elements85 = document83.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor86 = elements85.listIterator();
        boolean boolean88 = elements85.equals((java.lang.Object) 1.0d);
        java.lang.String str89 = elements85.text();
        org.jsoup.select.Elements elements91 = elements85.wrap("#root");
        org.jsoup.select.Elements[] elementsArray92 = new org.jsoup.select.Elements[] { elements64, elements71, elements78, elements91 };
        org.jsoup.select.Elements[] elementsArray93 = parseErrorList58.toArray(elementsArray92);
        boolean boolean94 = parseErrorList54.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList58);
        boolean boolean95 = elements46.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList58);
        boolean boolean96 = parseErrorList24.addAll((int) (byte) 0, (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList58);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor98 = parseErrorList58.listIterator((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(parseErrorArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(parseErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "#root" + "'", str36, "#root");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "#root" + "'", str38, "#root");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Content-Encoding" + "'", str39, "Content-Encoding");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(elements46);
        org.junit.Assert.assertNotNull(elementItor47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(parseErrorList54);
        org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(parseErrorList58);
        org.junit.Assert.assertNotNull(parseErrorItor59);
        org.junit.Assert.assertNotNull(parseErrorStream60);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(elements64);
        org.junit.Assert.assertNotNull(elementItor65);
        org.junit.Assert.assertNotNull(elementItor66);
        org.junit.Assert.assertNotNull(elements67);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(elements71);
        org.junit.Assert.assertNotNull(elements73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(elements78);
        org.junit.Assert.assertNotNull(elementItor79);
        org.junit.Assert.assertNotNull(elementItor80);
        org.junit.Assert.assertNotNull(elements81);
        org.junit.Assert.assertNotNull(document83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(elements85);
        org.junit.Assert.assertNotNull(elementItor86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(elements91);
        org.junit.Assert.assertNotNull(elementsArray92);
        org.junit.Assert.assertNotNull(elementsArray93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.jsoup.parser.ParseError[] parseErrorArray1 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList2 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList2, parseErrorArray1);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.listIterator();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType7 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.wholeText();
        org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str13 = document12.className();
        boolean boolean14 = isNthLastOfType7.matches((org.jsoup.nodes.Element) document9, (org.jsoup.nodes.Element) document12);
        boolean boolean15 = parseErrorList2.equals((java.lang.Object) document12);
        java.lang.String str16 = parseErrorList2.toString();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "", "multipart/form-data", "hi!" };
        boolean boolean25 = org.jsoup.internal.StringUtil.in("", strArray24);
        boolean boolean26 = org.jsoup.internal.StringUtil.in("", strArray24);
        java.lang.String str28 = org.jsoup.internal.StringUtil.join(strArray24, " hi!=\"multipart/form-data\"");
        org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray24, ":first-of-type");
        int int31 = parseErrorList2.lastIndexOf((java.lang.Object) strArray24);
        boolean boolean32 = org.jsoup.internal.StringUtil.inSorted(":matchText", strArray24);
        org.junit.Assert.assertNotNull(parseErrorArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!" + "'", str28, "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.jsoup.helper.W3CDom w3CDom0 = new org.jsoup.helper.W3CDom();
        org.jsoup.helper.W3CDom w3CDom1 = new org.jsoup.helper.W3CDom();
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str4 = document3.className();
        java.lang.String str6 = document3.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str7 = document3.normalName();
        org.w3c.dom.Document document8 = w3CDom1.fromJsoup(document3);
        java.lang.String str9 = w3CDom0.asString(document8);
        org.jsoup.helper.W3CDom w3CDom10 = new org.jsoup.helper.W3CDom();
        org.jsoup.helper.W3CDom w3CDom11 = new org.jsoup.helper.W3CDom();
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str14 = document13.className();
        java.lang.String str16 = document13.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str17 = document13.normalName();
        org.w3c.dom.Document document18 = w3CDom11.fromJsoup(document13);
        java.lang.String str19 = w3CDom10.asString(document18);
        java.lang.String str20 = w3CDom0.asString(document18);
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType23 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str26 = document25.id();
        org.jsoup.select.Elements elements27 = document25.previousElementSiblings();
        org.jsoup.nodes.Element element28 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType23, (org.jsoup.nodes.Element) document25);
        org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str31 = document30.className();
        java.lang.String str32 = document30.outerHtml();
        org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str35 = document34.id();
        java.lang.String str36 = document34.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan38 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean39 = document34.is((org.jsoup.select.Evaluator) indexLessThan38);
        boolean boolean40 = isNthLastOfType23.matches((org.jsoup.nodes.Element) document30, (org.jsoup.nodes.Element) document34);
        java.lang.String str41 = document34.cssSelector();
        org.jsoup.nodes.Element element42 = document34.clearAttributes();
        java.lang.String str43 = document34.tagName();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = document34.dataset();
        org.w3c.dom.Document document45 = w3CDom0.fromJsoup(document34);
        java.lang.String str46 = document34.nodeName();
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#root" + "'", str7, "#root");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull("document8.getDocumentURI() == null", document8.getDocumentURI());
        org.junit.Assert.assertNull("document8.getInputEncoding() == null", document8.getInputEncoding());
        org.junit.Assert.assertNull("document8.getXmlEncoding() == null", document8.getXmlEncoding());
        org.junit.Assert.assertEquals(document8.getXmlVersion(), "1.0");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n" + "'", str9, "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#root" + "'", str17, "#root");
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull("document18.getDocumentURI() == null", document18.getDocumentURI());
        org.junit.Assert.assertNull("document18.getInputEncoding() == null", document18.getInputEncoding());
        org.junit.Assert.assertNull("document18.getXmlEncoding() == null", document18.getXmlEncoding());
        org.junit.Assert.assertEquals(document18.getXmlVersion(), "1.0");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n" + "'", str19, "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n" + "'", str20, "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n");
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertNull(element28);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "#root" + "'", str41, "#root");
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "#root" + "'", str43, "#root");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNull("document45.getDocumentURI() == null", document45.getDocumentURI());
        org.junit.Assert.assertNull("document45.getInputEncoding() == null", document45.getInputEncoding());
        org.junit.Assert.assertNull("document45.getXmlEncoding() == null", document45.getXmlEncoding());
        org.junit.Assert.assertEquals(document45.getXmlVersion(), "1.0");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#document" + "'", str46, "#document");
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) (byte) -1);
        java.lang.String str2 = indexEquals1.toString();
        java.lang.String str3 = indexEquals1.toString();
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.id();
        java.lang.String str7 = document5.baseUri();
        org.jsoup.nodes.Element element8 = document5.body();
        org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parseBodyFragment("");
        java.lang.String str11 = document10.tagName();
        boolean boolean12 = indexEquals1.matches(element8, (org.jsoup.nodes.Element) document10);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":eq(-1)" + "'", str2, ":eq(-1)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":eq(-1)" + "'", str3, ":eq(-1)");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#root" + "'", str11, "#root");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.jsoup.helper.HttpConnection.KeyVal keyVal2 = org.jsoup.helper.HttpConnection.KeyVal.create("#root", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        java.io.InputStream inputStream3 = null;
        org.jsoup.Connection.KeyVal keyVal4 = keyVal2.inputStream(inputStream3);
        org.jsoup.helper.HttpConnection.KeyVal keyVal6 = keyVal2.key(":eq(-1)");
        java.io.InputStream inputStream7 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream10 = new org.jsoup.internal.ConstrainableInputStream(inputStream7, 1, (int) (byte) 0);
        org.jsoup.helper.HttpConnection.KeyVal keyVal11 = keyVal2.inputStream((java.io.InputStream) constrainableInputStream10);
        org.jsoup.Connection.KeyVal keyVal13 = keyVal2.value("");
        java.lang.String str14 = keyVal2.toString();
        org.junit.Assert.assertNotNull(keyVal2);
        org.junit.Assert.assertNotNull(keyVal4);
        org.junit.Assert.assertNotNull(keyVal6);
        org.junit.Assert.assertNotNull(keyVal11);
        org.junit.Assert.assertNotNull(keyVal13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + ":eq(-1)=" + "'", str14, ":eq(-1)=");
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        java.lang.String[] strArray6 = new java.lang.String[] { "multipart/form-data", "Content-Encoding", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36" };
        java.lang.String str7 = tokenQueue1.consumeToAny(strArray6);
        char char8 = tokenQueue1.peek();
        org.jsoup.parser.TokenQueue tokenQueue10 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean12 = tokenQueue10.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        char char13 = tokenQueue10.consume();
        org.jsoup.parser.TokenQueue tokenQueue15 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean17 = tokenQueue15.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        char char18 = tokenQueue15.consume();
        char[] charArray19 = new char[] {};
        boolean boolean20 = tokenQueue15.matchesAny(charArray19);
        boolean boolean21 = tokenQueue10.matchesAny(charArray19);
        boolean boolean22 = tokenQueue1.matchesAny(charArray19);
        java.lang.String str25 = tokenQueue1.chompBalanced('[', ':');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + 'm' + "'", char8 == 'm');
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + 'm' + "'", char13 == 'm');
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'm' + "'", char18 == 'm');
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        java.io.InputStream inputStream2 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal3 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream2);
        java.io.InputStream inputStream4 = keyVal3.inputStream();
        org.jsoup.helper.HttpConnection.KeyVal keyVal6 = keyVal3.key("#declaration");
        java.lang.String str7 = keyVal3.contentType();
        org.junit.Assert.assertNotNull(keyVal3);
        org.junit.Assert.assertNull(inputStream4);
        org.junit.Assert.assertNotNull(keyVal6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        boolean boolean8 = request4.hasHeader("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection9 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request10 = httpConnection9.request();
        org.jsoup.Connection.Request request13 = request10.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method14 = request10.method();
        org.jsoup.Connection.Request request15 = request4.method(method14);
        org.jsoup.Connection.Request request18 = request15.header(":lt(52)", "[mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36*=#doctype]");
        java.lang.String str20 = request18.header("#doctype");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertTrue("'" + method14 + "' != '" + org.jsoup.Connection.Method.GET + "'", method14.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class("Content-Encoding");
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str4 = document3.wholeText();
        org.jsoup.select.Elements elements5 = document3.parents();
        org.jsoup.nodes.Element element7 = document3.appendElement("#root=\"\"");
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.wholeText();
        org.jsoup.select.Elements elements11 = document9.parents();
        java.nio.charset.Charset charset12 = document9.charset();
        org.jsoup.select.Elements elements14 = document9.getElementsByIndexGreaterThan((int) '#');
        boolean boolean15 = class1.matches((org.jsoup.nodes.Element) document3, (org.jsoup.nodes.Element) document9);
        int int16 = document9.siblingIndex();
        java.lang.String str17 = document9.nodeName();
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#document" + "'", str17, "#document");
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.jsoup.nodes.Comment comment2 = new org.jsoup.nodes.Comment(":eq(-1)=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "[mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36*=#doctype]");
        int int3 = comment2.childNodeSize();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("*", "<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>");
        org.jsoup.nodes.Element element4 = document2.tagName("org.jsoup.select.Selector$SelectorParseException: :lt(52)");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node6 = element4.childNode((int) '[');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 91 out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(element4);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        java.io.InputStream inputStream0 = null;
        org.jsoup.helper.HttpConnection httpConnection3 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request4 = httpConnection3.request();
        org.jsoup.Connection.Request request7 = request4.addHeader("multipart/form-data", "hi!");
        boolean boolean9 = request7.hasHeader("multipart/form-data");
        boolean boolean11 = request7.hasCookie("#text");
        org.jsoup.parser.Parser parser12 = request7.parser();
        org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse(inputStream0, "", "multipart/form-data", parser12);
        boolean boolean14 = parser12.isTrackErrors();
        org.jsoup.parser.Parser parser16 = parser12.setTrackErrors(10);
        org.jsoup.parser.ParseErrorList parseErrorList17 = parser16.getErrors();
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator18 = parseErrorList17.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList17.listIterator((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parser12);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parser16);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertNotNull(parseErrorSpliterator18);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.select.Elements elements5 = elements3.prev("#text");
        org.jsoup.select.Elements elements7 = elements5.prev("#root");
        org.jsoup.parser.ParseError[] parseErrorArray8 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList9 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9, parseErrorArray8);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.noTracking();
        int int12 = parseErrorList9.indexOf((java.lang.Object) parseErrorList11);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList9.iterator();
        boolean boolean14 = elements5.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str17 = document16.id();
        org.jsoup.select.Elements elements18 = document16.previousElementSiblings();
        org.jsoup.select.Elements elements20 = elements18.prev("#text");
        org.jsoup.select.Elements elements22 = elements20.prev("#root");
        org.jsoup.parser.ParseError[] parseErrorArray23 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList24 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24, parseErrorArray23);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.noTracking();
        int int27 = parseErrorList24.indexOf((java.lang.Object) parseErrorList26);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList24.iterator();
        boolean boolean29 = elements20.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        org.jsoup.parser.ParseError parseError30 = null;
        boolean boolean31 = parseErrorList24.add(parseError30);
        org.jsoup.nodes.Attributes attributes34 = null;
        org.jsoup.nodes.Attribute attribute35 = new org.jsoup.nodes.Attribute("Content-Encoding", "#root", attributes34);
        java.lang.String str36 = attribute35.getValue();
        java.lang.String str38 = attribute35.setValue("#root");
        java.lang.String str39 = attribute35.getKey();
        boolean boolean40 = parseErrorList24.equals((java.lang.Object) attribute35);
        boolean boolean41 = elements5.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList42.listIterator();
        java.lang.Object obj44 = parseErrorList42.clone();
        boolean boolean45 = parseErrorList24.contains(obj44);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(parseErrorArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(parseErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "#root" + "'", str36, "#root");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "#root" + "'", str38, "#root");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Content-Encoding" + "'", str39, "Content-Encoding");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("Content-Encoding=\"#root\"");
        org.jsoup.parser.Tag tag2 = document1.tag();
        org.jsoup.select.Elements elements3 = document1.nextElementSiblings();
        java.util.List<org.jsoup.nodes.FormElement> formElementList4 = elements3.forms();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(formElementList4);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.jsoup.nodes.CDataNode cDataNode1 = new org.jsoup.nodes.CDataNode("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str2 = cDataNode1.nodeName();
        java.lang.String str3 = cDataNode1.text();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "#cdata" + "'", str2, "#cdata");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str3, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        byte[] byteArray1 = inputStream0.readAllBytes();
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        java.lang.String str3 = document1.baseUri();
        org.jsoup.nodes.Element element4 = document1.clearAttributes();
        document1.title("");
        document1.updateMetaCharsetElement(false);
        document1.setBaseUri("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(element4);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        org.jsoup.parser.Parser parser5 = request4.parser();
        org.jsoup.Connection.Request request8 = request4.addHeader(":containsOwn(system)", ":only-of-type");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(parser5);
        org.junit.Assert.assertNotNull(request8);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.jsoup.parser.ParseSettings parseSettings3 = new org.jsoup.parser.ParseSettings(true, true);
        org.jsoup.parser.Tag tag4 = org.jsoup.parser.Tag.valueOf("#declaration", parseSettings3);
        org.junit.Assert.assertNotNull(tag4);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        java.net.Proxy proxy2 = request1.proxy();
        boolean boolean5 = request1.hasHeaderWithValue("Content-Encoding", "hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = request1.multiHeaders();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNull(proxy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText();
        java.lang.String str4 = org.jsoup.Jsoup.clean("[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", whitelist3);
        org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist3);
        java.lang.String str6 = org.jsoup.Jsoup.clean("application/x-www-form-urlencoded", "#cdata", whitelist3);
        org.junit.Assert.assertNotNull(whitelist3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]" + "'", str4, "[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "application/x-www-form-urlencoded" + "'", str6, "application/x-www-form-urlencoded");
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.jsoup.select.Evaluator evaluator0 = null;
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType3 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.id();
        org.jsoup.select.Elements elements7 = document5.previousElementSiblings();
        org.jsoup.nodes.Element element8 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType3, (org.jsoup.nodes.Element) document5);
        org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str11 = document10.className();
        java.lang.String str12 = document10.outerHtml();
        org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str15 = document14.id();
        java.lang.String str16 = document14.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan18 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean19 = document14.is((org.jsoup.select.Evaluator) indexLessThan18);
        boolean boolean20 = isNthLastOfType3.matches((org.jsoup.nodes.Element) document10, (org.jsoup.nodes.Element) document14);
        java.lang.String str21 = document14.cssSelector();
        org.jsoup.nodes.Element element22 = document14.clearAttributes();
        java.lang.String str23 = document14.tagName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements24 = org.jsoup.select.Selector.select(evaluator0, (org.jsoup.nodes.Element) document14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNull(element8);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str12, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#root" + "'", str21, "#root");
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "#root" + "'", str23, "#root");
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parse("[]");
        org.junit.Assert.assertNotNull(document1);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor5 = elements3.listIterator();
        org.jsoup.select.Elements elements7 = elements3.next("#text");
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList8.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList8.parallelStream();
        org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str13 = document12.id();
        org.jsoup.select.Elements elements14 = document12.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor15 = elements14.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor16 = elements14.listIterator();
        org.jsoup.select.Elements elements17 = elements14.empty();
        org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str20 = document19.id();
        org.jsoup.select.Elements elements21 = document19.previousElementSiblings();
        org.jsoup.select.Elements elements23 = elements21.prev("#text");
        boolean boolean24 = elements21.hasText();
        org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str27 = document26.id();
        org.jsoup.select.Elements elements28 = document26.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor29 = elements28.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor30 = elements28.listIterator();
        org.jsoup.select.Elements elements31 = elements28.empty();
        org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str34 = document33.id();
        org.jsoup.select.Elements elements35 = document33.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor36 = elements35.listIterator();
        boolean boolean38 = elements35.equals((java.lang.Object) 1.0d);
        java.lang.String str39 = elements35.text();
        org.jsoup.select.Elements elements41 = elements35.wrap("#root");
        org.jsoup.select.Elements[] elementsArray42 = new org.jsoup.select.Elements[] { elements14, elements21, elements28, elements41 };
        org.jsoup.select.Elements[] elementsArray43 = parseErrorList8.toArray(elementsArray42);
        int int44 = elements3.indexOf((java.lang.Object) parseErrorList8);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList8.parallelStream();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertNotNull(elementItor5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(elementItor15);
        org.junit.Assert.assertNotNull(elementItor16);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(elementItor29);
        org.junit.Assert.assertNotNull(elementItor30);
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(elementItor36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(elements41);
        org.junit.Assert.assertNotNull(elementsArray42);
        org.junit.Assert.assertNotNull(elementsArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(parseErrorStream45);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attribute attribute3 = org.jsoup.nodes.Attribute.createFromEncoded("#root", "");
        org.jsoup.nodes.Attributes attributes4 = attributes0.put(attribute3);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor9 = elements8.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor10 = elements8.listIterator();
        org.jsoup.select.Elements elements11 = elements8.empty();
        boolean boolean12 = attributes4.equals((java.lang.Object) elements8);
        org.jsoup.nodes.Attributes attributes15 = attributes4.add("#root=\"\"", " hi!=\"multipart/form-data\"");
        boolean boolean16 = attributes15.isEmpty();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator17 = attributes15.spliterator();
        org.jsoup.parser.ParseSettings parseSettings18 = org.jsoup.parser.ParseSettings.preserveCase;
        java.lang.String str20 = parseSettings18.normalizeAttribute("#root");
        int int21 = attributes15.deduplicate(parseSettings18);
        org.jsoup.nodes.Attributes attributes24 = attributes15.add("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", ":gt(100)");
        org.junit.Assert.assertNotNull(attribute3);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elementItor9);
        org.junit.Assert.assertNotNull(elementItor10);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(attributeSpliterator17);
        org.junit.Assert.assertNotNull(parseSettings18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#root" + "'", str20, "#root");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(attributes24);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.jsoup.nodes.XmlDeclaration xmlDeclaration3 = new org.jsoup.nodes.XmlDeclaration("#root", "#root", true);
        java.lang.String str4 = xmlDeclaration3.name();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#root" + "'", str4, "#root");
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attribute attribute3 = org.jsoup.nodes.Attribute.createFromEncoded("#root", "");
        org.jsoup.nodes.Attributes attributes4 = attributes0.put(attribute3);
        org.jsoup.nodes.Attribute attribute5 = attribute3.clone();
        java.lang.String str6 = attribute3.getValue();
        org.junit.Assert.assertNotNull(attribute3);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertNotNull(attribute5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        java.lang.String str8 = request4.cookie("#root");
        org.jsoup.Connection.Request request10 = request4.timeout((int) ' ');
        org.jsoup.Connection.Request request12 = request4.removeHeader("[]");
        org.jsoup.parser.Parser parser13 = request4.parser();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(parser13);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!", "#text", "#root", "#document");
        java.lang.String str5 = documentType4.nodeName();
        documentType4.setPubSysKey("application/x-www-form-urlencoded");
        java.lang.String str8 = documentType4.nodeName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#doctype" + "'", str8, "#doctype");
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean3 = tokenQueue1.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        boolean boolean4 = tokenQueue1.matchesStartTag();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.select.Elements elements5 = elements3.prev("#text");
        org.jsoup.select.Elements elements7 = elements5.prev("#root");
        org.jsoup.parser.ParseError[] parseErrorArray8 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList9 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9, parseErrorArray8);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.noTracking();
        int int12 = parseErrorList9.indexOf((java.lang.Object) parseErrorList11);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList9.iterator();
        boolean boolean14 = elements5.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        org.jsoup.parser.ParseError parseError15 = null;
        boolean boolean16 = parseErrorList9.add(parseError15);
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator17 = parseErrorList9.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList9.listIterator(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(parseErrorArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(parseErrorSpliterator17);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor5 = elements3.listIterator();
        org.jsoup.select.Elements elements6 = elements3.empty();
        boolean boolean7 = elements3.hasText();
        org.jsoup.nodes.Element element8 = elements3.first();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertNotNull(elementItor5);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(element8);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.noTracking();
        int int4 = parseErrorList1.indexOf((java.lang.Object) parseErrorList3);
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        org.jsoup.Connection connection7 = httpConnection5.sslSocketFactory(sSLSocketFactory6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = null;
        org.jsoup.Connection connection9 = httpConnection5.sslSocketFactory(sSLSocketFactory8);
        org.jsoup.Connection connection11 = httpConnection5.ignoreContentType(true);
        boolean boolean12 = parseErrorList1.equals((java.lang.Object) true);
        org.jsoup.parser.ParseError[] parseErrorArray13 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList14 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14, parseErrorArray13);
        parseErrorList14.ensureCapacity(10);
        boolean boolean18 = parseErrorList1.remove((java.lang.Object) parseErrorList14);
        java.lang.Object obj19 = parseErrorList14.clone();
        org.jsoup.select.Evaluator.Class class21 = new org.jsoup.select.Evaluator.Class("Content-Encoding");
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str24 = document23.wholeText();
        org.jsoup.select.Elements elements25 = document23.parents();
        org.jsoup.nodes.Element element27 = document23.appendElement("#root=\"\"");
        org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str30 = document29.wholeText();
        org.jsoup.select.Elements elements31 = document29.parents();
        java.nio.charset.Charset charset32 = document29.charset();
        org.jsoup.select.Elements elements34 = document29.getElementsByIndexGreaterThan((int) '#');
        boolean boolean35 = class21.matches((org.jsoup.nodes.Element) document23, (org.jsoup.nodes.Element) document29);
        org.jsoup.select.Evaluator.Class class37 = new org.jsoup.select.Evaluator.Class("Content-Encoding");
        org.jsoup.select.Evaluator.Class[] classArray38 = new org.jsoup.select.Evaluator.Class[] { class21, class37 };
        org.jsoup.select.Evaluator.Class[] classArray39 = parseErrorList14.toArray(classArray38);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(connection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "[]");
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classArray39);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes3 = attributes0.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes6 = attributes0.add("hi!", "multipart/form-data");
        java.lang.String str7 = attributes6.html();
        org.jsoup.helper.HttpConnection httpConnection8 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request9 = httpConnection8.request();
        org.jsoup.Connection.Request request12 = request9.addHeader("multipart/form-data", "hi!");
        boolean boolean14 = request12.hasHeader("multipart/form-data");
        boolean boolean16 = request12.hasHeader("multipart/form-data");
        boolean boolean17 = attributes6.equals((java.lang.Object) request12);
        org.jsoup.parser.ParseSettings parseSettings18 = org.jsoup.parser.ParseSettings.preserveCase;
        java.lang.String str20 = parseSettings18.normalizeTag("#doctype");
        int int21 = attributes6.deduplicate(parseSettings18);
        org.jsoup.nodes.Attributes attributes24 = attributes6.add("#root=\"\"", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + " hi!=\"multipart/form-data\"" + "'", str7, " hi!=\"multipart/form-data\"");
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseSettings18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#doctype" + "'", str20, "#doctype");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(attributes24);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.jsoup.parser.ParseErrorList parseErrorList0 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor1 = parseErrorList0.listIterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor2 = parseErrorList0.iterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList0.stream();
        parseErrorList0.clear();
        org.jsoup.parser.Tag tag6 = new org.jsoup.parser.Tag("#document");
        boolean boolean7 = tag6.formatAsBlock();
        org.jsoup.nodes.Attributes attributes9 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes10 = attributes9.clone();
        attributes10.remove("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        org.jsoup.nodes.PseudoTextElement pseudoTextElement13 = new org.jsoup.nodes.PseudoTextElement(tag6, "#root", attributes10);
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.className();
        java.lang.String str17 = document15.outerHtml();
        boolean boolean19 = document15.hasSameValue((java.lang.Object) 1);
        java.lang.String str20 = document15.tagName();
        org.jsoup.nodes.Element element21 = document15.head();
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parse("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "multipart/form-data");
        org.jsoup.nodes.Element element25 = document15.prependChild((org.jsoup.nodes.Node) document24);
        boolean boolean26 = tag6.equals((java.lang.Object) document24);
        org.jsoup.nodes.Element element28 = document24.removeAttr("multipart");
        org.jsoup.nodes.Document document29 = document24.normalise();
        int int30 = parseErrorList0.indexOf((java.lang.Object) document24);
        org.junit.Assert.assertNotNull(parseErrorList0);
        org.junit.Assert.assertNotNull(parseErrorItor1);
        org.junit.Assert.assertNotNull(parseErrorItor2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str17, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#root" + "'", str20, "#root");
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("[:eq(-1)!=#doctype]");
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response1 = httpConnection0.response();
        java.lang.String str2 = response1.statusMessage();
        java.lang.String str3 = response1.statusMessage();
        org.jsoup.Connection.Method method4 = response1.method();
        java.util.List<java.lang.String> strList6 = response1.headers("<![CDATA[<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>]]>");
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        org.jsoup.Connection connection4 = httpConnection0.ignoreContentType(true);
        org.jsoup.Connection connection7 = httpConnection0.cookie("amultipart", "<!#root!>");
        org.jsoup.Connection.Response response8 = httpConnection0.response();
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(response8);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType4 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        org.jsoup.nodes.Element element9 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType4, (org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.className();
        java.lang.String str13 = document11.outerHtml();
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.id();
        java.lang.String str17 = document15.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan19 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean20 = document15.is((org.jsoup.select.Evaluator) indexLessThan19);
        boolean boolean21 = isNthLastOfType4.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document15);
        java.lang.String str22 = document15.cssSelector();
        org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str25 = document24.className();
        java.lang.String str26 = document24.outerHtml();
        boolean boolean28 = document24.hasSameValue((java.lang.Object) 1);
        boolean boolean29 = indexLessThan1.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document24);
        org.jsoup.nodes.Document.QuirksMode quirksMode30 = org.jsoup.nodes.Document.QuirksMode.quirks;
        org.jsoup.nodes.Document document31 = document24.quirksMode(quirksMode30);
        org.jsoup.select.Elements elements34 = document31.getElementsByAttributeValueMatching("multipart/form-data", "hi!");
        org.jsoup.select.Elements elements36 = elements34.prev("#doctype");
        org.jsoup.helper.HttpConnection httpConnection37 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response38 = httpConnection37.response();
        java.lang.String str39 = response38.statusMessage();
        org.jsoup.Connection.Response response41 = response38.removeCookie("Content-Encoding");
        org.jsoup.Connection.Response response44 = response38.header("Content-Type", "application/x-www-form-urlencoded");
        org.jsoup.Connection.Response response47 = response38.cookie("Content-Encoding", "SYSTEM");
        org.jsoup.helper.HttpConnection httpConnection48 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request49 = httpConnection48.request();
        org.jsoup.Connection connection51 = httpConnection48.referrer("multipart/form-data");
        org.jsoup.Connection.Response response52 = httpConnection48.response();
        java.net.URL uRL53 = response52.url();
        org.jsoup.Connection.Response response55 = response52.charset("PUBLIC");
        org.jsoup.Connection.Response response57 = response52.removeHeader(":matchesOwn(null)");
        org.jsoup.helper.HttpConnection httpConnection58 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response59 = httpConnection58.response();
        org.jsoup.Connection.Method method60 = org.jsoup.Connection.Method.OPTIONS;
        boolean boolean61 = method60.hasBody();
        org.jsoup.Connection.Response response62 = response59.method(method60);
        org.jsoup.Connection.Response[] responseArray63 = new org.jsoup.Connection.Response[] { response38, response52, response59 };
        org.jsoup.Connection.Response[] responseArray64 = elements34.toArray(responseArray63);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNull(element9);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#root" + "'", str22, "#root");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str26, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + quirksMode30 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode30.equals(org.jsoup.nodes.Document.QuirksMode.quirks));
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(elements36);
        org.junit.Assert.assertNotNull(response38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(response41);
        org.junit.Assert.assertNotNull(response44);
        org.junit.Assert.assertNotNull(response47);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(connection51);
        org.junit.Assert.assertNotNull(response52);
        org.junit.Assert.assertNull(uRL53);
        org.junit.Assert.assertNotNull(response55);
        org.junit.Assert.assertNotNull(response57);
        org.junit.Assert.assertNotNull(response59);
        org.junit.Assert.assertTrue("'" + method60 + "' != '" + org.jsoup.Connection.Method.OPTIONS + "'", method60.equals(org.jsoup.Connection.Method.OPTIONS));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(response62);
        org.junit.Assert.assertNotNull(responseArray63);
        org.junit.Assert.assertNotNull(responseArray64);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("", "#doctype");
        org.jsoup.nodes.Document document3 = document2.normalise();
        java.lang.String str4 = document3.className();
        java.lang.String str5 = document3.baseUri();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype");
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.jsoup.select.Evaluator.IsNthOfType isNthOfType2 = new org.jsoup.select.Evaluator.IsNthOfType(10, (int) (short) 100);
        java.lang.String str3 = isNthOfType2.toString();
        java.lang.String str4 = isNthOfType2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":nth-of-type(10n+100)" + "'", str3, ":nth-of-type(10n+100)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":nth-of-type(10n+100)" + "'", str4, ":nth-of-type(10n+100)");
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response1 = httpConnection0.response();
        java.lang.String str2 = response1.statusMessage();
        java.lang.String str3 = response1.statusMessage();
        org.jsoup.Connection.Method method4 = response1.method();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = response1.multiHeaders();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = response1.multiHeaders();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean3 = textNode2.isBlank();
        java.lang.String str4 = textNode2.toString();
        java.lang.String str5 = textNode2.nodeName();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#text" + "'", str5, "#text");
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        boolean boolean3 = tokenQueue1.matchesCS("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        char char4 = tokenQueue1.consume();
        boolean boolean5 = tokenQueue1.matchesStartTag();
        boolean boolean7 = tokenQueue1.matchesCS("hi!hi!");
        char char8 = tokenQueue1.peek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'm' + "'", char4 == 'm');
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + 'u' + "'", char8 == 'u');
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        java.io.InputStream inputStream0 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream3 = new org.jsoup.internal.ConstrainableInputStream(inputStream0, 1, (int) (byte) 0);
        org.jsoup.parser.Parser parser6 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document document7 = org.jsoup.helper.DataUtil.load(inputStream0, ":eq(-1)", "Content-Encoding", parser6);
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan9 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 0);
        boolean boolean10 = document7.is((org.jsoup.select.Evaluator) indexLessThan9);
        org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str13 = document12.id();
        java.lang.String str14 = document12.baseUri();
        org.jsoup.nodes.Element element15 = document12.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = document12.dataset();
        document12.updateMetaCharsetElement(true);
        org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str21 = document20.id();
        java.lang.String str22 = document20.baseUri();
        org.jsoup.nodes.Element element23 = document20.shallowClone();
        boolean boolean24 = indexLessThan9.matches((org.jsoup.nodes.Element) document12, (org.jsoup.nodes.Element) document20);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element25 = document12.firstElementSibling();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.jsoup.nodes.Element.childElementsList()\" because the return value of \"org.jsoup.nodes.Element.parent()\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser6);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        java.lang.String str1 = org.jsoup.internal.StringUtil.normaliseWhitespace(" ");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + " " + "'", str1, " ");
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.jsoup.parser.ParseErrorList parseErrorList0 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor1 = parseErrorList0.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList0.parallelStream();
        org.jsoup.parser.ParseError parseError4 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList0.add((int) 'l', parseError4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 108, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList0);
        org.junit.Assert.assertNotNull(parseErrorItor1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request7 = httpConnection6.request();
        org.jsoup.Connection.Request request10 = request7.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method11 = request7.method();
        org.jsoup.Connection connection12 = httpConnection0.method(method11);
        org.jsoup.helper.HttpConnection httpConnection13 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request14 = httpConnection13.request();
        org.jsoup.Connection.Request request17 = request14.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = request17.multiHeaders();
        org.jsoup.Connection.Request request20 = request17.ignoreHttpErrors(true);
        org.jsoup.Connection connection21 = httpConnection0.request(request20);
        org.jsoup.Connection connection23 = httpConnection0.requestBody(":eq(-1)");
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertTrue("'" + method11 + "' != '" + org.jsoup.Connection.Method.GET + "'", method11.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(connection21);
        org.junit.Assert.assertNotNull(connection23);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.isBlock();
        org.jsoup.nodes.Element element5 = new org.jsoup.nodes.Element(tag1, "ultipart");
        boolean boolean6 = tag1.isEmpty();
        java.lang.String str7 = tag1.normalName();
        boolean boolean8 = tag1.isEmpty();
        boolean boolean9 = tag1.isEmpty();
        boolean boolean10 = tag1.formatAsBlock();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#document" + "'", str7, "#document");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType3 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.className();
        java.lang.String str7 = document5.outerHtml();
        boolean boolean9 = document5.hasSameValue((java.lang.Object) 1);
        java.lang.String str10 = document5.tagName();
        org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        org.jsoup.nodes.Element element14 = document12.val("hi!");
        boolean boolean15 = isNthLastOfType3.matches((org.jsoup.nodes.Element) document5, element14);
        java.lang.String str16 = document5.wholeText();
        int int17 = document5.siblingIndex();
        java.lang.String str18 = document5.title();
        org.jsoup.nodes.Element element21 = null;
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.List<org.jsoup.nodes.Node> nodeList24 = org.jsoup.parser.Parser.parseFragment("", element21, "", parseErrorList23);
        boolean boolean25 = parseErrorList23.isEmpty();
        java.util.List<org.jsoup.nodes.Node> nodeList26 = org.jsoup.parser.Parser.parseFragment("[]", (org.jsoup.nodes.Element) document5, ":lt(52)", parseErrorList23);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.listIterator();
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str7, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#root" + "'", str10, "#root");
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.className();
        java.lang.String str4 = document1.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str5 = document1.normalName();
        java.lang.String str6 = document1.html();
        org.jsoup.nodes.Element element8 = document1.addClass("[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]");
        org.jsoup.nodes.Document document9 = document1.normalise();
        java.lang.String str10 = document1.nodeName();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#root" + "'", str5, "#root");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str6, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#document" + "'", str10, "#document");
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection connection1 = org.jsoup.Jsoup.connect("#root=\"\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Malformed URL: #root=\"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        org.jsoup.Connection connection6 = httpConnection0.ignoreContentType(false);
        org.jsoup.Connection.Method method7 = org.jsoup.Connection.Method.OPTIONS;
        boolean boolean8 = method7.hasBody();
        org.jsoup.Connection connection9 = httpConnection0.method(method7);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder10 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser11 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder10);
        org.jsoup.Connection connection12 = httpConnection0.parser(parser11);
        org.jsoup.Connection connection14 = httpConnection0.ignoreHttpErrors(true);
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertTrue("'" + method7 + "' != '" + org.jsoup.Connection.Method.OPTIONS + "'", method7.equals(org.jsoup.Connection.Method.OPTIONS));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(connection14);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = request4.multiHeaders();
        org.jsoup.Connection.Request request7 = request4.ignoreHttpErrors(true);
        java.net.URL uRL8 = request7.url();
        int int9 = request7.maxBodySize();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = request7.multiHeaders();
        org.jsoup.helper.HttpConnection httpConnection11 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request12 = httpConnection11.request();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = null;
        org.jsoup.Connection connection14 = httpConnection11.sslSocketFactory(sSLSocketFactory13);
        org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str17 = document16.id();
        java.lang.String str18 = document16.baseUri();
        org.jsoup.nodes.Element element19 = document16.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = document16.dataset();
        org.jsoup.Connection connection21 = httpConnection11.cookies(strMap20);
        org.jsoup.Connection.Request request22 = connection21.request();
        org.jsoup.Connection.Method method23 = org.jsoup.Connection.Method.OPTIONS;
        org.jsoup.Connection.Request request24 = request22.method(method23);
        org.jsoup.Connection.Request request25 = request7.method(method23);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = request25.headers();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNull(uRL8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1048576 + "'", int9 == 1048576);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(connection14);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(connection21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertTrue("'" + method23 + "' != '" + org.jsoup.Connection.Method.OPTIONS + "'", method23.equals(org.jsoup.Connection.Method.OPTIONS));
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(strMap26);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.noTracking();
        int int4 = parseErrorList1.indexOf((java.lang.Object) parseErrorList3);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList1.iterator();
        org.jsoup.parser.ParseError parseError7 = null;
        parseErrorList1.add(0, parseError7);
        java.lang.Object obj9 = parseErrorList1.clone();
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList10.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList10.parallelStream();
        int int13 = parseErrorList10.size();
        boolean boolean14 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "[null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "[null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "[null]");
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        java.io.InputStream inputStream2 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal3 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream2);
        java.io.InputStream inputStream4 = keyVal3.inputStream();
        java.io.InputStream inputStream7 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal8 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream7);
        java.io.InputStream inputStream9 = keyVal8.inputStream();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = null;
        org.jsoup.Connection connection12 = httpConnection10.sslSocketFactory(sSLSocketFactory11);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = null;
        org.jsoup.Connection connection14 = httpConnection10.sslSocketFactory(sSLSocketFactory13);
        org.jsoup.Connection.Request request15 = httpConnection10.request();
        org.jsoup.helper.HttpConnection httpConnection16 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request17 = httpConnection16.request();
        org.jsoup.Connection.Request request20 = request17.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = request20.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = request20.cookies();
        org.jsoup.Connection connection23 = httpConnection10.headers(strMap22);
        java.io.InputStream inputStream26 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream29 = new org.jsoup.internal.ConstrainableInputStream(inputStream26, 1, (int) (byte) 0);
        org.jsoup.Connection connection30 = httpConnection10.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream29);
        org.jsoup.helper.HttpConnection.KeyVal keyVal31 = keyVal8.inputStream((java.io.InputStream) constrainableInputStream29);
        constrainableInputStream29.skipNBytes(0L);
        org.jsoup.helper.HttpConnection.KeyVal keyVal34 = keyVal3.inputStream((java.io.InputStream) constrainableInputStream29);
        byte[] byteArray36 = new byte[] { (byte) 100 };
        int int39 = constrainableInputStream29.read(byteArray36, 1, (int) (byte) 0);
        java.io.InputStream inputStream42 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal43 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream42);
        java.io.InputStream inputStream44 = keyVal43.inputStream();
        java.io.InputStream inputStream47 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal48 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream47);
        java.io.InputStream inputStream49 = keyVal48.inputStream();
        org.jsoup.helper.HttpConnection httpConnection50 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory51 = null;
        org.jsoup.Connection connection52 = httpConnection50.sslSocketFactory(sSLSocketFactory51);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory53 = null;
        org.jsoup.Connection connection54 = httpConnection50.sslSocketFactory(sSLSocketFactory53);
        org.jsoup.Connection.Request request55 = httpConnection50.request();
        org.jsoup.helper.HttpConnection httpConnection56 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request57 = httpConnection56.request();
        org.jsoup.Connection.Request request60 = request57.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = request60.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap62 = request60.cookies();
        org.jsoup.Connection connection63 = httpConnection50.headers(strMap62);
        java.io.InputStream inputStream66 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream69 = new org.jsoup.internal.ConstrainableInputStream(inputStream66, 1, (int) (byte) 0);
        org.jsoup.Connection connection70 = httpConnection50.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream69);
        org.jsoup.helper.HttpConnection.KeyVal keyVal71 = keyVal48.inputStream((java.io.InputStream) constrainableInputStream69);
        constrainableInputStream69.skipNBytes(0L);
        org.jsoup.helper.HttpConnection.KeyVal keyVal74 = keyVal43.inputStream((java.io.InputStream) constrainableInputStream69);
        byte[] byteArray76 = new byte[] { (byte) 100 };
        int int79 = constrainableInputStream69.read(byteArray76, 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = constrainableInputStream29.readNBytes(byteArray76, 30000, (int) '[');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [30000, 30000 + 91) out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(keyVal3);
        org.junit.Assert.assertNull(inputStream4);
        org.junit.Assert.assertNotNull(keyVal8);
        org.junit.Assert.assertNull(inputStream9);
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(connection14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(connection23);
        org.junit.Assert.assertNotNull(connection30);
        org.junit.Assert.assertNotNull(keyVal31);
        org.junit.Assert.assertNotNull(keyVal34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(keyVal43);
        org.junit.Assert.assertNull(inputStream44);
        org.junit.Assert.assertNotNull(keyVal48);
        org.junit.Assert.assertNull(inputStream49);
        org.junit.Assert.assertNotNull(connection52);
        org.junit.Assert.assertNotNull(connection54);
        org.junit.Assert.assertNotNull(request55);
        org.junit.Assert.assertNotNull(request57);
        org.junit.Assert.assertNotNull(request60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(connection63);
        org.junit.Assert.assertNotNull(connection70);
        org.junit.Assert.assertNotNull(keyVal71);
        org.junit.Assert.assertNotNull(keyVal74);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[100]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.noTracking();
        int int4 = parseErrorList1.indexOf((java.lang.Object) parseErrorList3);
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        org.jsoup.Connection connection7 = httpConnection5.sslSocketFactory(sSLSocketFactory6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = null;
        org.jsoup.Connection connection9 = httpConnection5.sslSocketFactory(sSLSocketFactory8);
        org.jsoup.Connection connection11 = httpConnection5.ignoreContentType(true);
        boolean boolean12 = parseErrorList1.equals((java.lang.Object) true);
        org.jsoup.parser.ParseError[] parseErrorArray13 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList14 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14, parseErrorArray13);
        parseErrorList14.ensureCapacity(10);
        boolean boolean18 = parseErrorList1.remove((java.lang.Object) parseErrorList14);
        org.jsoup.helper.HttpConnection httpConnection19 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request20 = httpConnection19.request();
        org.jsoup.Connection.Request request23 = request20.addHeader("multipart/form-data", "hi!");
        boolean boolean25 = request23.hasHeader("multipart/form-data");
        int int26 = parseErrorList14.indexOf((java.lang.Object) request23);
        org.jsoup.Connection.Method method27 = org.jsoup.Connection.Method.HEAD;
        org.jsoup.Connection.Request request28 = request23.method(method27);
        org.jsoup.Connection.Request request30 = request23.removeHeader("[public=<!#root!>]");
        org.jsoup.Connection.Request request32 = request23.followRedirects(true);
        java.net.URL uRL33 = request32.url();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(connection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + method27 + "' != '" + org.jsoup.Connection.Method.HEAD + "'", method27.equals(org.jsoup.Connection.Method.HEAD));
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNull(uRL33);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.className();
        org.jsoup.select.Elements elements5 = document1.getElementsByAttributeValueMatching("multipart/form-data", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str6 = elements5.outerHtml();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection.Request request19 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection20 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response21 = httpConnection20.response();
        java.lang.String str22 = response21.statusMessage();
        java.lang.String str23 = response21.statusMessage();
        org.jsoup.Connection.Method method24 = response21.method();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = response21.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = response21.cookies();
        org.jsoup.Connection connection27 = httpConnection0.data(strMap26);
        org.jsoup.helper.HttpConnection httpConnection28 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = null;
        org.jsoup.Connection connection30 = httpConnection28.sslSocketFactory(sSLSocketFactory29);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = null;
        org.jsoup.Connection connection32 = httpConnection28.sslSocketFactory(sSLSocketFactory31);
        org.jsoup.Connection.Request request33 = httpConnection28.request();
        org.jsoup.helper.HttpConnection httpConnection34 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request35 = httpConnection34.request();
        org.jsoup.Connection.Request request38 = request35.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method39 = request35.method();
        org.jsoup.Connection connection40 = httpConnection28.method(method39);
        org.jsoup.helper.HttpConnection httpConnection41 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request42 = httpConnection41.request();
        org.jsoup.Connection.Request request45 = request42.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = request45.multiHeaders();
        org.jsoup.Connection.Request request48 = request45.ignoreHttpErrors(true);
        org.jsoup.Connection connection49 = httpConnection28.request(request48);
        org.jsoup.Connection connection50 = httpConnection0.request(request48);
        org.jsoup.Connection.Request request52 = request48.requestBody("<html>\n <head></head>\n <body>\n  Content-Encoding=\"#root\"\n </body>\n</html>");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(response21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(connection27);
        org.junit.Assert.assertNotNull(connection30);
        org.junit.Assert.assertNotNull(connection32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertTrue("'" + method39 + "' != '" + org.jsoup.Connection.Method.GET + "'", method39.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection40);
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNotNull(connection49);
        org.junit.Assert.assertNotNull(connection50);
        org.junit.Assert.assertNotNull(request52);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.KeyVal keyVal6 = httpConnection0.data(":lt(52)");
        org.jsoup.Connection.KeyVal keyVal8 = httpConnection0.data("[system$=<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    </head>\n    <body>hi!</body>\n</html>]");
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNull(keyVal6);
        org.junit.Assert.assertNull(keyVal8);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor5 = elements3.listIterator();
        org.jsoup.select.Elements elements7 = elements3.next("#text");
        org.jsoup.select.Elements elements9 = elements3.addClass("<!#root!>");
        org.jsoup.select.Elements elements11 = elements3.html("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        elements3.ensureCapacity(100);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertNotNull(elementItor5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elements11);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        java.io.InputStream inputStream23 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal24 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream23);
        java.io.InputStream inputStream25 = keyVal24.inputStream();
        org.jsoup.helper.HttpConnection httpConnection26 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = null;
        org.jsoup.Connection connection28 = httpConnection26.sslSocketFactory(sSLSocketFactory27);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = null;
        org.jsoup.Connection connection30 = httpConnection26.sslSocketFactory(sSLSocketFactory29);
        org.jsoup.Connection.Request request31 = httpConnection26.request();
        org.jsoup.helper.HttpConnection httpConnection32 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request33 = httpConnection32.request();
        org.jsoup.Connection.Request request36 = request33.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = request36.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = request36.cookies();
        org.jsoup.Connection connection39 = httpConnection26.headers(strMap38);
        java.io.InputStream inputStream42 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream45 = new org.jsoup.internal.ConstrainableInputStream(inputStream42, 1, (int) (byte) 0);
        org.jsoup.Connection connection46 = httpConnection26.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream45);
        org.jsoup.helper.HttpConnection.KeyVal keyVal47 = keyVal24.inputStream((java.io.InputStream) constrainableInputStream45);
        constrainableInputStream45.skipNBytes(0L);
        org.jsoup.Connection connection50 = httpConnection0.data("[:eq(-1)!=#doctype]", ":contains(content-encoding)", (java.io.InputStream) constrainableInputStream45);
        constrainableInputStream45.close();
        // The following exception was thrown during execution in test generation
        try {
            int int52 = constrainableInputStream45.read();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(keyVal24);
        org.junit.Assert.assertNull(inputStream25);
        org.junit.Assert.assertNotNull(connection28);
        org.junit.Assert.assertNotNull(connection30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(connection39);
        org.junit.Assert.assertNotNull(connection46);
        org.junit.Assert.assertNotNull(keyVal47);
        org.junit.Assert.assertNotNull(connection50);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        boolean boolean7 = request5.hasHeader("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        org.jsoup.Connection connection4 = httpConnection0.sslSocketFactory(sSLSocketFactory3);
        org.jsoup.Connection.Request request5 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request7 = httpConnection6.request();
        org.jsoup.Connection.Request request10 = request7.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method11 = request7.method();
        org.jsoup.Connection connection12 = httpConnection0.method(method11);
        org.jsoup.helper.HttpConnection httpConnection13 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request14 = httpConnection13.request();
        org.jsoup.Connection.Request request17 = request14.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = request17.multiHeaders();
        org.jsoup.Connection.Request request20 = request17.ignoreHttpErrors(true);
        org.jsoup.Connection connection21 = httpConnection0.request(request20);
        org.jsoup.helper.HttpConnection httpConnection22 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request23 = httpConnection22.request();
        org.jsoup.Connection connection25 = httpConnection22.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection26 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = null;
        org.jsoup.Connection connection28 = httpConnection26.sslSocketFactory(sSLSocketFactory27);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = null;
        org.jsoup.Connection connection30 = httpConnection26.sslSocketFactory(sSLSocketFactory29);
        org.jsoup.Connection.Request request31 = httpConnection26.request();
        org.jsoup.helper.HttpConnection httpConnection32 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request33 = httpConnection32.request();
        org.jsoup.Connection.Request request36 = request33.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = request36.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = request36.cookies();
        org.jsoup.Connection connection39 = httpConnection26.headers(strMap38);
        org.jsoup.Connection connection40 = httpConnection22.data(strMap38);
        org.jsoup.Connection connection42 = httpConnection22.referrer("#document");
        org.jsoup.helper.HttpConnection httpConnection43 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request44 = httpConnection43.request();
        org.jsoup.Connection.Request request47 = request44.addHeader("multipart/form-data", "hi!");
        boolean boolean49 = request47.hasHeader("multipart/form-data");
        boolean boolean51 = request47.hasHeader("multipart/form-data");
        org.jsoup.Connection.Method method52 = request47.method();
        org.jsoup.Connection.Method method53 = request47.method();
        org.jsoup.Connection.Request request56 = request47.addHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ":eq(-1)");
        org.jsoup.Connection connection57 = httpConnection22.request(request47);
        org.jsoup.Connection.Method method58 = org.jsoup.Connection.Method.PATCH;
        org.jsoup.Connection.Request request59 = request47.method(method58);
        org.jsoup.Connection.Request request60 = request20.method(method58);
        boolean boolean63 = request20.hasHeaderWithValue("SYSTEM", ":matches(null)");
        org.jsoup.Connection.Method method64 = request20.method();
        java.net.URL uRL65 = request20.url();
        java.net.Proxy proxy66 = null;
        org.jsoup.Connection.Request request67 = request20.proxy(proxy66);
        java.net.Proxy proxy68 = request67.proxy();
        java.net.URL uRL69 = request67.url();
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertTrue("'" + method11 + "' != '" + org.jsoup.Connection.Method.GET + "'", method11.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(connection21);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(connection25);
        org.junit.Assert.assertNotNull(connection28);
        org.junit.Assert.assertNotNull(connection30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(connection39);
        org.junit.Assert.assertNotNull(connection40);
        org.junit.Assert.assertNotNull(connection42);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + method52 + "' != '" + org.jsoup.Connection.Method.GET + "'", method52.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertTrue("'" + method53 + "' != '" + org.jsoup.Connection.Method.GET + "'", method53.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(connection57);
        org.junit.Assert.assertTrue("'" + method58 + "' != '" + org.jsoup.Connection.Method.PATCH + "'", method58.equals(org.jsoup.Connection.Method.PATCH));
        org.junit.Assert.assertNotNull(request59);
        org.junit.Assert.assertNotNull(request60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + method64 + "' != '" + org.jsoup.Connection.Method.PATCH + "'", method64.equals(org.jsoup.Connection.Method.PATCH));
        org.junit.Assert.assertNull(uRL65);
        org.junit.Assert.assertNotNull(request67);
        org.junit.Assert.assertNull(proxy68);
        org.junit.Assert.assertNull(uRL69);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.jsoup.nodes.DataNode dataNode2 = new org.jsoup.nodes.DataNode("*", "#cdata");
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType4 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        org.jsoup.nodes.Element element9 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType4, (org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.className();
        java.lang.String str13 = document11.outerHtml();
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.id();
        java.lang.String str17 = document15.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan19 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean20 = document15.is((org.jsoup.select.Evaluator) indexLessThan19);
        boolean boolean21 = isNthLastOfType4.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document15);
        java.lang.String str22 = document15.cssSelector();
        org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str25 = document24.className();
        java.lang.String str26 = document24.outerHtml();
        boolean boolean28 = document24.hasSameValue((java.lang.Object) 1);
        boolean boolean29 = indexLessThan1.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document24);
        org.jsoup.nodes.Document.QuirksMode quirksMode30 = org.jsoup.nodes.Document.QuirksMode.quirks;
        org.jsoup.nodes.Document document31 = document24.quirksMode(quirksMode30);
        org.jsoup.select.Elements elements34 = document31.getElementsByAttributeValueMatching("multipart/form-data", "hi!");
        boolean boolean35 = document31.hasText();
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNull(element9);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#root" + "'", str22, "#root");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str26, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + quirksMode30 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode30.equals(org.jsoup.nodes.Document.QuirksMode.quirks));
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.jsoup.select.Evaluator.Attribute attribute1 = new org.jsoup.select.Evaluator.Attribute("Content-Encoding");
        org.jsoup.parser.Tag tag3 = new org.jsoup.parser.Tag("#document");
        boolean boolean4 = tag3.isFormListed();
        boolean boolean5 = tag3.isBlock();
        org.jsoup.nodes.Element element7 = new org.jsoup.nodes.Element(tag3, "ultipart");
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str10 = document9.id();
        java.lang.String str11 = document9.baseUri();
        org.jsoup.nodes.Element element14 = document9.attr("", true);
        org.jsoup.select.Elements elements16 = document9.getElementsContainingText("#text");
        boolean boolean17 = attribute1.matches(element7, (org.jsoup.nodes.Element) document9);
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType20 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str23 = document22.id();
        org.jsoup.select.Elements elements24 = document22.previousElementSiblings();
        org.jsoup.nodes.Element element25 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType20, (org.jsoup.nodes.Element) document22);
        org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str28 = document27.className();
        java.lang.String str30 = document27.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.nodes.Element element32 = document27.text("");
        boolean boolean33 = attribute1.matches((org.jsoup.nodes.Element) document22, element32);
        org.jsoup.select.Elements elements34 = document22.siblingElements();
        org.jsoup.nodes.Element element35 = document22.head();
        org.jsoup.parser.Tag tag36 = element35.tag();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNull(element25);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(tag36);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        java.io.InputStream inputStream4 = null;
        org.jsoup.helper.HttpConnection httpConnection7 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request8 = httpConnection7.request();
        org.jsoup.Connection.Request request11 = request8.addHeader("multipart/form-data", "hi!");
        boolean boolean13 = request11.hasHeader("multipart/form-data");
        boolean boolean15 = request11.hasCookie("#text");
        org.jsoup.parser.Parser parser16 = request11.parser();
        org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse(inputStream4, "", "multipart/form-data", parser16);
        org.jsoup.parser.ParseErrorList parseErrorList18 = parser16.getErrors();
        org.jsoup.Connection connection19 = connection3.parser(parser16);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser21 = parser16.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder20);
        org.jsoup.parser.ParseSettings parseSettings24 = new org.jsoup.parser.ParseSettings(true, false);
        org.jsoup.parser.Parser parser25 = parser16.settings(parseSettings24);
        org.jsoup.parser.Parser parser27 = parser16.setTrackErrors(30000);
        org.jsoup.helper.HttpConnection httpConnection28 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request29 = httpConnection28.request();
        org.jsoup.Connection connection31 = httpConnection28.referrer("multipart/form-data");
        java.io.InputStream inputStream32 = null;
        org.jsoup.helper.HttpConnection httpConnection35 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request36 = httpConnection35.request();
        org.jsoup.Connection.Request request39 = request36.addHeader("multipart/form-data", "hi!");
        boolean boolean41 = request39.hasHeader("multipart/form-data");
        boolean boolean43 = request39.hasCookie("#text");
        org.jsoup.parser.Parser parser44 = request39.parser();
        org.jsoup.nodes.Document document45 = org.jsoup.Jsoup.parse(inputStream32, "", "multipart/form-data", parser44);
        org.jsoup.parser.ParseErrorList parseErrorList46 = parser44.getErrors();
        org.jsoup.Connection connection47 = connection31.parser(parser44);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder48 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser49 = parser44.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder48);
        org.jsoup.parser.Parser parser50 = parser27.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder48);
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parser16);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(connection19);
        org.junit.Assert.assertNotNull(parser21);
        org.junit.Assert.assertNotNull(parser25);
        org.junit.Assert.assertNotNull(parser27);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(connection31);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(request39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(parser44);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(connection47);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(parser50);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.jsoup.parser.ParseError[] parseErrorArray1 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList2 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList2, parseErrorArray1);
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.noTracking();
        int int5 = parseErrorList2.indexOf((java.lang.Object) parseErrorList4);
        org.jsoup.helper.HttpConnection httpConnection6 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection6.sslSocketFactory(sSLSocketFactory7);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = null;
        org.jsoup.Connection connection10 = httpConnection6.sslSocketFactory(sSLSocketFactory9);
        org.jsoup.Connection connection12 = httpConnection6.ignoreContentType(true);
        boolean boolean13 = parseErrorList2.equals((java.lang.Object) true);
        org.jsoup.nodes.DataNode dataNode16 = org.jsoup.nodes.DataNode.createFromEncoded("#text", "");
        java.lang.String str17 = dataNode16.getWholeData();
        org.jsoup.nodes.DataNode dataNode19 = dataNode16.setWholeData("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.nodes.LeafNode[] leafNodeArray20 = new org.jsoup.nodes.LeafNode[] { dataNode19 };
        org.jsoup.nodes.LeafNode[] leafNodeArray21 = parseErrorList2.toArray(leafNodeArray20);
        org.jsoup.select.Selector.SelectorParseException selectorParseException22 = new org.jsoup.select.Selector.SelectorParseException(":lt(52)", (java.lang.Object[]) leafNodeArray21);
        java.lang.Throwable[] throwableArray23 = selectorParseException22.getSuppressed();
        org.jsoup.HttpStatusException httpStatusException27 = new org.jsoup.HttpStatusException("Content-Encoding=\"#root\"", (int) (short) 1, ":nth-last-of-type(100n-1)");
        java.lang.String str28 = httpStatusException27.getUrl();
        selectorParseException22.addSuppressed((java.lang.Throwable) httpStatusException27);
        java.lang.String str30 = httpStatusException27.getUrl();
        org.junit.Assert.assertNotNull(parseErrorArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(connection10);
        org.junit.Assert.assertNotNull(connection12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dataNode16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#text" + "'", str17, "#text");
        org.junit.Assert.assertNotNull(dataNode19);
        org.junit.Assert.assertNotNull(leafNodeArray20);
        org.junit.Assert.assertNotNull(leafNodeArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + ":nth-last-of-type(100n-1)" + "'", str28, ":nth-last-of-type(100n-1)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + ":nth-last-of-type(100n-1)" + "'", str30, ":nth-last-of-type(100n-1)");
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.nodes.Document.QuirksMode quirksMode4 = document1.quirksMode();
        boolean boolean6 = document1.hasClass("multipart/form-data");
        org.jsoup.parser.Tag tag7 = document1.tag();
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType10 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str13 = document12.wholeText();
        org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str16 = document15.className();
        boolean boolean17 = isNthLastOfType10.matches((org.jsoup.nodes.Element) document12, (org.jsoup.nodes.Element) document15);
        org.jsoup.nodes.Document document18 = document12.clone();
        org.jsoup.nodes.Element element20 = document12.tagName("#root");
        java.lang.String str21 = element20.tagName();
        org.jsoup.nodes.Node node22 = element20.clone();
        java.lang.String[] strArray50 = new java.lang.String[] { "<html>\n <head></head> \n <body>\n   hi!  \n </body>\n</html>", "[public=<!#root!>]", "                                   ", " hi!=\"multipart/form-data\"", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<#root value=\"hi!\">\n <html>\n  <head></head>\n  <body>\n   hi!\n  </body>\n </html>\n</#root>", "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "#doctype", ":gt(35)", ":last-child", ":contains(content-encoding)", "#root", "Content-Encoding", ":first-child", "[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]", "multipart/form-data", ":only-child", "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!", ":first-child", ":only-child", ":lt(52)", "[]", "application/x-www-form-urlencoded", "<!#root!>", "<html>\n    <head>\n        <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    </head>\n    <body>hi!</body>\n</html>\n", "SYSTEM", "SYSTEM", "hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.jsoup.nodes.Element element53 = element20.classNames((java.util.Set<java.lang.String>) strSet51);
        int int54 = element53.siblingIndex();
        org.jsoup.nodes.Element element55 = document1.prependChild((org.jsoup.nodes.Node) element53);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertTrue("'" + quirksMode4 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode4.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#root" + "'", str21, "#root");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(element53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(element55);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        boolean boolean6 = request4.hasHeader("multipart/form-data");
        java.lang.String str8 = request4.cookie("#root");
        org.jsoup.Connection.Request request10 = request4.timeout((int) ' ');
        boolean boolean11 = request10.ignoreHttpErrors();
        boolean boolean12 = request10.followRedirects();
        org.jsoup.Connection.Request request14 = request10.requestBody("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        org.jsoup.Connection.Request request17 = request10.proxy("", (int) 'u');
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(request17);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        java.lang.String str3 = document1.baseUri();
        org.jsoup.nodes.Element element4 = document1.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = document1.dataset();
        org.jsoup.select.Elements elements8 = document1.getElementsByAttributeValueStarting("PUBLIC", "org.jsoup.HttpStatusException: Content-Type. Status=-1, URL=#declaration");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(elements8);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.select.Evaluator.AttributeWithValueContaining("Content-Encoding", "Content-Encoding=\"#root\"");
        java.lang.String str3 = attributeWithValueContaining2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[content-encoding*=content-encoding=\"#root\"]" + "'", str3, "[content-encoding*=content-encoding=\"#root\"]");
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.jsoup.helper.HttpConnection.KeyVal keyVal2 = org.jsoup.helper.HttpConnection.KeyVal.create("#root", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        java.io.InputStream inputStream3 = null;
        org.jsoup.Connection.KeyVal keyVal4 = keyVal2.inputStream(inputStream3);
        org.jsoup.helper.HttpConnection.KeyVal keyVal6 = keyVal2.key(":eq(-1)");
        java.io.InputStream inputStream7 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream10 = new org.jsoup.internal.ConstrainableInputStream(inputStream7, 1, (int) (byte) 0);
        org.jsoup.helper.HttpConnection.KeyVal keyVal11 = keyVal2.inputStream((java.io.InputStream) constrainableInputStream10);
        constrainableInputStream10.mark((int) '\000');
        org.junit.Assert.assertNotNull(keyVal2);
        org.junit.Assert.assertNotNull(keyVal4);
        org.junit.Assert.assertNotNull(keyVal6);
        org.junit.Assert.assertNotNull(keyVal11);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        java.io.InputStream inputStream4 = null;
        org.jsoup.Connection connection6 = httpConnection0.data("#root", "Content-Encoding", inputStream4, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.jsoup.helper.HttpConnection httpConnection7 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request8 = httpConnection7.request();
        org.jsoup.Connection.Request request11 = request8.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = request11.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = request11.cookies();
        org.jsoup.Connection connection14 = httpConnection0.headers(strMap13);
        org.jsoup.Connection connection17 = httpConnection0.cookie("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        org.jsoup.Connection.KeyVal keyVal19 = httpConnection0.data("<#root=\"\"></#root=\"\">");
        org.jsoup.Connection.KeyVal keyVal21 = httpConnection0.data(":empty");
        org.jsoup.parser.TokenQueue tokenQueue23 = new org.jsoup.parser.TokenQueue("multipart/form-data");
        java.lang.String str24 = tokenQueue23.toString();
        boolean boolean25 = tokenQueue23.consumeWhitespace();
        java.lang.String str27 = tokenQueue23.consumeTo("multipart");
        tokenQueue23.addFirst("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!", "", "multipart/form-data", "hi!" };
        boolean boolean38 = org.jsoup.internal.StringUtil.in("", strArray37);
        boolean boolean39 = org.jsoup.internal.StringUtil.in("", strArray37);
        java.lang.String str41 = org.jsoup.internal.StringUtil.join(strArray37, " hi!=\"multipart/form-data\"");
        java.lang.String str42 = tokenQueue23.consumeToAny(strArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection connection43 = httpConnection0.data(strArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply an even number of key value pairs");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(connection14);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNull(keyVal19);
        org.junit.Assert.assertNull(keyVal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multipart/form-data" + "'", str24, "multipart/form-data");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!" + "'", str41, "hi! hi!=\"multipart/form-data\"hi! hi!=\"multipart/form-data\" hi!=\"multipart/form-data\"multipart/form-data hi!=\"multipart/form-data\"hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) (byte) -1);
        java.lang.String str2 = indexEquals1.toString();
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("#root");
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan6 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType9 = new org.jsoup.select.Evaluator.IsNthLastOfType(100, (int) (byte) -1);
        org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str12 = document11.id();
        org.jsoup.select.Elements elements13 = document11.previousElementSiblings();
        org.jsoup.nodes.Element element14 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) isNthLastOfType9, (org.jsoup.nodes.Element) document11);
        org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str17 = document16.className();
        java.lang.String str18 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str21 = document20.id();
        java.lang.String str22 = document20.baseUri();
        org.jsoup.select.Evaluator.IndexLessThan indexLessThan24 = new org.jsoup.select.Evaluator.IndexLessThan((int) '4');
        boolean boolean25 = document20.is((org.jsoup.select.Evaluator) indexLessThan24);
        boolean boolean26 = isNthLastOfType9.matches((org.jsoup.nodes.Element) document16, (org.jsoup.nodes.Element) document20);
        java.lang.String str27 = document20.cssSelector();
        org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str30 = document29.className();
        java.lang.String str31 = document29.outerHtml();
        boolean boolean33 = document29.hasSameValue((java.lang.Object) 1);
        boolean boolean34 = indexLessThan6.matches((org.jsoup.nodes.Element) document20, (org.jsoup.nodes.Element) document29);
        org.jsoup.parser.Parser parser35 = document20.parser();
        org.jsoup.select.Evaluator.IsFirstOfType isFirstOfType36 = new org.jsoup.select.Evaluator.IsFirstOfType();
        java.lang.String str37 = isFirstOfType36.toString();
        boolean boolean38 = document20.is((org.jsoup.select.Evaluator) isFirstOfType36);
        boolean boolean39 = indexEquals1.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document20);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element41 = document4.before("#data");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":eq(-1)" + "'", str2, ":eq(-1)");
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNull(element14);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "#root" + "'", str27, "#root");
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str31, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(parser35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + ":first-of-type" + "'", str37, ":first-of-type");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor4 = elements3.listIterator();
        boolean boolean6 = elements3.equals((java.lang.Object) 1.0d);
        java.lang.String str7 = elements3.text();
        org.jsoup.select.Elements elements9 = elements3.wrap("#root");
        org.jsoup.select.Elements elements11 = elements9.prevAll("#document");
        org.jsoup.select.NodeFilter nodeFilter12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements13 = elements9.filter(nodeFilter12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elements11);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements3 = document1.previousElementSiblings();
        org.jsoup.nodes.Document.QuirksMode quirksMode4 = document1.quirksMode();
        boolean boolean6 = document1.hasClass("multipart/form-data");
        org.jsoup.parser.Tag tag7 = document1.tag();
        boolean boolean8 = tag7.isEmpty();
        java.lang.String str9 = tag7.getName();
        java.lang.String str10 = tag7.toString();
        boolean boolean11 = tag7.isSelfClosing();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertTrue("'" + quirksMode4 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode4.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#root" + "'", str9, "#root");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#root" + "'", str10, "#root");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse(inputStream0, ":eq(-1)=mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", "[content-encoding*=content-encoding=\"#root\"]");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: :eq(-1)=mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream0);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("PUBLIC", "[hi!   hi!  hi!   hi!     hi!  multipart/form-data   hi!  hi!=multipart/form-data]");
        org.jsoup.select.Elements elements3 = document2.nextElementSiblings();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(elements3);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attribute attribute3 = org.jsoup.nodes.Attribute.createFromEncoded("#root", "");
        org.jsoup.nodes.Attributes attributes4 = attributes0.put(attribute3);
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor9 = elements8.listIterator();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor10 = elements8.listIterator();
        org.jsoup.select.Elements elements11 = elements8.empty();
        boolean boolean12 = attributes4.equals((java.lang.Object) elements8);
        java.lang.String str13 = elements8.toString();
        org.jsoup.select.Elements elements15 = elements8.before(":eq(-1)");
        java.lang.String str16 = elements15.outerHtml();
        org.junit.Assert.assertNotNull(attribute3);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elementItor9);
        org.junit.Assert.assertNotNull(elementItor10);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.select.Evaluator.AttributeWithValueContaining("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "#doctype");
        java.lang.String str3 = attributeWithValueContaining2.toString();
        java.lang.String str4 = attributeWithValueContaining2.toString();
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str7 = document6.id();
        org.jsoup.select.Elements elements8 = document6.previousElementSiblings();
        org.jsoup.select.Elements elements10 = elements8.prev("#text");
        org.jsoup.select.Elements elements12 = elements10.prev("#root");
        org.jsoup.parser.ParseError[] parseErrorArray13 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList14 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14, parseErrorArray13);
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.noTracking();
        int int17 = parseErrorList14.indexOf((java.lang.Object) parseErrorList16);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList14.iterator();
        boolean boolean19 = elements10.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14);
        org.jsoup.parser.ParseError parseError20 = null;
        boolean boolean21 = parseErrorList14.add(parseError20);
        org.jsoup.helper.HttpConnection httpConnection22 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request23 = httpConnection22.request();
        org.jsoup.Connection.Request request26 = request23.addHeader("multipart/form-data", "hi!");
        boolean boolean28 = request26.hasHeader("multipart/form-data");
        boolean boolean30 = request26.hasCookie("#text");
        org.jsoup.parser.Parser parser31 = request26.parser();
        org.jsoup.Connection.Request request34 = request26.header("#text", "multipart/form-data");
        boolean boolean35 = parseErrorList14.remove((java.lang.Object) request34);
        org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str38 = document37.id();
        java.lang.String str39 = document37.baseUri();
        org.jsoup.nodes.Element element40 = document37.body();
        org.jsoup.helper.HttpConnection httpConnection41 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request42 = httpConnection41.request();
        org.jsoup.Connection.Request request45 = request42.addHeader("multipart/form-data", "hi!");
        boolean boolean47 = request45.hasHeader("multipart/form-data");
        boolean boolean49 = request45.hasCookie("#text");
        org.jsoup.parser.Parser parser50 = request45.parser();
        org.jsoup.nodes.Document document51 = document37.parser(parser50);
        java.util.List<org.jsoup.nodes.Node> nodeList52 = document51.siblingNodes();
        boolean boolean53 = parseErrorList14.equals((java.lang.Object) document51);
        org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str56 = document55.className();
        java.lang.String str58 = document55.attr("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        java.lang.String str59 = document55.normalName();
        java.lang.String str60 = document55.html();
        org.jsoup.nodes.Element element63 = document55.attr(":only-child", "#doctype");
        boolean boolean64 = attributeWithValueContaining2.matches((org.jsoup.nodes.Element) document51, (org.jsoup.nodes.Element) document55);
        org.jsoup.nodes.Element element66 = document55.addClass(" ");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36*=#doctype]" + "'", str3, "[mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36*=#doctype]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36*=#doctype]" + "'", str4, "[mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36*=#doctype]");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(parseErrorArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parser31);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(parser50);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "#root" + "'", str59, "#root");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>" + "'", str60, "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>");
        org.junit.Assert.assertNotNull(element63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(element66);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        java.net.URL uRL5 = response4.url();
        org.jsoup.Connection.Response response8 = response4.cookie("[=:first-child]", ":eq(-1)=mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36");
        java.util.List<java.lang.String> strList10 = response8.headers("#document=[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]");
        org.jsoup.Connection.Response response13 = response8.cookie("[:eq(-1)!=#doctype]", "<!hi!!>");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNull(uRL5);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(response13);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.jsoup.parser.Tag tag1 = new org.jsoup.parser.Tag("#document");
        boolean boolean2 = tag1.formatAsBlock();
        java.lang.String str3 = tag1.toString();
        org.jsoup.nodes.Attributes attributes5 = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Attributes attributes8 = attributes5.put("<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>", false);
        org.jsoup.nodes.Attributes attributes11 = attributes5.add("hi!", "multipart/form-data");
        java.lang.String str12 = attributes11.html();
        org.jsoup.nodes.Attributes attributes13 = attributes11.clone();
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor14 = attributes11.iterator();
        org.jsoup.nodes.PseudoTextElement pseudoTextElement15 = new org.jsoup.nodes.PseudoTextElement(tag1, "ultipart", attributes11);
        boolean boolean16 = tag1.formatAsBlock();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#document" + "'", str3, "#document");
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + " hi!=\"multipart/form-data\"" + "'", str12, " hi!=\"multipart/form-data\"");
        org.junit.Assert.assertNotNull(attributes13);
        org.junit.Assert.assertNotNull(attributeItor14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.jsoup.select.Elements elements0 = new org.jsoup.select.Elements();
        org.jsoup.select.Elements elements2 = elements0.prepend("#:first-child");
        boolean boolean4 = elements0.is(":matches(null)");
        org.junit.Assert.assertNotNull(elements2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        org.jsoup.Connection connection6 = httpConnection0.ignoreContentType(false);
        org.jsoup.Connection.Request request7 = httpConnection0.request();
        org.jsoup.Connection connection10 = httpConnection0.cookie(":lt(52)", "multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection13 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        org.jsoup.Connection connection15 = httpConnection13.sslSocketFactory(sSLSocketFactory14);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = null;
        org.jsoup.Connection connection17 = httpConnection13.sslSocketFactory(sSLSocketFactory16);
        org.jsoup.Connection.Request request18 = httpConnection13.request();
        org.jsoup.helper.HttpConnection httpConnection19 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request20 = httpConnection19.request();
        org.jsoup.Connection.Request request23 = request20.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = request23.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = request23.cookies();
        org.jsoup.Connection connection26 = httpConnection13.headers(strMap25);
        java.io.InputStream inputStream29 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream32 = new org.jsoup.internal.ConstrainableInputStream(inputStream29, 1, (int) (byte) 0);
        org.jsoup.Connection connection33 = httpConnection13.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream32);
        org.jsoup.Connection connection34 = httpConnection0.data("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!", "<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", (java.io.InputStream) constrainableInputStream32);
        long long36 = constrainableInputStream32.skip(0L);
        java.io.OutputStream outputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long38 = constrainableInputStream32.transferTo(outputStream37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: out");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(connection10);
        org.junit.Assert.assertNotNull(connection15);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(connection26);
        org.junit.Assert.assertNotNull(connection33);
        org.junit.Assert.assertNotNull(connection34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = request4.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = request4.cookies();
        org.jsoup.Connection.Request request9 = request4.header("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "#root");
        org.jsoup.Connection.Request request12 = request9.header("ultipart", "");
        org.jsoup.Connection.Method method13 = request9.method();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertTrue("'" + method13 + "' != '" + org.jsoup.Connection.Method.GET + "'", method13.equals(org.jsoup.Connection.Method.GET));
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory1 = null;
        org.jsoup.Connection connection2 = httpConnection0.sslSocketFactory(sSLSocketFactory1);
        org.jsoup.Connection connection4 = httpConnection0.ignoreHttpErrors(false);
        org.jsoup.Connection connection7 = httpConnection0.cookie("multipart", "#doctype");
        org.jsoup.Connection connection9 = httpConnection0.userAgent("<![CDATA[<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>]]>");
        org.junit.Assert.assertNotNull(connection2);
        org.junit.Assert.assertNotNull(connection4);
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(connection9);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(1048576);
        org.junit.Assert.assertNotNull(parseErrorList1);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection.Request request4 = request1.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = request4.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = request4.cookies();
        org.jsoup.helper.HttpConnection httpConnection7 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = null;
        org.jsoup.Connection connection9 = httpConnection7.sslSocketFactory(sSLSocketFactory8);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        org.jsoup.Connection connection11 = httpConnection7.sslSocketFactory(sSLSocketFactory10);
        org.jsoup.Connection.Request request12 = httpConnection7.request();
        org.jsoup.helper.HttpConnection httpConnection13 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request14 = httpConnection13.request();
        org.jsoup.Connection.Request request17 = request14.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method18 = request14.method();
        org.jsoup.Connection connection19 = httpConnection7.method(method18);
        org.jsoup.Connection.Request request20 = connection19.request();
        org.jsoup.helper.HttpConnection httpConnection21 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request22 = httpConnection21.request();
        org.jsoup.Connection.Request request25 = request22.addHeader("multipart/form-data", "hi!");
        org.jsoup.Connection.Method method26 = request22.method();
        org.jsoup.Connection connection27 = connection19.method(method26);
        org.jsoup.Connection.Request request28 = request4.method(method26);
        org.jsoup.Connection.Method method29 = request4.method();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(connection11);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertTrue("'" + method18 + "' != '" + org.jsoup.Connection.Method.GET + "'", method18.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertTrue("'" + method26 + "' != '" + org.jsoup.Connection.Method.GET + "'", method26.equals(org.jsoup.Connection.Method.GET));
        org.junit.Assert.assertNotNull(connection27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertTrue("'" + method29 + "' != '" + org.jsoup.Connection.Method.GET + "'", method29.equals(org.jsoup.Connection.Method.GET));
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.noTracking();
        int int4 = parseErrorList1.indexOf((java.lang.Object) parseErrorList3);
        org.jsoup.helper.HttpConnection httpConnection5 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        org.jsoup.Connection connection7 = httpConnection5.sslSocketFactory(sSLSocketFactory6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = null;
        org.jsoup.Connection connection9 = httpConnection5.sslSocketFactory(sSLSocketFactory8);
        org.jsoup.Connection connection11 = httpConnection5.ignoreContentType(true);
        boolean boolean12 = parseErrorList1.equals((java.lang.Object) true);
        org.jsoup.parser.ParseError[] parseErrorArray13 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList14 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14, parseErrorArray13);
        parseErrorList14.ensureCapacity(10);
        boolean boolean18 = parseErrorList1.remove((java.lang.Object) parseErrorList14);
        parseErrorList14.ensureCapacity((int) (short) 100);
        org.jsoup.nodes.Element element22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.List<org.jsoup.nodes.Node> nodeList25 = org.jsoup.parser.Parser.parseFragment("", element22, "", parseErrorList24);
        java.lang.Object obj26 = parseErrorList24.clone();
        boolean boolean27 = parseErrorList14.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(connection7);
        org.junit.Assert.assertNotNull(connection9);
        org.junit.Assert.assertNotNull(connection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.helper.HttpConnection httpConnection4 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        org.jsoup.Connection connection6 = httpConnection4.sslSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        org.jsoup.Connection connection8 = httpConnection4.sslSocketFactory(sSLSocketFactory7);
        org.jsoup.Connection.Request request9 = httpConnection4.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request11 = httpConnection10.request();
        org.jsoup.Connection.Request request14 = request11.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = request14.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = request14.cookies();
        org.jsoup.Connection connection17 = httpConnection4.headers(strMap16);
        org.jsoup.Connection connection18 = httpConnection0.data(strMap16);
        org.jsoup.Connection connection20 = httpConnection0.referrer("#document");
        java.io.InputStream inputStream25 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal26 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream25);
        java.io.InputStream inputStream27 = keyVal26.inputStream();
        java.io.InputStream inputStream30 = null;
        org.jsoup.helper.HttpConnection.KeyVal keyVal31 = org.jsoup.helper.HttpConnection.KeyVal.create("Content-Encoding", "#declaration", inputStream30);
        java.io.InputStream inputStream32 = keyVal31.inputStream();
        org.jsoup.helper.HttpConnection httpConnection33 = new org.jsoup.helper.HttpConnection();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = null;
        org.jsoup.Connection connection35 = httpConnection33.sslSocketFactory(sSLSocketFactory34);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory36 = null;
        org.jsoup.Connection connection37 = httpConnection33.sslSocketFactory(sSLSocketFactory36);
        org.jsoup.Connection.Request request38 = httpConnection33.request();
        org.jsoup.helper.HttpConnection httpConnection39 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request40 = httpConnection39.request();
        org.jsoup.Connection.Request request43 = request40.addHeader("multipart/form-data", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = request43.multiHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = request43.cookies();
        org.jsoup.Connection connection46 = httpConnection33.headers(strMap45);
        java.io.InputStream inputStream49 = null;
        org.jsoup.internal.ConstrainableInputStream constrainableInputStream52 = new org.jsoup.internal.ConstrainableInputStream(inputStream49, 1, (int) (byte) 0);
        org.jsoup.Connection connection53 = httpConnection33.data("#declaration", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]", (java.io.InputStream) constrainableInputStream52);
        org.jsoup.helper.HttpConnection.KeyVal keyVal54 = keyVal31.inputStream((java.io.InputStream) constrainableInputStream52);
        constrainableInputStream52.skipNBytes(0L);
        org.jsoup.helper.HttpConnection.KeyVal keyVal57 = keyVal26.inputStream((java.io.InputStream) constrainableInputStream52);
        byte[] byteArray59 = new byte[] { (byte) 100 };
        int int62 = constrainableInputStream52.read(byteArray59, 1, (int) (byte) 0);
        org.jsoup.Connection connection63 = httpConnection0.data("#declaration", "", (java.io.InputStream) constrainableInputStream52);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse((java.io.InputStream) constrainableInputStream52, "hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!multipart/form-data", "[hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!=multipart/form-data]");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(connection6);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(connection17);
        org.junit.Assert.assertNotNull(connection18);
        org.junit.Assert.assertNotNull(connection20);
        org.junit.Assert.assertNotNull(keyVal26);
        org.junit.Assert.assertNull(inputStream27);
        org.junit.Assert.assertNotNull(keyVal31);
        org.junit.Assert.assertNull(inputStream32);
        org.junit.Assert.assertNotNull(connection35);
        org.junit.Assert.assertNotNull(connection37);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(connection46);
        org.junit.Assert.assertNotNull(connection53);
        org.junit.Assert.assertNotNull(keyVal54);
        org.junit.Assert.assertNotNull(keyVal57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(connection63);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document("#cdata");
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue(":last-child");
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.jsoup.nodes.DataNode dataNode2 = org.jsoup.nodes.DataNode.createFromEncoded(":first-of-type", ":contains(content-encoding)");
        org.junit.Assert.assertNotNull(dataNode2);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("[]", "#text");
        org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str5 = document4.id();
        java.lang.String str6 = document4.baseUri();
        org.jsoup.nodes.Element element9 = document4.attr("", true);
        java.lang.String str10 = document4.title();
        java.lang.String str11 = document4.className();
        java.lang.StringBuilder stringBuilder12 = org.jsoup.internal.StringUtil.borrowBuilder();
        java.lang.Appendable appendable13 = document4.html((java.lang.Appendable) stringBuilder12);
        java.lang.Appendable appendable14 = document2.html(appendable13);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = document2.outputSettings();
        org.jsoup.nodes.Attributes attributes16 = document2.attributes();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(element9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(stringBuilder12);
        org.junit.Assert.assertEquals(stringBuilder12.toString(), "<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>\n<html>\n <head></head>\n <body>\n  []\n </body>\n</html>");
        org.junit.Assert.assertNotNull(appendable13);
        org.junit.Assert.assertNotNull(appendable14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(attributes16);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory2 = null;
        org.jsoup.Connection connection3 = httpConnection0.sslSocketFactory(sSLSocketFactory2);
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi!");
        java.lang.String str6 = document5.id();
        java.lang.String str7 = document5.baseUri();
        org.jsoup.nodes.Element element8 = document5.clearAttributes();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = document5.dataset();
        org.jsoup.Connection connection10 = httpConnection0.cookies(strMap9);
        org.jsoup.Connection.Request request11 = connection10.request();
        org.jsoup.Connection.Method method12 = org.jsoup.Connection.Method.OPTIONS;
        org.jsoup.Connection.Request request13 = request11.method(method12);
        boolean boolean16 = request11.hasHeaderWithValue("[]", "                                                                                                    ");
        java.util.List<java.lang.String> strList18 = request11.headers("<!hi!!>");
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(connection10);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertTrue("'" + method12 + "' != '" + org.jsoup.Connection.Method.OPTIONS + "'", method12.equals(org.jsoup.Connection.Method.OPTIONS));
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages();
        boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3);
        boolean boolean5 = org.jsoup.Jsoup.isValid("hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html><html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>multipart/form-data<html>\n <head></head>\n <body>\n  hi!\n </body>\n</html>hi!", whitelist3);
        org.jsoup.safety.Whitelist whitelist8 = whitelist3.removeEnforcedAttribute("org.jsoup.select.Selector$SelectorParseException: #doctype", "#data");
        java.lang.String str9 = org.jsoup.Jsoup.clean(":empty", whitelist3);
        org.junit.Assert.assertNotNull(whitelist3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(whitelist8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + ":empty" + "'", str9, ":empty");
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.jsoup.helper.HttpConnection httpConnection0 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Request request1 = httpConnection0.request();
        org.jsoup.Connection connection3 = httpConnection0.referrer("multipart/form-data");
        org.jsoup.Connection.Response response4 = httpConnection0.response();
        java.io.InputStream inputStream7 = null;
        org.jsoup.Connection connection8 = httpConnection0.data("#document", "hi!", inputStream7);
        org.jsoup.Connection.Request request9 = httpConnection0.request();
        org.jsoup.helper.HttpConnection httpConnection10 = new org.jsoup.helper.HttpConnection();
        org.jsoup.Connection.Response response11 = httpConnection10.response();
        java.lang.String str12 = response11.statusMessage();
        org.jsoup.Connection.Response response14 = response11.removeCookie("Content-Encoding");
        org.jsoup.Connection.Response response16 = response14.charset("PUBLIC");
        org.jsoup.Connection connection17 = httpConnection0.response(response16);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response18 = response16.bufferUp();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(connection3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(connection8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertNotNull(connection17);
    }
}
