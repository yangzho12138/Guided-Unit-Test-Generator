package org.jsoup.mytests;
import org.junit.Test;
import static org.junit.Assert.*;
import org.jsoup.nodes.*;
import org.jsoup.select.*;
import org.jsoup.examples.*;
import org.jsoup.parser.*;
import org.jsoup.helper.*;
import org.jsoup.internal.*;
import org.jsoup.safety.*;
import org.jsoup.*;

public class AutomatedTest {
    @Test
    public void testAttributesget35756400() {
        Attributes attributes = new Attributes();
        attributes.get("typd");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget3081290261() {
        Attributes attributes = new Attributes();
        attributes.get(":last-child");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget14229508262() {
        Attributes attributes = new Attributes();
        attributes.get("actioo");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget570706523() {
        Attributes attributes = new Attributes();
        attributes.get(":roou");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget10032436864() {
        Attributes attributes = new Attributes();
        attributes.get("textareb");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase31255600() {
        Attributes attributes = new Attributes();
        attributes.getIgnoreCase("evem");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase33868631() {
        Attributes attributes = new Attributes();
        attributes.getIgnoreCase("nobq");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase18912061172() {
        Attributes attributes = new Attributes();
        attributes.getIgnoreCase(":nth-of-type'");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase2882752493() {
        Attributes attributes = new Attributes();
        attributes.getIgnoreCase(":nth-child)");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase3081290274() {
        Attributes attributes = new Attributes();
        attributes.getIgnoreCase(":last-chilc");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd806652320() {
        Attributes attributes = new Attributes();
        attributes.add("lh","optgrouo");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd17554768611() {
        Attributes attributes = new Attributes();
        attributes.add("action","button");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd33815542() {
        Attributes attributes = new Attributes();
        attributes.add("$<","mati");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd2399448213() {
        Attributes attributes = new Attributes();
        attributes.add("keygem",":first-chilc");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd13214534124() {
        Attributes attributes = new Attributes();
        attributes.add("^>","templatf");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput2475455660() {
        Attributes attributes = new Attributes();
        attributes.put("[a-zA-Z_:][-a-zA-Z0-9_:.]*",":containsOwn'");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput4059318661() {
        Attributes attributes = new Attributes();
        attributes.put("isindex","de");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput6361543872() {
        Attributes attributes = new Attributes();
        attributes.put("*>","colgrouq");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput19803198403() {
        Attributes attributes = new Attributes();
        attributes.put("dt","Set-Cookie");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput3929466474() {
        Attributes attributes = new Attributes();
        attributes.put("bgsound",":nth-child)");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput565632730() {
        Attributes attributes = new Attributes();
        attributes.put(":all",true);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput19265169981() {
        Attributes attributes = new Attributes();
        attributes.put("scrips",true);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput464292() {
        Attributes attributes = new Attributes();
        attributes.put("*}",true);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput566851653() {
        Attributes attributes = new Attributes();
        attributes.put(":eq)",true);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput12634910714() {
        Attributes attributes = new Attributes();
        attributes.put("Set-Cookie",true);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput310() {
        Attributes attributes = new Attributes();
        attributes.put((Attribute) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput311() {
        Attributes attributes = new Attributes();
        attributes.put((Attribute) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput312() {
        Attributes attributes = new Attributes();
        attributes.put((Attribute) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput313() {
        Attributes attributes = new Attributes();
        attributes.put((Attribute) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput314() {
        Attributes attributes = new Attributes();
        attributes.put((Attribute) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove15515509540() {
        Attributes attributes = new Attributes();
        attributes.remove("noscrips");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove13776877281() {
        Attributes attributes = new Attributes();
        attributes.remove("buttom");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove35367462() {
        Attributes attributes = new Attributes();
        attributes.remove("spao");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove358296673() {
        Attributes attributes = new Attributes();
        attributes.remove("#roos");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove30054() {
        Attributes attributes = new Attributes();
        attributes.remove("^<");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase1103714480() {
        Attributes attributes = new Attributes();
        attributes.removeIgnoreCase("titlf");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase901() {
        Attributes attributes = new Attributes();
        attributes.removeIgnoreCase(";");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase30052() {
        Attributes attributes = new Attributes();
        attributes.removeIgnoreCase("^<");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase13776877263() {
        Attributes attributes = new Attributes();
        attributes.removeIgnoreCase("buttoo");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase35118024() {
        Attributes attributes = new Attributes();
        attributes.removeIgnoreCase("rubz");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey18305290() {
        Attributes attributes = new Attributes();
        attributes.hasKey(":gt)");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey35756401() {
        Attributes attributes = new Attributes();
        attributes.hasKey("typd");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey32134782() {
        Attributes attributes = new Attributes();
        attributes.hasKey("htto");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey31490283() {
        Attributes attributes = new Attributes();
        attributes.hasKey("forn");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey31834() {
        Attributes attributes = new Attributes();
        attributes.hasKey("br");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase2882752470() {
        Attributes attributes = new Attributes();
        attributes.hasKeyIgnoreCase(":nth-child'");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase9076856531() {
        Attributes attributes = new Attributes();
        attributes.hasKeyIgnoreCase("scripu");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase14229508262() {
        Attributes attributes = new Attributes();
        attributes.hasKeyIgnoreCase("actioo");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase14563() {
        Attributes attributes = new Attributes();
        attributes.hasKeyIgnoreCase("*{");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase19732341984() {
        Attributes attributes = new Attributes();
        attributes.hasKeyIgnoreCase("plaintext");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize10() {
        Attributes attributes = new Attributes();
        attributes.size();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize11() {
        Attributes attributes = new Attributes();
        attributes.size();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize12() {
        Attributes attributes = new Attributes();
        attributes.size();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize13() {
        Attributes attributes = new Attributes();
        attributes.size();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize14() {
        Attributes attributes = new Attributes();
        attributes.size();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty10() {
        Attributes attributes = new Attributes();
        attributes.isEmpty();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty11() {
        Attributes attributes = new Attributes();
        attributes.isEmpty();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty12() {
        Attributes attributes = new Attributes();
        attributes.isEmpty();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty13() {
        Attributes attributes = new Attributes();
        attributes.isEmpty();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty14() {
        Attributes attributes = new Attributes();
        attributes.isEmpty();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll310() {
        Attributes attributes = new Attributes();
        attributes.addAll((Attributes) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll311() {
        Attributes attributes = new Attributes();
        attributes.addAll((Attributes) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll312() {
        Attributes attributes = new Attributes();
        attributes.addAll((Attributes) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll313() {
        Attributes attributes = new Attributes();
        attributes.addAll((Attributes) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll314() {
        Attributes attributes = new Attributes();
        attributes.addAll((Attributes) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList10() {
        Attributes attributes = new Attributes();
        attributes.asList();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList11() {
        Attributes attributes = new Attributes();
        attributes.asList();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList12() {
        Attributes attributes = new Attributes();
        attributes.asList();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList13() {
        Attributes attributes = new Attributes();
        attributes.asList();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList14() {
        Attributes attributes = new Attributes();
        attributes.asList();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset10() {
        Attributes attributes = new Attributes();
        attributes.dataset();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset11() {
        Attributes attributes = new Attributes();
        attributes.dataset();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset12() {
        Attributes attributes = new Attributes();
        attributes.dataset();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset13() {
        Attributes attributes = new Attributes();
        attributes.dataset();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset14() {
        Attributes attributes = new Attributes();
        attributes.dataset();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml10() {
        Attributes attributes = new Attributes();
        attributes.html();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml11() {
        Attributes attributes = new Attributes();
        attributes.html();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml12() {
        Attributes attributes = new Attributes();
        attributes.html();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml13() {
        Attributes attributes = new Attributes();
        attributes.html();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml14() {
        Attributes attributes = new Attributes();
        attributes.html();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize10() {
        Attributes attributes = new Attributes();
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize11() {
        Attributes attributes = new Attributes();
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize12() {
        Attributes attributes = new Attributes();
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize13() {
        Attributes attributes = new Attributes();
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize14() {
        Attributes attributes = new Attributes();
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate310() {
        Attributes attributes = new Attributes();
        attributes.deduplicate((ParseSettings) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate311() {
        Attributes attributes = new Attributes();
        attributes.deduplicate((ParseSettings) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate312() {
        Attributes attributes = new Attributes();
        attributes.deduplicate((ParseSettings) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate313() {
        Attributes attributes = new Attributes();
        attributes.deduplicate((ParseSettings) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate314() {
        Attributes attributes = new Attributes();
        attributes.deduplicate((ParseSettings) null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName10() {
        Element element = new Element();
        element.tagName();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName11() {
        Element element = new Element();
        element.tagName();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName12() {
        Element element = new Element();
        element.tagName();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName13() {
        Element element = new Element();
        element.tagName();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName14() {
        Element element = new Element();
        element.tagName();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName10() {
        Element element = new Element();
        element.normalName();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName11() {
        Element element = new Element();
        element.normalName();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName12() {
        Element element = new Element();
        element.normalName();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName13() {
        Element element = new Element();
        element.normalName();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName14() {
        Element element = new Element();
        element.normalName();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName10761623180() {
        Element element = new Element();
        element.tagName(":contains(");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName33441671() {
        Element element = new Element();
        element.tagName("math");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName14582() {
        Element element = new Element();
        element.tagName("*}");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName13776877273() {
        Element element = new Element();
        element.tagName("button");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName35756414() {
        Element element = new Element();
        element.tagName("type");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag10() {
        Element element = new Element();
        element.tag();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag11() {
        Element element = new Element();
        element.tag();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag12() {
        Element element = new Element();
        element.tag();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag13() {
        Element element = new Element();
        element.tag();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag14() {
        Element element = new Element();
        element.tag();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock10() {
        Element element = new Element();
        element.isBlock();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock11() {
        Element element = new Element();
        element.isBlock();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock12() {
        Element element = new Element();
        element.isBlock();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock13() {
        Element element = new Element();
        element.isBlock();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock14() {
        Element element = new Element();
        element.isBlock();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid10() {
        Element element = new Element();
        element.id();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid11() {
        Element element = new Element();
        element.id();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid12() {
        Element element = new Element();
        element.id();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid13() {
        Element element = new Element();
        element.id();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid14() {
        Element element = new Element();
        element.id();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr968955900() {
        Element element = new Element();
        element.attr("even","dc");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr989812791() {
        Element element = new Element();
        element.attr("gzio","xml");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr1788532() {
        Element element = new Element();
        element.attr("<.","xmk");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr5460488103() {
        Element element = new Element();
        element.attr("frameseu","dc");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr14397133714() {
        Element element = new Element();
        element.attr("thead","Set-Cookid");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr21063943870() {
        Element element = new Element();
        element.attr("sarcasn",true);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr7107015911() {
        Element element = new Element();
        element.attr(":matchTexu",true);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr926155912() {
        Element element = new Element();
        element.attr("abs;",true);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr14816081973() {
        Element element = new Element();
        element.attr(":nth-last-of-type)",true);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr36853024() {
        Element element = new Element();
        element.attr("xmo",true);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset10() {
        Element element = new Element();
        element.dataset();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset11() {
        Element element = new Element();
        element.dataset();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset12() {
        Element element = new Element();
        element.dataset();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset13() {
        Element element = new Element();
        element.dataset();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset14() {
        Element element = new Element();
        element.dataset();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents10() {
        Element element = new Element();
        element.parents();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents11() {
        Element element = new Element();
        element.parents();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents12() {
        Element element = new Element();
        element.parents();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents13() {
        Element element = new Element();
        element.parents();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents14() {
        Element element = new Element();
        element.parents();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild573740() {
        Element element = new Element();
        element.child(57343);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild1331() {
        Element element = new Element();
        element.child(102);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild1312() {
        Element element = new Element();
        element.child(100);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild572743() {
        Element element = new Element();
        element.child(57243);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild1314() {
        Element element = new Element();
        element.child(100);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren10() {
        Element element = new Element();
        element.children();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren11() {
        Element element = new Element();
        element.children();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren12() {
        Element element = new Element();
        element.children();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren13() {
        Element element = new Element();
        element.children();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren14() {
        Element element = new Element();
        element.children();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes10() {
        Element element = new Element();
        element.textNodes();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes11() {
        Element element = new Element();
        element.textNodes();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes12() {
        Element element = new Element();
        element.textNodes();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes13() {
        Element element = new Element();
        element.textNodes();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes14() {
        Element element = new Element();
        element.textNodes();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes10() {
        Element element = new Element();
        element.dataNodes();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes11() {
        Element element = new Element();
        element.dataNodes();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes12() {
        Element element = new Element();
        element.dataNodes();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes13() {
        Element element = new Element();
        element.dataNodes();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes14() {
        Element element = new Element();
        element.dataNodes();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect29170() {
        Element element = new Element();
        element.select("\"");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect21065455191() {
        Element element = new Element();
        element.select(":last-of-typd");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect1188412() {
        Element element = new Element();
        element.select("xmo");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect32303() {
        Element element = new Element();
        element.select("dc");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect1099034() {
        Element element = new Element();
        element.select("ode");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst10761623170() {
        Element element = new Element();
        element.selectFirst(":contains'");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst10548386271() {
        Element element = new Element();
        element.selectFirst(":first-chilc");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst12269463012() {
        Element element = new Element();
        element.selectFirst(":containsData'");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst1857353263() {
        Element element = new Element();
        element.selectFirst("US-ASCIJ");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst32134794() {
        Element element = new Element();
        element.selectFirst("http");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis32134790() {
        Element element = new Element();
        element.is("http");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis1103714481() {
        Element element = new Element();
        element.is("titlf");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis1101578762() {
        Element element = new Element();
        element.is("tbodx");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis1003581203() {
        Element element = new Element();
        element.is("inpus");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis1102773774() {
        Element element = new Element();
        element.is("tfoot");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis310() {
        Element element = new Element();
        element.is((Evaluator) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis311() {
        Element element = new Element();
        element.is((Evaluator) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis312() {
        Element element = new Element();
        element.is((Evaluator) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis313() {
        Element element = new Element();
        element.is((Evaluator) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis314() {
        Element element = new Element();
        element.is((Evaluator) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild310() {
        Element element = new Element();
        element.appendChild((Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild311() {
        Element element = new Element();
        element.appendChild((Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild312() {
        Element element = new Element();
        element.appendChild((Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild313() {
        Element element = new Element();
        element.appendChild((Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild314() {
        Element element = new Element();
        element.appendChild((Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo310() {
        Element element = new Element();
        element.appendTo((Element) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo311() {
        Element element = new Element();
        element.appendTo((Element) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo312() {
        Element element = new Element();
        element.appendTo((Element) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo313() {
        Element element = new Element();
        element.appendTo((Element) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo314() {
        Element element = new Element();
        element.appendTo((Element) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild310() {
        Element element = new Element();
        element.prependChild((Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild311() {
        Element element = new Element();
        element.prependChild((Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild312() {
        Element element = new Element();
        element.prependChild((Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild313() {
        Element element = new Element();
        element.prependChild((Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild314() {
        Element element = new Element();
        element.prependChild((Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren17151680() {
        Element element = new Element();
        element.insertChildren(55297,(Collection<? extends Node>) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren17785941() {
        Element element = new Element();
        element.insertChildren(57343,(Collection<? extends Node>) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren9612() {
        Element element = new Element();
        element.insertChildren(0,(Collection<? extends Node>) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren83703() {
        Element element = new Element();
        element.insertChildren(239,(Collection<? extends Node>) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren133614() {
        Element element = new Element();
        element.insertChildren(400,(Collection<? extends Node>) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren17754940() {
        Element element = new Element();
        element.insertChildren(57243,(Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren40921() {
        Element element = new Element();
        element.insertChildren(101,(Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren17785632() {
        Element element = new Element();
        element.insertChildren(57342,(Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren9613() {
        Element element = new Element();
        element.insertChildren(0,(Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren164614() {
        Element element = new Element();
        element.insertChildren(500,(Node) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement32132580() {
        Element element = new Element();
        element.appendElement("html");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement37261() {
        Element element = new Element();
        element.appendElement("tc");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement1650854882() {
        Element element = new Element();
        element.appendElement("http-equiv");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement34853() {
        Element element = new Element();
        element.appendElement("lj");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement358296674() {
        Element element = new Element();
        element.appendElement("#roos");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement13215466000() {
        Element element = new Element();
        element.prependElement("templatd");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement10101369411() {
        Element element = new Element();
        element.prependElement("optiom");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement1003134662() {
        Element element = new Element();
        element.prependElement("image");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement18305273() {
        Element element = new Element();
        element.prependElement(":gt'");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement1857353284() {
        Element element = new Element();
        element.prependElement("US-ASCIH");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText21153115440() {
        Element element = new Element();
        element.appendText("boundarx");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText14561() {
        Element element = new Element();
        element.appendText("*{");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText31490272() {
        Element element = new Element();
        element.appendText("form");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText18912061173() {
        Element element = new Element();
        element.appendText(":nth-of-type'");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText10761623184() {
        Element element = new Element();
        element.appendText(":contains(");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText1003581200() {
        Element element = new Element();
        element.prependText("inpus");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText14229508271() {
        Element element = new Element();
        element.prependText("action");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText27763632() {
        Element element = new Element();
        element.prependText("\"\"");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText996170333() {
        Element element = new Element();
        element.prependText("httpr");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText1099014() {
        Element element = new Element();
        element.prependText("odc");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend15515509540() {
        Element element = new Element();
        element.append("noscrips");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend567593351() {
        Element element = new Element();
        element.append(":has(");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend33737382() {
        Element element = new Element();
        element.append("name");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend6361976033() {
        Element element = new Element();
        element.append("colgrouo");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend17480897444() {
        Element element = new Element();
        element.append("DOCTYPD");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend18678420510() {
        Element element = new Element();
        element.prepend("[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend10761623171() {
        Element element = new Element();
        element.prepend(":contains'");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend1188412() {
        Element element = new Element();
        element.prepend("xmo");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend16449536123() {
        Element element = new Element();
        element.prepend("frameset");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend17571249794() {
        Element element = new Element();
        element.prepend(":emptz");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty10() {
        Element element = new Element();
        element.empty();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty11() {
        Element element = new Element();
        element.empty();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty12() {
        Element element = new Element();
        element.empty();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty13() {
        Element element = new Element();
        element.empty();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty14() {
        Element element = new Element();
        element.empty();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector10() {
        Element element = new Element();
        element.cssSelector();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector11() {
        Element element = new Element();
        element.cssSelector();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector12() {
        Element element = new Element();
        element.cssSelector();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector13() {
        Element element = new Element();
        element.cssSelector();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector14() {
        Element element = new Element();
        element.cssSelector();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements10() {
        Element element = new Element();
        element.siblingElements();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements11() {
        Element element = new Element();
        element.siblingElements();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements12() {
        Element element = new Element();
        element.siblingElements();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements13() {
        Element element = new Element();
        element.siblingElements();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements14() {
        Element element = new Element();
        element.siblingElements();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling10() {
        Element element = new Element();
        element.nextElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling11() {
        Element element = new Element();
        element.nextElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling12() {
        Element element = new Element();
        element.nextElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling13() {
        Element element = new Element();
        element.nextElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling14() {
        Element element = new Element();
        element.nextElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings10() {
        Element element = new Element();
        element.nextElementSiblings();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings11() {
        Element element = new Element();
        element.nextElementSiblings();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings12() {
        Element element = new Element();
        element.nextElementSiblings();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings13() {
        Element element = new Element();
        element.nextElementSiblings();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings14() {
        Element element = new Element();
        element.nextElementSiblings();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling10() {
        Element element = new Element();
        element.previousElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling11() {
        Element element = new Element();
        element.previousElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling12() {
        Element element = new Element();
        element.previousElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling13() {
        Element element = new Element();
        element.previousElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling14() {
        Element element = new Element();
        element.previousElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings10() {
        Element element = new Element();
        element.previousElementSiblings();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings11() {
        Element element = new Element();
        element.previousElementSiblings();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings12() {
        Element element = new Element();
        element.previousElementSiblings();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings13() {
        Element element = new Element();
        element.previousElementSiblings();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings14() {
        Element element = new Element();
        element.previousElementSiblings();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling10() {
        Element element = new Element();
        element.firstElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling11() {
        Element element = new Element();
        element.firstElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling12() {
        Element element = new Element();
        element.firstElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling13() {
        Element element = new Element();
        element.firstElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling14() {
        Element element = new Element();
        element.firstElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex10() {
        Element element = new Element();
        element.elementSiblingIndex();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex11() {
        Element element = new Element();
        element.elementSiblingIndex();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex12() {
        Element element = new Element();
        element.elementSiblingIndex();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex13() {
        Element element = new Element();
        element.elementSiblingIndex();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex14() {
        Element element = new Element();
        element.elementSiblingIndex();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling10() {
        Element element = new Element();
        element.lastElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling11() {
        Element element = new Element();
        element.lastElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling12() {
        Element element = new Element();
        element.lastElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling13() {
        Element element = new Element();
        element.lastElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling14() {
        Element element = new Element();
        element.lastElementSibling();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag3081290260() {
        Element element = new Element();
        element.getElementsByTag(":last-child");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag29221() {
        Element element = new Element();
        element.getElementsByTag("\'");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag5525734442() {
        Element element = new Element();
        element.getElementsByTag("captiom");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag31843() {
        Element element = new Element();
        element.getElementsByTag("bs");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag31844() {
        Element element = new Element();
        element.getElementsByTag("bs");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById35756410() {
        Element element = new Element();
        element.getElementById("type");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById17571249781() {
        Element element = new Element();
        element.getElementById(":empty");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById567593362() {
        Element element = new Element();
        element.getElementById(":has)");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById12269463003() {
        Element element = new Element();
        element.getElementById(":containsData(");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById567593344() {
        Element element = new Element();
        element.getElementById(":has'");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass18245830() {
        Element element = new Element();
        element.getElementsByClass(":alm");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass10548386291() {
        Element element = new Element();
        element.getElementsByClass(":first-chile");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass17209582722() {
        Element element = new Element();
        element.getElementsByClass("basefonu");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass31833() {
        Element element = new Element();
        element.getElementsByClass("br");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass14562253634() {
        Element element = new Element();
        element.getElementsByClass(":matches'");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute15451126500() {
        Element element = new Element();
        element.getElementsByAttribute("deflate");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute9076856531() {
        Element element = new Element();
        element.getElementsByAttribute("scripu");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute34852() {
        Element element = new Element();
        element.getElementsByAttribute("lj");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute32132593() {
        Element element = new Element();
        element.getElementsByAttribute("htmm");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute567593364() {
        Element element = new Element();
        element.getElementsByAttribute(":has)");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting7423139260() {
        Element element = new Element();
        element.getElementsByAttributeStarting("checked");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting2882752471() {
        Element element = new Element();
        element.getElementsByAttributeStarting(":nth-child'");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting15451126492() {
        Element element = new Element();
        element.getElementsByAttributeStarting("deflatd");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting33053() {
        Element element = new Element();
        element.getElementsByAttributeStarting("h2");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting14711890854() {
        Element element = new Element();
        element.getElementsByAttributeStarting(":nth-last-child(");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue4686564330() {
        Element element = new Element();
        element.getElementsByAttributeValue("optgrouo",":first-of-type");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue13783443261() {
        Element element = new Element();
        element.getElementsByAttributeValue("noembee",":emptx");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue779103532() {
        Element element = new Element();
        element.getElementsByAttributeValue("]]?","optgrouq");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue8765613093() {
        Element element = new Element();
        element.getElementsByAttributeValue("tbodz","rubx");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue20919556534() {
        Element element = new Element();
        element.getElementsByAttributeValue("|",":only-chile");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot1030706290() {
        Element element = new Element();
        element.getElementsByAttributeValueNot("link","]]>");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot29551691() {
        Element element = new Element();
        element.getElementsByAttributeValueNot("]]?","]]?");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot20089256822() {
        Element element = new Element();
        element.getElementsByAttributeValueNot("forn",":last-of-typd");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot995472113() {
        Element element = new Element();
        element.getElementsByAttributeValueNot("hree","th");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot11542871124() {
        Element element = new Element();
        element.getElementsByAttributeValueNot("optioo",":nth-of-type(");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting16377771630() {
        Element element = new Element();
        element.getElementsByAttributeValueStarting(":nth-last-child)","*}");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting12173942591() {
        Element element = new Element();
        element.getElementsByAttributeValueStarting("^=","hiddeo");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting9987036192() {
        Element element = new Element();
        element.getElementsByAttributeValueStarting(":contains(","\'");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting34111233() {
        Element element = new Element();
        element.getElementsByAttributeValueStarting("$<","namd");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting8491263144() {
        Element element = new Element();
        element.getElementsByAttributeValueStarting(":lt(","selecs");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding19418048620() {
        Element element = new Element();
        element.getElementsByAttributeValueEnding("textarea","selecs");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding12161374461() {
        Element element = new Element();
        element.getElementsByAttributeValueEnding(":containsOwn(","*>");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding11837732582() {
        Element element = new Element();
        element.getElementsByAttributeValueEnding("inpus","]]>");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding40913() {
        Element element = new Element();
        element.getElementsByAttributeValueEnding("?","$=");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding5266184954() {
        Element element = new Element();
        element.getElementsByAttributeValueEnding("keygeo",":nth-child)");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining15937871340() {
        Element element = new Element();
        element.getElementsByAttributeValueContaining(":lt'","checkbow");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining10848917911() {
        Element element = new Element();
        element.getElementsByAttributeValueContaining("imagd","input");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining1984794752() {
        Element element = new Element();
        element.getElementsByAttributeValueContaining("gzio","https");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining4714699643() {
        Element element = new Element();
        element.getElementsByAttributeValueContaining(":nth-last-of-type(","option");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining21157175834() {
        Element element = new Element();
        element.getElementsByAttributeValueContaining("hs","noembee");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching7107003600() {
        Element element = new Element();
        element.getElementsByAttributeValueMatching(":matchTexu",(Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching36841331() {
        Element element = new Element();
        element.getElementsByAttributeValueMatching("xmq",(Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching995435732() {
        Element element = new Element();
        element.getElementsByAttributeValueMatching("hreg",(Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching10357832563() {
        Element element = new Element();
        element.getElementsByAttributeValueMatching("textare`",(Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching432454() {
        Element element = new Element();
        element.getElementsByAttributeValueMatching("*>",(Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching21157288040() {
        Element element = new Element();
        element.getElementsByAttributeValueMatching("ti","noembed");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching966401() {
        Element element = new Element();
        element.getElementsByAttributeValueMatching("^=","lj");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching8813735972() {
        Element element = new Element();
        element.getElementsByAttributeValueMatching("tablf","du");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching18530689083() {
        Element element = new Element();
        element.getElementsByAttributeValueMatching("colgroup","input");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching9532575174() {
        Element element = new Element();
        element.getElementsByAttributeValueMatching("]]>","commanc");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan573730() {
        Element element = new Element();
        element.getElementsByIndexLessThan(57342);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan1341() {
        Element element = new Element();
        element.getElementsByIndexLessThan(103);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan302() {
        Element element = new Element();
        element.getElementsByIndexLessThan(-1);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan2713() {
        Element element = new Element();
        element.getElementsByIndexLessThan(240);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan324() {
        Element element = new Element();
        element.getElementsByIndexLessThan(1);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan553280() {
        Element element = new Element();
        element.getElementsByIndexGreaterThan(55297);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan4321() {
        Element element = new Element();
        element.getElementsByIndexGreaterThan(401);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan553282() {
        Element element = new Element();
        element.getElementsByIndexGreaterThan(55297);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan573743() {
        Element element = new Element();
        element.getElementsByIndexGreaterThan(57343);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan1324() {
        Element element = new Element();
        element.getElementsByIndexGreaterThan(101);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals2220() {
        Element element = new Element();
        element.getElementsByIndexEquals(191);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals341() {
        Element element = new Element();
        element.getElementsByIndexEquals(3);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals553272() {
        Element element = new Element();
        element.getElementsByIndexEquals(55296);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals2223() {
        Element element = new Element();
        element.getElementsByIndexEquals(191);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals4324() {
        Element element = new Element();
        element.getElementsByIndexEquals(401);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText17571249770() {
        Element element = new Element();
        element.getElementsContainingText(":emptx");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText10548386291() {
        Element element = new Element();
        element.getElementsContainingText(":first-chile");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText16183955612() {
        Element element = new Element();
        element.getElementsContainingText(":only-of-typf");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText13215466003() {
        Element element = new Element();
        element.getElementsContainingText("templatd");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText1003581224() {
        Element element = new Element();
        element.getElementsContainingText("inpuu");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText5525734450() {
        Element element = new Element();
        element.getElementsContainingOwnText("caption");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText13776877261() {
        Element element = new Element();
        element.getElementsContainingOwnText("buttoo");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText18690634832() {
        Element element = new Element();
        element.getElementsContainingOwnText("sarcasm");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText1103714463() {
        Element element = new Element();
        element.getElementsContainingOwnText("titld");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText10176250964() {
        Element element = new Element();
        element.getElementsContainingOwnText(":nth-last-of-type'");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText310() {
        Element element = new Element();
        element.getElementsMatchingText((Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText311() {
        Element element = new Element();
        element.getElementsMatchingText((Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText312() {
        Element element = new Element();
        element.getElementsMatchingText((Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText313() {
        Element element = new Element();
        element.getElementsMatchingText((Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText314() {
        Element element = new Element();
        element.getElementsMatchingText((Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText18690634840() {
        Element element = new Element();
        element.getElementsMatchingText("sarcasn");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText26152061() {
        Element element = new Element();
        element.getElementsMatchingText("UTF.");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText942() {
        Element element = new Element();
        element.getElementsMatchingText("?");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText943() {
        Element element = new Element();
        element.getElementsMatchingText("?");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText12174874144() {
        Element element = new Element();
        element.getElementsMatchingText("hiddeo");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText310() {
        Element element = new Element();
        element.getElementsMatchingOwnText((Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText311() {
        Element element = new Element();
        element.getElementsMatchingOwnText((Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText312() {
        Element element = new Element();
        element.getElementsMatchingOwnText((Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText313() {
        Element element = new Element();
        element.getElementsMatchingOwnText((Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText314() {
        Element element = new Element();
        element.getElementsMatchingOwnText((Pattern) null);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText18245810() {
        Element element = new Element();
        element.getElementsMatchingOwnText(":alk");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText7423139251() {
        Element element = new Element();
        element.getElementsMatchingOwnText("checkec");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText987202() {
        Element element = new Element();
        element.getElementsMatchingOwnText("com");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText10548386273() {
        Element element = new Element();
        element.getElementsMatchingOwnText(":first-chilc");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText17571249784() {
        Element element = new Element();
        element.getElementsMatchingOwnText(":empty");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements10() {
        Element element = new Element();
        element.getAllElements();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements11() {
        Element element = new Element();
        element.getAllElements();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements12() {
        Element element = new Element();
        element.getAllElements();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements13() {
        Element element = new Element();
        element.getAllElements();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements14() {
        Element element = new Element();
        element.getAllElements();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext10() {
        Element element = new Element();
        element.text();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext11() {
        Element element = new Element();
        element.text();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext12() {
        Element element = new Element();
        element.text();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext13() {
        Element element = new Element();
        element.text();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext14() {
        Element element = new Element();
        element.text();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhead10620() {
        Element element = new Element();
        element.head((Node) null,101);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhead14611() {
        Element element = new Element();
        element.head((Node) null,500);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhead14612() {
        Element element = new Element();
        element.head((Node) null,500);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhead12003() {
        Element element = new Element();
        element.head((Node) null,239);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhead11484() {
        Element element = new Element();
        element.head((Node) null,187);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtail10630() {
        Element element = new Element();
        element.tail((Node) null,102);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtail9611() {
        Element element = new Element();
        element.tail((Node) null,0);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtail11602() {
        Element element = new Element();
        element.tail((Node) null,199);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtail12013() {
        Element element = new Element();
        element.tail((Node) null,240);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtail11534() {
        Element element = new Element();
        element.tail((Node) null,192);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText10() {
        Element element = new Element();
        element.wholeText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText11() {
        Element element = new Element();
        element.wholeText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText12() {
        Element element = new Element();
        element.wholeText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText13() {
        Element element = new Element();
        element.wholeText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText14() {
        Element element = new Element();
        element.wholeText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhead11480() {
        Element element = new Element();
        element.head((Node) null,187);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhead14611() {
        Element element = new Element();
        element.head((Node) null,500);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhead13612() {
        Element element = new Element();
        element.head((Node) null,400);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhead11603() {
        Element element = new Element();
        element.head((Node) null,199);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhead9614() {
        Element element = new Element();
        element.head((Node) null,0);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtail10640() {
        Element element = new Element();
        element.tail((Node) null,103);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtail11851() {
        Element element = new Element();
        element.tail((Node) null,224);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtail9642() {
        Element element = new Element();
        element.tail((Node) null,3);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtail9603() {
        Element element = new Element();
        element.tail((Node) null,-1);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtail11604() {
        Element element = new Element();
        element.tail((Node) null,199);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText10() {
        Element element = new Element();
        element.ownText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText11() {
        Element element = new Element();
        element.ownText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText12() {
        Element element = new Element();
        element.ownText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText13() {
        Element element = new Element();
        element.ownText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText14() {
        Element element = new Element();
        element.ownText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext18912061160() {
        Element element = new Element();
        element.text(":nth-of-type(");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext30061() {
        Element element = new Element();
        element.text("^=");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext569515672() {
        Element element = new Element();
        element.text(":not)");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext33441663() {
        Element element = new Element();
        element.text("matg");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext31255624() {
        Element element = new Element();
        element.text("eveo");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText10() {
        Element element = new Element();
        element.hasText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText11() {
        Element element = new Element();
        element.hasText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText12() {
        Element element = new Element();
        element.hasText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText13() {
        Element element = new Element();
        element.hasText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText14() {
        Element element = new Element();
        element.hasText();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata10() {
        Element element = new Element();
        element.data();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata11() {
        Element element = new Element();
        element.data();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata12() {
        Element element = new Element();
        element.data();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata13() {
        Element element = new Element();
        element.data();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata14() {
        Element element = new Element();
        element.data();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName10() {
        Element element = new Element();
        element.className();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName11() {
        Element element = new Element();
        element.className();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName12() {
        Element element = new Element();
        element.className();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName13() {
        Element element = new Element();
        element.className();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName14() {
        Element element = new Element();
        element.className();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames10() {
        Element element = new Element();
        element.classNames();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames11() {
        Element element = new Element();
        element.classNames();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames12() {
        Element element = new Element();
        element.classNames();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames13() {
        Element element = new Element();
        element.classNames();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames14() {
        Element element = new Element();
        element.classNames();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames32134790() {
        Element element = new Element();
        element.classNames("http");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames33737391() {
        Element element = new Element();
        element.classNames("namf");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames1102773782() {
        Element element = new Element();
        element.classNames("tfoou");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames14229508283() {
        Element element = new Element();
        element.classNames("actiom");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames19788929354() {
        Element element = new Element();
        element.classNames(":containsOwn'");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass19732341970() {
        Element element = new Element();
        element.hasClass("plaintexs");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass33441671() {
        Element element = new Element();
        element.hasClass("math");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass14229508282() {
        Element element = new Element();
        element.hasClass("actiom");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass13933() {
        Element element = new Element();
        element.hasClass("*<");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass18690634834() {
        Element element = new Element();
        element.hasClass("sarcasm");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass30050() {
        Element element = new Element();
        element.addClass("^<");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass923491() {
        Element element = new Element();
        element.addClass("]]>");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass14229508282() {
        Element element = new Element();
        element.addClass("actiom");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass18285123() {
        Element element = new Element();
        element.addClass(":eq'");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass31834() {
        Element element = new Element();
        element.addClass("br");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass19732341970() {
        Element element = new Element();
        element.removeClass("plaintexs");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass1102563211() {
        Element element = new Element();
        element.removeClass("text/");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass358296682() {
        Element element = new Element();
        element.removeClass("#root");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass569515663() {
        Element element = new Element();
        element.removeClass(":not(");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass9076856544() {
        Element element = new Element();
        element.removeClass("script");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass29875600() {
        Element element = new Element();
        element.toggleClass("abs;");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass19804204671() {
        Element element = new Element();
        element.toggleClass("Set-Cookid");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass1103268982() {
        Element element = new Element();
        element.toggleClass("theac");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass20913044553() {
        Element element = new Element();
        element.toggleClass("isindex");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass21011358004() {
        Element element = new Element();
        element.toggleClass(":matchTexu");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval10() {
        Element element = new Element();
        element.val();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval11() {
        Element element = new Element();
        element.val();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval12() {
        Element element = new Element();
        element.val();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval13() {
        Element element = new Element();
        element.val();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval14() {
        Element element = new Element();
        element.val();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval13776877270() {
        Element element = new Element();
        element.val("button");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval32132591() {
        Element element = new Element();
        element.val("htmm");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval11927218632() {
        Element element = new Element();
        element.val("noframet");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval34833() {
        Element element = new Element();
        element.val("lh");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval32132594() {
        Element element = new Element();
        element.val("htmm");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml10() {
        Element element = new Element();
        element.html();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml11() {
        Element element = new Element();
        element.html();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml12() {
        Element element = new Element();
        element.html();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml13() {
        Element element = new Element();
        element.html();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml14() {
        Element element = new Element();
        element.html();
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml2882752480() {
        Element element = new Element();
        element.html(":nth-child(");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml1101158201() {
        Element element = new Element();
        element.html("tabld");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml358296672() {
        Element element = new Element();
        element.html("#roos");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml33868643() {
        Element element = new Element();
        element.html("nobr");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml37284() {
        Element element = new Element();
        element.html("te");
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell987190() {
        Document document = new Document();
        document.createShell("col");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell39981() {
        Document document = new Document();
        document.createShell("~=");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell32134802() {
        Document document = new Document();
        document.createShell("httq");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell9060216053() {
        Document document = new Document();
        document.createShell("select");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell21153115424() {
        Document document = new Document();
        document.createShell("boundarz");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation10() {
        Document document = new Document();
        document.location();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation11() {
        Document document = new Document();
        document.location();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation12() {
        Document document = new Document();
        document.location();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation13() {
        Document document = new Document();
        document.location();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation14() {
        Document document = new Document();
        document.location();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead10() {
        Document document = new Document();
        document.head();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead11() {
        Document document = new Document();
        document.head();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead12() {
        Document document = new Document();
        document.head();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead13() {
        Document document = new Document();
        document.head();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead14() {
        Document document = new Document();
        document.head();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody10() {
        Document document = new Document();
        document.body();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody11() {
        Document document = new Document();
        document.body();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody12() {
        Document document = new Document();
        document.body();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody13() {
        Document document = new Document();
        document.body();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody14() {
        Document document = new Document();
        document.body();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle10() {
        Document document = new Document();
        document.title();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle11() {
        Document document = new Document();
        document.title();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle12() {
        Document document = new Document();
        document.title();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle13() {
        Document document = new Document();
        document.title();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle14() {
        Document document = new Document();
        document.title();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle1857353270() {
        Document document = new Document();
        document.title("US-ASCII");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle20913044551() {
        Document document = new Document();
        document.title("isindex");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle33702() {
        Document document = new Document();
        document.title("hs");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle1605222303() {
        Document document = new Document();
        document.title("bgsoune");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle9076856554() {
        Document document = new Document();
        document.title("scrips");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement19788929350() {
        Document document = new Document();
        document.createElement(":containsOwn'");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement21065455171() {
        Document document = new Document();
        document.createElement(":last-of-typf");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement902() {
        Document document = new Document();
        document.createElement(";");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement21011357993() {
        Document document = new Document();
        document.createElement(":matchText");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement19732341984() {
        Document document = new Document();
        document.createElement("plaintext");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise10() {
        Document document = new Document();
        document.normalise();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise11() {
        Document document = new Document();
        document.normalise();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise12() {
        Document document = new Document();
        document.normalise();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise13() {
        Document document = new Document();
        document.normalise();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise14() {
        Document document = new Document();
        document.normalise();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset310() {
        Document document = new Document();
        document.charset((Charset) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset311() {
        Document document = new Document();
        document.charset((Charset) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset312() {
        Document document = new Document();
        document.charset((Charset) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset313() {
        Document document = new Document();
        document.charset((Charset) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset314() {
        Document document = new Document();
        document.charset((Charset) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset10() {
        Document document = new Document();
        document.charset();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset11() {
        Document document = new Document();
        document.charset();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset12() {
        Document document = new Document();
        document.charset();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset13() {
        Document document = new Document();
        document.charset();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset14() {
        Document document = new Document();
        document.charset();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement12620() {
        Document document = new Document();
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement12621() {
        Document document = new Document();
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement12622() {
        Document document = new Document();
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement12623() {
        Document document = new Document();
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement12624() {
        Document document = new Document();
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement10() {
        Document document = new Document();
        document.updateMetaCharsetElement();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement11() {
        Document document = new Document();
        document.updateMetaCharsetElement();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement12() {
        Document document = new Document();
        document.updateMetaCharsetElement();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement13() {
        Document document = new Document();
        document.updateMetaCharsetElement();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement14() {
        Document document = new Document();
        document.updateMetaCharsetElement();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings10() {
        Document document = new Document();
        document.outputSettings();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings11() {
        Document document = new Document();
        document.outputSettings();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings12() {
        Document document = new Document();
        document.outputSettings();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings13() {
        Document document = new Document();
        document.outputSettings();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings14() {
        Document document = new Document();
        document.outputSettings();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings310() {
        Document document = new Document();
        document.outputSettings((OutputSettings) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings311() {
        Document document = new Document();
        document.outputSettings((OutputSettings) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings312() {
        Document document = new Document();
        document.outputSettings((OutputSettings) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings313() {
        Document document = new Document();
        document.outputSettings((OutputSettings) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings314() {
        Document document = new Document();
        document.outputSettings((OutputSettings) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode10() {
        Document document = new Document();
        document.quirksMode();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode11() {
        Document document = new Document();
        document.quirksMode();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode12() {
        Document document = new Document();
        document.quirksMode();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode13() {
        Document document = new Document();
        document.quirksMode();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode14() {
        Document document = new Document();
        document.quirksMode();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode310() {
        Document document = new Document();
        document.quirksMode((QuirksMode) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode311() {
        Document document = new Document();
        document.quirksMode((QuirksMode) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode312() {
        Document document = new Document();
        document.quirksMode((QuirksMode) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode313() {
        Document document = new Document();
        document.quirksMode((QuirksMode) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode314() {
        Document document = new Document();
        document.quirksMode((QuirksMode) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser10() {
        Document document = new Document();
        document.parser();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser11() {
        Document document = new Document();
        document.parser();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser12() {
        Document document = new Document();
        document.parser();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser13() {
        Document document = new Document();
        document.parser();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser14() {
        Document document = new Document();
        document.parser();
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser310() {
        Document document = new Document();
        document.parser((Parser) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser311() {
        Document document = new Document();
        document.parser((Parser) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser312() {
        Document document = new Document();
        document.parser((Parser) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser313() {
        Document document = new Document();
        document.parser((Parser) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser314() {
        Document document = new Document();
        document.parser((Parser) null);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity1102773770() {
        Entities entities = new Entities();
        entities.isNamedEntity("tfoot");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity11346655511() {
        Entities entities = new Entities();
        entities.isNamedEntity("keygeo");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity14572() {
        Entities entities = new Entities();
        entities.isNamedEntity("*|");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity11346655523() {
        Entities entities = new Entities();
        entities.isNamedEntity("keygen");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity17480897424() {
        Entities entities = new Entities();
        entities.isNamedEntity("DOCTYPF");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity1188410() {
        Entities entities = new Entities();
        entities.isBaseNamedEntity("xmo");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity1251() {
        Entities entities = new Entities();
        entities.isBaseNamedEntity("^");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity1101578762() {
        Entities entities = new Entities();
        entities.isBaseNamedEntity("tbodx");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity1102773773() {
        Entities entities = new Entities();
        entities.isBaseNamedEntity("tfoot");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity12174874144() {
        Entities entities = new Entities();
        entities.isBaseNamedEntity("hiddeo");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName33090() {
        Entities entities = new Entities();
        entities.getCharacterByName("h6");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName32134801() {
        Entities entities = new Entities();
        entities.getCharacterByName("httq");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName30164332() {
        Entities entities = new Entities();
        entities.getCharacterByName("basf");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName567593343() {
        Entities entities = new Entities();
        entities.getCharacterByName(":has'");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName1102563224() {
        Entities entities = new Entities();
        entities.getCharacterByName("text0");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName20913044560() {
        Entities entities = new Entities();
        entities.getByName("isindey");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName14229508281() {
        Entities entities = new Entities();
        entities.getByName("actiom");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName1857353272() {
        Entities entities = new Entities();
        entities.getByName("US-ASCII");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName30063() {
        Entities entities = new Entities();
        entities.getByName("^=");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName923504() {
        Entities entities = new Entities();
        entities.getByName("]]?");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName2342121460() {
        Entities entities = new Entities();
        entities.codepointsForName("xmq",new int[]{0,-1,55296,192,1,55297,2,3,4,199,400,1114112,401,57243,224,-99,-100,100,55396,101,102,103,239,240});
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName20091577741() {
        Entities entities = new Entities();
        entities.codepointsForName("html",new int[]{0,-1,55296,192,1});
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName13053770672() {
        Entities entities = new Entities();
        entities.codepointsForName("hiddem",new int[]{0,-1,55296,192});
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName19269689643() {
        Entities entities = new Entities();
        entities.codepointsForName("namd",new int[]{});
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName11363236104() {
        Entities entities = new Entities();
        entities.codepointsForName(":only-of-typf",new int[]{0,-1,55296,192,1,55297,2,3,4,199,400,1114112,401,57243,224,-99,-100,100,55396,101,102,103});
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape17527108180() {
        Entities entities = new Entities();
        entities.escape("colgroup",(Document.OutputSettings) null);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape19817283601() {
        Entities entities = new Entities();
        entities.escape("templatd",(Document.OutputSettings) null);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape995435112() {
        Entities entities = new Entities();
        entities.escape("hree",(Document.OutputSettings) null);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape9987065413() {
        Entities entities = new Entities();
        entities.escape(":contains'",(Document.OutputSettings) null);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape1044084() {
        Entities entities = new Entities();
        entities.escape("hq",(Document.OutputSettings) null);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape33040() {
        Entities entities = new Entities();
        entities.escape("h1");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape17209582731() {
        Entities entities = new Entities();
        entities.escape("basefont");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape21011357982() {
        Entities entities = new Entities();
        entities.escape(":matchTexs");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape15451126513() {
        Entities entities = new Entities();
        entities.escape("deflatf");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape37274() {
        Entities entities = new Entities();
        entities.escape("td");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape11927218610() {
        Entities entities = new Entities();
        entities.unescape("noframer");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape20353119931() {
        Entities entities = new Entities();
        entities.unescape(":first-of-typf");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape19804204662() {
        Entities entities = new Entities();
        entities.unescape("Set-Cookie");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape6361976023() {
        Entities entities = new Entities();
        entities.unescape("colgroup");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape31255604() {
        Entities entities = new Entities();
        entities.unescape("evem");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName10() {
        DataNode datanode = new DataNode();
        datanode.nodeName();
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName11() {
        DataNode datanode = new DataNode();
        datanode.nodeName();
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName12() {
        DataNode datanode = new DataNode();
        datanode.nodeName();
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName13() {
        DataNode datanode = new DataNode();
        datanode.nodeName();
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName14() {
        DataNode datanode = new DataNode();
        datanode.nodeName();
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData10() {
        DataNode datanode = new DataNode();
        datanode.getWholeData();
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData11() {
        DataNode datanode = new DataNode();
        datanode.getWholeData();
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData12() {
        DataNode datanode = new DataNode();
        datanode.getWholeData();
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData13() {
        DataNode datanode = new DataNode();
        datanode.getWholeData();
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData14() {
        DataNode datanode = new DataNode();
        datanode.getWholeData();
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData32110820() {
        DataNode datanode = new DataNode();
        datanode.setWholeData("href");
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData33031() {
        DataNode datanode = new DataNode();
        datanode.setWholeData("h0");
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData34852() {
        DataNode datanode = new DataNode();
        datanode.setWholeData("lj");
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData11912143973() {
        DataNode datanode = new DataNode();
        datanode.setWholeData("iframe");
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData39984() {
        DataNode datanode = new DataNode();
        datanode.setWholeData("~=");
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded12126807670() {
        DataNode datanode = new DataNode();
        datanode.createFromEncoded("rubz","templatf");
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded9385747701() {
        DataNode datanode = new DataNode();
        datanode.createFromEncoded("radip","hq");
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded8332802592() {
        DataNode datanode = new DataNode();
        datanode.createFromEncoded("textareb","sarcasn");
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded1669402243() {
        DataNode datanode = new DataNode();
        datanode.createFromEncoded(":eq)","text/");
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded9317475664() {
        DataNode datanode = new DataNode();
        datanode.createFromEncoded("input","noembec");
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName10() {
        Comment comment = new Comment();
        comment.nodeName();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName11() {
        Comment comment = new Comment();
        comment.nodeName();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName12() {
        Comment comment = new Comment();
        comment.nodeName();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName13() {
        Comment comment = new Comment();
        comment.nodeName();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName14() {
        Comment comment = new Comment();
        comment.nodeName();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData10() {
        Comment comment = new Comment();
        comment.getData();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData11() {
        Comment comment = new Comment();
        comment.getData();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData12() {
        Comment comment = new Comment();
        comment.getData();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData13() {
        Comment comment = new Comment();
        comment.getData();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData14() {
        Comment comment = new Comment();
        comment.getData();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration10() {
        Comment comment = new Comment();
        comment.isXmlDeclaration();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration11() {
        Comment comment = new Comment();
        comment.isXmlDeclaration();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration12() {
        Comment comment = new Comment();
        comment.isXmlDeclaration();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration13() {
        Comment comment = new Comment();
        comment.isXmlDeclaration();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration14() {
        Comment comment = new Comment();
        comment.isXmlDeclaration();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration10() {
        Comment comment = new Comment();
        comment.asXmlDeclaration();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration11() {
        Comment comment = new Comment();
        comment.asXmlDeclaration();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration12() {
        Comment comment = new Comment();
        comment.asXmlDeclaration();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration13() {
        Comment comment = new Comment();
        comment.asXmlDeclaration();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration14() {
        Comment comment = new Comment();
        comment.asXmlDeclaration();
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName10() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.nodeName();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName11() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.nodeName();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName12() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.nodeName();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName13() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.nodeName();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName14() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.nodeName();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname10() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.name();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname11() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.name();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname12() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.name();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname13() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.name();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname14() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.name();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration10() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.getWholeDeclaration();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration11() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.getWholeDeclaration();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration12() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.getWholeDeclaration();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration13() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.getWholeDeclaration();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration14() {
        XmlDeclaration xmldeclaration = new XmlDeclaration();
        xmldeclaration.getWholeDeclaration();
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements10() {
        FormElement formelement = new FormElement();
        formelement.elements();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements11() {
        FormElement formelement = new FormElement();
        formelement.elements();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements12() {
        FormElement formelement = new FormElement();
        formelement.elements();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements13() {
        FormElement formelement = new FormElement();
        formelement.elements();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements14() {
        FormElement formelement = new FormElement();
        formelement.elements();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement310() {
        FormElement formelement = new FormElement();
        formelement.addElement((Element) null);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement311() {
        FormElement formelement = new FormElement();
        formelement.addElement((Element) null);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement312() {
        FormElement formelement = new FormElement();
        formelement.addElement((Element) null);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement313() {
        FormElement formelement = new FormElement();
        formelement.addElement((Element) null);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement314() {
        FormElement formelement = new FormElement();
        formelement.addElement((Element) null);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit10() {
        FormElement formelement = new FormElement();
        formelement.submit();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit11() {
        FormElement formelement = new FormElement();
        formelement.submit();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit12() {
        FormElement formelement = new FormElement();
        formelement.submit();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit13() {
        FormElement formelement = new FormElement();
        formelement.submit();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit14() {
        FormElement formelement = new FormElement();
        formelement.submit();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData10() {
        FormElement formelement = new FormElement();
        formelement.formData();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData11() {
        FormElement formelement = new FormElement();
        formelement.formData();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData12() {
        FormElement formelement = new FormElement();
        formelement.formData();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData13() {
        FormElement formelement = new FormElement();
        formelement.formData();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData14() {
        FormElement formelement = new FormElement();
        formelement.formData();
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey21011357980() {
        DocumentType documenttype = new DocumentType();
        documenttype.setPubSysKey(":matchTexs");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey13941() {
        DocumentType documenttype = new DocumentType();
        documenttype.setPubSysKey("*=");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey35118002() {
        DocumentType documenttype = new DocumentType();
        documenttype.setPubSysKey("rubx");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey13215465983() {
        DocumentType documenttype = new DocumentType();
        documenttype.setPubSysKey("templatf");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey19804204664() {
        DocumentType documenttype = new DocumentType();
        documenttype.setPubSysKey("Set-Cookie");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey10() {
        Attribute attribute = new Attribute();
        attribute.getKey();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey11() {
        Attribute attribute = new Attribute();
        attribute.getKey();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey12() {
        Attribute attribute = new Attribute();
        attribute.getKey();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey13() {
        Attribute attribute = new Attribute();
        attribute.getKey();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey14() {
        Attribute attribute = new Attribute();
        attribute.getKey();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey1082706170() {
        Attribute attribute = new Attribute();
        attribute.setKey("radin");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey358799191() {
        Attribute attribute = new Attribute();
        attribute.setKey("#text");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey1099022() {
        Attribute attribute = new Attribute();
        attribute.setKey("odd");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey1099023() {
        Attribute attribute = new Attribute();
        attribute.setKey("odd");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey2882752474() {
        Attribute attribute = new Attribute();
        attribute.setKey(":nth-child'");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue10() {
        Attribute attribute = new Attribute();
        attribute.getValue();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue11() {
        Attribute attribute = new Attribute();
        attribute.getValue();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue12() {
        Attribute attribute = new Attribute();
        attribute.getValue();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue13() {
        Attribute attribute = new Attribute();
        attribute.getValue();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue14() {
        Attribute attribute = new Attribute();
        attribute.getValue();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue10552537230() {
        Attribute attribute = new Attribute();
        attribute.setValue(":matchesOwn)");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue14229508281() {
        Attribute attribute = new Attribute();
        attribute.setValue("actiom");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue1044192() {
        Attribute attribute = new Attribute();
        attribute.setValue("imh");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue33218823() {
        Attribute attribute = new Attribute();
        attribute.setValue("linl");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue37284() {
        Attribute attribute = new Attribute();
        attribute.setValue("te");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml10() {
        Attribute attribute = new Attribute();
        attribute.html();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml11() {
        Attribute attribute = new Attribute();
        attribute.html();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml12() {
        Attribute attribute = new Attribute();
        attribute.html();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml13() {
        Attribute attribute = new Attribute();
        attribute.html();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml14() {
        Attribute attribute = new Attribute();
        attribute.html();
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded8194693540() {
        Attribute attribute = new Attribute();
        attribute.createFromEncoded("http-equiw","htto");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded5526079801() {
        Attribute attribute = new Attribute();
        attribute.createFromEncoded("!=","captioo");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded9110732212() {
        Attribute attribute = new Attribute();
        attribute.createFromEncoded(":not(",":only-of-type");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded32440343() {
        Attribute attribute = new Attribute();
        attribute.createFromEncoded("--","heae");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded10962561854() {
        Attribute attribute = new Attribute();
        attribute.createFromEncoded("sarcasn","option");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName10() {
        TextNode textnode = new TextNode();
        textnode.nodeName();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName11() {
        TextNode textnode = new TextNode();
        textnode.nodeName();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName12() {
        TextNode textnode = new TextNode();
        textnode.nodeName();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName13() {
        TextNode textnode = new TextNode();
        textnode.nodeName();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName14() {
        TextNode textnode = new TextNode();
        textnode.nodeName();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext10() {
        TextNode textnode = new TextNode();
        textnode.text();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext11() {
        TextNode textnode = new TextNode();
        textnode.text();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext12() {
        TextNode textnode = new TextNode();
        textnode.text();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext13() {
        TextNode textnode = new TextNode();
        textnode.text();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext14() {
        TextNode textnode = new TextNode();
        textnode.text();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext32110810() {
        TextNode textnode = new TextNode();
        textnode.text("hree");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext16183955591() {
        TextNode textnode = new TextNode();
        textnode.text(":only-of-typd");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext15451126502() {
        TextNode textnode = new TextNode();
        textnode.text("deflate");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext14711890843() {
        TextNode textnode = new TextNode();
        textnode.text(":nth-last-child'");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext32474() {
        TextNode textnode = new TextNode();
        textnode.text("dt");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText10() {
        TextNode textnode = new TextNode();
        textnode.getWholeText();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText11() {
        TextNode textnode = new TextNode();
        textnode.getWholeText();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText12() {
        TextNode textnode = new TextNode();
        textnode.getWholeText();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText13() {
        TextNode textnode = new TextNode();
        textnode.getWholeText();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText14() {
        TextNode textnode = new TextNode();
        textnode.getWholeText();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank10() {
        TextNode textnode = new TextNode();
        textnode.isBlank();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank11() {
        TextNode textnode = new TextNode();
        textnode.isBlank();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank12() {
        TextNode textnode = new TextNode();
        textnode.isBlank();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank13() {
        TextNode textnode = new TextNode();
        textnode.isBlank();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank14() {
        TextNode textnode = new TextNode();
        textnode.isBlank();
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText5310() {
        TextNode textnode = new TextNode();
        textnode.splitText(500);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText301() {
        TextNode textnode = new TextNode();
        textnode.splitText(-1);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText312() {
        TextNode textnode = new TextNode();
        textnode.splitText(0);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText333() {
        TextNode textnode = new TextNode();
        textnode.splitText(2);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText1314() {
        TextNode textnode = new TextNode();
        textnode.splitText(100);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded566878690() {
        TextNode textnode = new TextNode();
        textnode.createFromEncoded(":eq(","~<");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded2111582761() {
        TextNode textnode = new TextNode();
        textnode.createFromEncoded("typd","imagf");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded8699156952() {
        TextNode textnode = new TextNode();
        textnode.createFromEncoded("titlf","spam");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded600937853() {
        TextNode textnode = new TextNode();
        textnode.createFromEncoded(":lt)","heac");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded21011386194() {
        TextNode textnode = new TextNode();
        textnode.createFromEncoded("=",":matchTexs");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded37260() {
        TextNode textnode = new TextNode();
        textnode.createFromEncoded("tc");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded34831() {
        TextNode textnode = new TextNode();
        textnode.createFromEncoded("lh");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded1099022() {
        TextNode textnode = new TextNode();
        textnode.createFromEncoded("odd");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded10761623183() {
        TextNode textnode = new TextNode();
        textnode.createFromEncoded(":contains(");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded14711890844() {
        TextNode textnode = new TextNode();
        textnode.createFromEncoded(":nth-last-child'");
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException10() {
        UncheckedIOException uncheckedioexception = new UncheckedIOException();
        uncheckedioexception.ioException();
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException11() {
        UncheckedIOException uncheckedioexception = new UncheckedIOException();
        uncheckedioexception.ioException();
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException12() {
        UncheckedIOException uncheckedioexception = new UncheckedIOException();
        uncheckedioexception.ioException();
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException13() {
        UncheckedIOException uncheckedioexception = new UncheckedIOException();
        uncheckedioexception.ioException();
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException14() {
        UncheckedIOException uncheckedioexception = new UncheckedIOException();
        uncheckedioexception.ioException();
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin3081280970() {
        StringUtil stringutil = new StringUtil();
        stringutil.join((Collection) null,":last-chilc");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin10031() {
        StringUtil stringutil = new StringUtil();
        stringutil.join((Collection) null,"*");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin7390753402() {
        StringUtil stringutil = new StringUtil();
        stringutil.join((Collection) null,"charses");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin9060206753() {
        StringUtil stringutil = new StringUtil();
        stringutil.join((Collection) null,"select");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin26161354() {
        StringUtil stringutil = new StringUtil();
        stringutil.join((Collection) null,"UTF-");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin16183964890() {
        StringUtil stringutil = new StringUtil();
        stringutil.join((Iterator) null,":only-of-typd");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin42371() {
        StringUtil stringutil = new StringUtil();
        stringutil.join((Iterator) null,"h4");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin10761632472() {
        StringUtil stringutil = new StringUtil();
        stringutil.join((Iterator) null,":contains'");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin17571259083() {
        StringUtil stringutil = new StringUtil();
        stringutil.join((Iterator) null,":empty");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin15515518854() {
        StringUtil stringutil = new StringUtil();
        stringutil.join((Iterator) null,"noscript");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin16043181290() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?"},"form");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin16362521691() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<."},"disabled");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin20268702052() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child"},"httpt");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin18715517033() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>"},"dc");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin2304464174() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a"},"hr");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding310() {
        StringUtil stringutil = new StringUtil();
        stringutil.padding(0);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding554271() {
        StringUtil stringutil = new StringUtil();
        stringutil.padding(55396);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding11142422() {
        StringUtil stringutil = new StringUtil();
        stringutil.padding(1114211);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding4313() {
        StringUtil stringutil = new StringUtil();
        stringutil.padding(400);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding314() {
        StringUtil stringutil = new StringUtil();
        stringutil.padding(0);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank11912143970() {
        StringUtil stringutil = new StringUtil();
        stringutil.isBlank("iframe");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank18912061171() {
        StringUtil stringutil = new StringUtil();
        stringutil.isBlank(":nth-of-type'");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank30294402() {
        StringUtil stringutil = new StringUtil();
        stringutil.isBlank("bodx");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank18912061163() {
        StringUtil stringutil = new StringUtil();
        stringutil.isBlank(":nth-of-type(");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank9060216064() {
        StringUtil stringutil = new StringUtil();
        stringutil.isBlank("selecs");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric1857353260() {
        StringUtil stringutil = new StringUtil();
        stringutil.isNumeric("US-ASCIJ");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric16449536131() {
        StringUtil stringutil = new StringUtil();
        stringutil.isNumeric("frameses");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric1097804312() {
        StringUtil stringutil = new StringUtil();
        stringutil.isNumeric("styld");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric13943() {
        StringUtil stringutil = new StringUtil();
        stringutil.isNumeric("*=");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric11912143964() {
        StringUtil stringutil = new StringUtil();
        stringutil.isNumeric("iframf");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace4320() {
        StringUtil stringutil = new StringUtil();
        stringutil.isWhitespace(401);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace2701() {
        StringUtil stringutil = new StringUtil();
        stringutil.isWhitespace(239);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace1332() {
        StringUtil stringutil = new StringUtil();
        stringutil.isWhitespace(102);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace2553() {
        StringUtil stringutil = new StringUtil();
        stringutil.isWhitespace(224);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace2184() {
        StringUtil stringutil = new StringUtil();
        stringutil.isWhitespace(187);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace1310() {
        StringUtil stringutil = new StringUtil();
        stringutil.isActuallyWhitespace(100);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace681() {
        StringUtil stringutil = new StringUtil();
        stringutil.isActuallyWhitespace(-99);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace554272() {
        StringUtil stringutil = new StringUtil();
        stringutil.isActuallyWhitespace(55396);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace693() {
        StringUtil stringutil = new StringUtil();
        stringutil.isActuallyWhitespace(-100);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace554274() {
        StringUtil stringutil = new StringUtil();
        stringutil.isActuallyWhitespace(55396);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar573730() {
        StringUtil stringutil = new StringUtil();
        stringutil.isInvisibleChar(57342);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar1331() {
        StringUtil stringutil = new StringUtil();
        stringutil.isInvisibleChar(102);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar302() {
        StringUtil stringutil = new StringUtil();
        stringutil.isInvisibleChar(-1);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar313() {
        StringUtil stringutil = new StringUtil();
        stringutil.isInvisibleChar(0);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar11142424() {
        StringUtil stringutil = new StringUtil();
        stringutil.isInvisibleChar(1114211);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace14711890860() {
        StringUtil stringutil = new StringUtil();
        stringutil.normaliseWhitespace(":nth-last-child)");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace31891121() {
        StringUtil stringutil = new StringUtil();
        stringutil.normaliseWhitespace("gzio");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace18678420532() {
        StringUtil stringutil = new StringUtil();
        stringutil.normaliseWhitespace("[a-zA-Z_:][-a-zA-Z0-9_:.])");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace15515509563() {
        StringUtil stringutil = new StringUtil();
        stringutil.normaliseWhitespace("noscripu");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace30074() {
        StringUtil stringutil = new StringUtil();
        stringutil.normaliseWhitespace("^>");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace15488169060() {
        StringUtil stringutil = new StringUtil();
        stringutil.appendNormalisedWhitespace("keygeo","plaintexs",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace9200238101() {
        StringUtil stringutil = new StringUtil();
        stringutil.appendNormalisedWhitespace("ruby","h2",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace3135711682() {
        StringUtil stringutil = new StringUtil();
        stringutil.appendNormalisedWhitespace("optgrouo","$=",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace1906783203() {
        StringUtil stringutil = new StringUtil();
        stringutil.appendNormalisedWhitespace("?","disablee",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace1074644404() {
        StringUtil stringutil = new StringUtil();
        stringutil.appendNormalisedWhitespace("http:.","button",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin566876450() {
        StringUtil stringutil = new StringUtil();
        stringutil.in(":eq)","ts");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin8753852161() {
        StringUtil stringutil = new StringUtil();
        stringutil.in(":last-of-type","basf");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin566870862() {
        StringUtil stringutil = new StringUtil();
        stringutil.in(":eq)","br");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin5526639963() {
        StringUtil stringutil = new StringUtil();
        stringutil.in("\'","caption");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin1104953544() {
        StringUtil stringutil = new StringUtil();
        stringutil.in("~=","title");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted6587976150() {
        StringUtil stringutil = new StringUtil();
        stringutil.inSorted("caption",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr"});
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted14985518691() {
        StringUtil stringutil = new StringUtil();
        stringutil.inSorted("http:.",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo"});
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted2120438132() {
        StringUtil stringutil = new StringUtil();
        stringutil.inSorted(":containsOwn'",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds"});
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted8293953323() {
        StringUtil stringutil = new StringUtil();
        stringutil.inSorted("select",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf"});
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted3019902094() {
        StringUtil stringutil = new StringUtil();
        stringutil.inSorted(":matchesOwn(",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<"});
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve42350() throws Exception {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve((URL) null,"h2");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve1101167511() throws Exception {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve((URL) null,"table");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve43002() throws Exception {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve((URL) null,"hs");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve10853() throws Exception {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve((URL) null,"|");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve14562244314() throws Exception {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve((URL) null,":matches)");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve2152749620() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve(":first-of-typf","deflate");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve3818515951() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve(":has'","buttom");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve32534362() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve("hr","forn");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve1114810373() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve("rubz","UTF.");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve11165131554() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve("colgrouo","colgrouq");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder10() {
        StringUtil stringutil = new StringUtil();
        stringutil.borrowBuilder();
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder11() {
        StringUtil stringutil = new StringUtil();
        stringutil.borrowBuilder();
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder12() {
        StringUtil stringutil = new StringUtil();
        stringutil.borrowBuilder();
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder13() {
        StringUtil stringutil = new StringUtil();
        stringutil.borrowBuilder();
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder14() {
        StringUtil stringutil = new StringUtil();
        stringutil.borrowBuilder();
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder20919604270() {
        StringUtil stringutil = new StringUtil();
        stringutil.releaseBuilder(":only-chile");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder10552537211() {
        StringUtil stringutil = new StringUtil();
        stringutil.releaseBuilder(":matchesOwn'");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder1101158212() {
        StringUtil stringutil = new StringUtil();
        stringutil.releaseBuilder("table");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder5525734453() {
        StringUtil stringutil = new StringUtil();
        stringutil.releaseBuilder("caption");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder19732341984() {
        StringUtil stringutil = new StringUtil();
        stringutil.releaseBuilder("plaintext");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase29875590() {
        Normalizer normalizer = new Normalizer();
        normalizer.lowerCase("abs:");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase35367441() {
        Normalizer normalizer = new Normalizer();
        normalizer.lowerCase("spam");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase33480052() {
        Normalizer normalizer = new Normalizer();
        normalizer.lowerCase("metb");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase996170353() {
        Normalizer normalizer = new Normalizer();
        normalizer.lowerCase("httpt");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase29875594() {
        Normalizer normalizer = new Normalizer();
        normalizer.lowerCase("abs:");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize1103269000() {
        Normalizer normalizer = new Normalizer();
        normalizer.normalize("theae");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize37311() {
        Normalizer normalizer = new Normalizer();
        normalizer.normalize("th");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize32472() {
        Normalizer normalizer = new Normalizer();
        normalizer.normalize("dt");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize1103268983() {
        Normalizer normalizer = new Normalizer();
        normalizer.normalize("theac");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize1254() {
        Normalizer normalizer = new Normalizer();
        normalizer.normalize("^");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap345674540() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.wrap((InputStream) null,1114112,191);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap300301() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.wrap((InputStream) null,0,239);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap371002() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.wrap((InputStream) null,239,-100);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap819873() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.wrap((InputStream) null,-100,55296);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap301064() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.wrap((InputStream) null,4,191);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer320() throws Exception {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.readToByteBuffer(1);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer2301() throws Exception {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.readToByteBuffer(199);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer312() throws Exception {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.readToByteBuffer(0);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer353() throws Exception {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.readToByteBuffer(4);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer11141434() throws Exception {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.readToByteBuffer(1114112);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout40310() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.timeout(-100,1);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout9621() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.timeout(0,1);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout9932() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.timeout(1,1);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout9933() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.timeout(1,1);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout10614() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.timeout(-1,100);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse12220031200() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("hree","templatd");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse35056491() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("odd","cok");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse5024810262() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("caption","captioo");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse12633878843() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("Set-Cookif","img");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse18591564184() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(":has)","httpr");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse13041356890() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("template","br",(Parser) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse3331627371() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("sarcasm","httpt",(Parser) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse968419272() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("hree","#text",(Parser) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse7259962003() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(":first-of-typd",":contains(",(Parser) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse20434704434() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(":nth-child'","even",(Parser) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse30164310() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("basd");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse13951() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("*>");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse30294422() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("bodz");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse10552537223() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(":matchesOwn(");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse20353119934() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(":first-of-typf");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect33480040() {
        Jsoup jsoup = new Jsoup();
        jsoup.connect("meta");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect996170351() {
        Jsoup jsoup = new Jsoup();
        jsoup.connect("httpt");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect1857353282() {
        Jsoup jsoup = new Jsoup();
        jsoup.connect("US-ASCIH");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect18285123() {
        Jsoup jsoup = new Jsoup();
        jsoup.connect(":eq'");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect15451126504() {
        Jsoup jsoup = new Jsoup();
        jsoup.connect("deflate");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse13209125300() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((File) null,":gt)","buttom");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse17686608991() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((File) null,"head","[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse8783713492() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((File) null,":last-of-type","-,");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse66017273() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((File) null,"svf","bodz");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse19968775924() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((File) null,"spao",":last-of-typf");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse27772930() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((File) null,"\"\"");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse12269453711() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((File) null,":containsData'");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse44132() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((File) null,"lh");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse21156140733() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((File) null,"noembed");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse20913053854() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((File) null,"isindex");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse1124703020() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((InputStream) null,"rubz","type");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse17943495821() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((InputStream) null,"optgrouo","link");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse20898583202() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((InputStream) null,"inpuu","select");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse7392076193() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((InputStream) null,"hq","charseu");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse2463414() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((InputStream) null,"bs","xml");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse8329244570() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((InputStream) null,"scrips",":only-chilc",(Parser) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse16552460841() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((InputStream) null,"actioo","|",(Parser) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse1012830762() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((InputStream) null,"imf","-,",(Parser) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse16446415753() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((InputStream) null,"*<",":matchesOwn'",(Parser) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse11829425204() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((InputStream) null,"-.","imagd",(Parser) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment596221230() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("]]>",":has(");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment284774251() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment(":matchesOwn)",":only-of-typf");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment804420562() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("disablee","thead");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment15273925703() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("tfoou",":nth-of-type'");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment1669401624() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment(":eq'","text/");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment33218820() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("linl");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment5525734461() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("captioo");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment29172() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("\"");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment1143073() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("svg");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment11414281684() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("[CDATA[");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse11600() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((URL) null,199);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse12011() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((URL) null,240);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse8612() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((URL) null,-100);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse582043() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((URL) null,57243);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse562584() throws Exception {
        Jsoup jsoup = new Jsoup();
        jsoup.parse((URL) null,55297);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean17283989910() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("*>","iframe",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean14785965441() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("tablf","Set-Cookid",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean16896912382() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("noembed","nobr",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean5492812983() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("hq","frameseu",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean3041100944() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("https","radip",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean8748333960() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("theae",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean1044701() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("hs",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean13298376572() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean(":first-of-typf",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean11618026773() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("action",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean8226828014() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("http-equiw",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean4220113110() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("nobs",":gt)",(Whitelist) null,(Document.OutputSettings) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean16806172911() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean(":nth-last-child(","http-equiw",(Whitelist) null,(Document.OutputSettings) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean9276399582() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("noframet","nobr",(Whitelist) null,(Document.OutputSettings) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean11650210483() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("lh","forl",(Whitelist) null,(Document.OutputSettings) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean3989942874() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("hiddeo","gziq",(Whitelist) null,(Document.OutputSettings) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid8748333960() {
        Jsoup jsoup = new Jsoup();
        jsoup.isValid("theae",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid34069311() {
        Jsoup jsoup = new Jsoup();
        jsoup.isValid("odc",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid1006882() {
        Jsoup jsoup = new Jsoup();
        jsoup.isValid("du",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid11107197083() {
        Jsoup jsoup = new Jsoup();
        jsoup.isValid("#root",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid1023934() {
        Jsoup jsoup = new Jsoup();
        jsoup.isValid("h0",(Whitelist) null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput64339950() {
        Parser parser = new Parser();
        parser.parseInput("col","namd");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput2147731541() {
        Parser parser = new Parser();
        parser.parseInput("nobq","style");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput4261495822() {
        Parser parser = new Parser();
        parser.parseInput(":only-chilc","svh");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput19007793033() {
        Parser parser = new Parser();
        parser.parseInput("optgrouo","style");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput19266345744() {
        Parser parser = new Parser();
        parser.parseInput("scrips","xml");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput33746670() {
        Parser parser = new Parser();
        parser.parseInput((Reader) null,"namd");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput24001() {
        Parser parser = new Parser();
        parser.parseInput((Reader) null,"-,");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput18690644122() {
        Parser parser = new Parser();
        parser.parseInput((Reader) null,"sarcasl");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput42333() {
        Parser parser = new Parser();
        parser.parseInput((Reader) null,"h0");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput6361966724() {
        Parser parser = new Parser();
        parser.parseInput((Reader) null,"colgroup");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput11750956220() {
        Parser parser = new Parser();
        parser.parseFragmentInput("DOCTYPF",(Element) null,":emptz");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput533311341() {
        Parser parser = new Parser();
        parser.parseFragmentInput("text/",(Element) null,":nth-last-child'");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput12426931282() {
        Parser parser = new Parser();
        parser.parseFragmentInput("https",(Element) null,"~<");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput5358518963() {
        Parser parser = new Parser();
        parser.parseFragmentInput(":only-of-type",(Element) null,"#text");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput13945946534() {
        Parser parser = new Parser();
        parser.parseFragmentInput("tfoos",(Element) null,"bodz");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder10() {
        Parser parser = new Parser();
        parser.getTreeBuilder();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder11() {
        Parser parser = new Parser();
        parser.getTreeBuilder();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder12() {
        Parser parser = new Parser();
        parser.getTreeBuilder();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder13() {
        Parser parser = new Parser();
        parser.getTreeBuilder();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder14() {
        Parser parser = new Parser();
        parser.getTreeBuilder();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder310() {
        Parser parser = new Parser();
        parser.setTreeBuilder((TreeBuilder) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder311() {
        Parser parser = new Parser();
        parser.setTreeBuilder((TreeBuilder) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder312() {
        Parser parser = new Parser();
        parser.setTreeBuilder((TreeBuilder) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder313() {
        Parser parser = new Parser();
        parser.setTreeBuilder((TreeBuilder) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder314() {
        Parser parser = new Parser();
        parser.setTreeBuilder((TreeBuilder) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors10() {
        Parser parser = new Parser();
        parser.isTrackErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors11() {
        Parser parser = new Parser();
        parser.isTrackErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors12() {
        Parser parser = new Parser();
        parser.isTrackErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors13() {
        Parser parser = new Parser();
        parser.isTrackErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors14() {
        Parser parser = new Parser();
        parser.isTrackErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors4320() {
        Parser parser = new Parser();
        parser.setTrackErrors(401);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors341() {
        Parser parser = new Parser();
        parser.setTrackErrors(3);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors572742() {
        Parser parser = new Parser();
        parser.setTrackErrors(57243);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors573743() {
        Parser parser = new Parser();
        parser.setTrackErrors(57343);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors553284() {
        Parser parser = new Parser();
        parser.setTrackErrors(55297);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors10() {
        Parser parser = new Parser();
        parser.getErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors11() {
        Parser parser = new Parser();
        parser.getErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors12() {
        Parser parser = new Parser();
        parser.getErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors13() {
        Parser parser = new Parser();
        parser.getErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors14() {
        Parser parser = new Parser();
        parser.getErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings310() {
        Parser parser = new Parser();
        parser.settings((ParseSettings) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings311() {
        Parser parser = new Parser();
        parser.settings((ParseSettings) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings312() {
        Parser parser = new Parser();
        parser.settings((ParseSettings) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings313() {
        Parser parser = new Parser();
        parser.settings((ParseSettings) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings314() {
        Parser parser = new Parser();
        parser.settings((ParseSettings) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings10() {
        Parser parser = new Parser();
        parser.settings();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings11() {
        Parser parser = new Parser();
        parser.settings();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings12() {
        Parser parser = new Parser();
        parser.settings();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings13() {
        Parser parser = new Parser();
        parser.settings();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings14() {
        Parser parser = new Parser();
        parser.settings();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse17074110570() {
        Parser parser = new Parser();
        parser.parse("charset","disabled");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse18856717311() {
        Parser parser = new Parser();
        parser.parse("optiom","colgrouq");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse11543821402() {
        Parser parser = new Parser();
        parser.parse("href",":first-chile");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse6538548383() {
        Parser parser = new Parser();
        parser.parse("deflatd","^=");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse2088264() {
        Parser parser = new Parser();
        parser.parse("hr","img");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment8919206480() {
        Parser parser = new Parser();
        parser.parseFragment(":contains'",(Element) null,"href");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment20010561061() {
        Parser parser = new Parser();
        parser.parseFragment("iframd",(Element) null,":alm");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment17592297272() {
        Parser parser = new Parser();
        parser.parseFragment(":gt(",(Element) null,"]]?");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment15562221493() {
        Parser parser = new Parser();
        parser.parseFragment(":only-chile",(Element) null,":containsData)");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment1687100304() {
        Parser parser = new Parser();
        parser.parseFragment("basefonu",(Element) null,"stylf");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment5309978410() {
        Parser parser = new Parser();
        parser.parseFragment(":not'",(Element) null,"checkbow",(ParseErrorList) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment18125899601() {
        Parser parser = new Parser();
        parser.parseFragment("]]>",(Element) null,"radio",(ParseErrorList) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment18858227562() {
        Parser parser = new Parser();
        parser.parseFragment("br",(Element) null,"optgrouq",(ParseErrorList) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment13186422003() {
        Parser parser = new Parser();
        parser.parseFragment("noscripu",(Element) null,":nth-of-type'",(ParseErrorList) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment6870380764() {
        Parser parser = new Parser();
        parser.parseFragment("!<",(Element) null,"deflatd",(ParseErrorList) null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment1081810() {
        Parser parser = new Parser();
        parser.parseXmlFragment("hs","ts");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment36119631() {
        Parser parser = new Parser();
        parser.parseXmlFragment("de","rubz");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment11140934472() {
        Parser parser = new Parser();
        parser.parseXmlFragment("#roou","namf");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment11586267513() {
        Parser parser = new Parser();
        parser.parseXmlFragment("metb",":first-chilc");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment14816081444() {
        Parser parser = new Parser();
        parser.parseXmlFragment(":nth-last-of-type)","$>");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment11749127230() {
        Parser parser = new Parser();
        parser.parseBodyFragment("frameset","basefonu");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment1056961() {
        Parser parser = new Parser();
        parser.parseBodyFragment("h1","h0");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment13494025362() {
        Parser parser = new Parser();
        parser.parseBodyFragment("checkbox","commanc");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment2413545073() {
        Parser parser = new Parser();
        parser.parseBodyFragment("button","!=");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment1907688314() {
        Parser parser = new Parser();
        parser.parseBodyFragment("disabled","|");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities1092350() {
        Parser parser = new Parser();
        parser.unescapeEntities("li",true);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities5460467801() {
        Parser parser = new Parser();
        parser.unescapeEntities("frameses",true);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities4262625972() {
        Parser parser = new Parser();
        parser.unescapeEntities(":only-child",true);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities5460468113() {
        Parser parser = new Parser();
        parser.unescapeEntities("frameset",true);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities8534406114() {
        Parser parser = new Parser();
        parser.unescapeEntities("noscripu",true);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed8498180650() {
        Parser parser = new Parser();
        parser.parseBodyFragmentRelaxed(":first-of-typf","boundary");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed18200631461() {
        Parser parser = new Parser();
        parser.parseBodyFragmentRelaxed("inpuu","colgrouq");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed6360819712() {
        Parser parser = new Parser();
        parser.parseBodyFragmentRelaxed("th","colgrouq");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed11838618143() {
        Parser parser = new Parser();
        parser.parseBodyFragmentRelaxed("inpuu","th");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed2192372154() {
        Parser parser = new Parser();
        parser.parseBodyFragmentRelaxed("rubx","titld");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser10() {
        Parser parser = new Parser();
        parser.htmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser11() {
        Parser parser = new Parser();
        parser.htmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser12() {
        Parser parser = new Parser();
        parser.htmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser13() {
        Parser parser = new Parser();
        parser.htmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser14() {
        Parser parser = new Parser();
        parser.htmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser10() {
        Parser parser = new Parser();
        parser.xmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser11() {
        Parser parser = new Parser();
        parser.xmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser12() {
        Parser parser = new Parser();
        parser.xmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser13() {
        Parser parser = new Parser();
        parser.xmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser14() {
        Parser parser = new Parser();
        parser.xmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName10() {
        Tag tag = new Tag();
        tag.getName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName11() {
        Tag tag = new Tag();
        tag.getName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName12() {
        Tag tag = new Tag();
        tag.getName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName13() {
        Tag tag = new Tag();
        tag.getName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName14() {
        Tag tag = new Tag();
        tag.getName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName10() {
        Tag tag = new Tag();
        tag.normalName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName11() {
        Tag tag = new Tag();
        tag.normalName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName12() {
        Tag tag = new Tag();
        tag.normalName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName13() {
        Tag tag = new Tag();
        tag.normalName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName14() {
        Tag tag = new Tag();
        tag.normalName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf1025790() {
        Tag tag = new Tag();
        tag.valueOf("h6",(ParseSettings) null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf12426070431() {
        Tag tag = new Tag();
        tag.valueOf("http:0",(ParseSettings) null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf7107003602() {
        Tag tag = new Tag();
        tag.valueOf(":matchTexu",(ParseSettings) null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf1907689553() {
        Tag tag = new Tag();
        tag.valueOf("disabled",(ParseSettings) null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf14628278104() {
        Tag tag = new Tag();
        tag.valueOf("US-ASCIJ",(ParseSettings) null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf21011357980() {
        Tag tag = new Tag();
        tag.valueOf(":matchTexs");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf35756411() {
        Tag tag = new Tag();
        tag.valueOf("type");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf16183955612() {
        Tag tag = new Tag();
        tag.valueOf(":only-of-typf");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf11414281683() {
        Tag tag = new Tag();
        tag.valueOf("[CDATA[");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf10761623184() {
        Tag tag = new Tag();
        tag.valueOf(":contains(");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock10() {
        Tag tag = new Tag();
        tag.isBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock11() {
        Tag tag = new Tag();
        tag.isBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock12() {
        Tag tag = new Tag();
        tag.isBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock13() {
        Tag tag = new Tag();
        tag.isBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock14() {
        Tag tag = new Tag();
        tag.isBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock10() {
        Tag tag = new Tag();
        tag.formatAsBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock11() {
        Tag tag = new Tag();
        tag.formatAsBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock12() {
        Tag tag = new Tag();
        tag.formatAsBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock13() {
        Tag tag = new Tag();
        tag.formatAsBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock14() {
        Tag tag = new Tag();
        tag.formatAsBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock10() {
        Tag tag = new Tag();
        tag.canContainBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock11() {
        Tag tag = new Tag();
        tag.canContainBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock12() {
        Tag tag = new Tag();
        tag.canContainBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock13() {
        Tag tag = new Tag();
        tag.canContainBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock14() {
        Tag tag = new Tag();
        tag.canContainBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline10() {
        Tag tag = new Tag();
        tag.isInline();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline11() {
        Tag tag = new Tag();
        tag.isInline();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline12() {
        Tag tag = new Tag();
        tag.isInline();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline13() {
        Tag tag = new Tag();
        tag.isInline();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline14() {
        Tag tag = new Tag();
        tag.isInline();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData10() {
        Tag tag = new Tag();
        tag.isData();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData11() {
        Tag tag = new Tag();
        tag.isData();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData12() {
        Tag tag = new Tag();
        tag.isData();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData13() {
        Tag tag = new Tag();
        tag.isData();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData14() {
        Tag tag = new Tag();
        tag.isData();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty10() {
        Tag tag = new Tag();
        tag.isEmpty();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty11() {
        Tag tag = new Tag();
        tag.isEmpty();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty12() {
        Tag tag = new Tag();
        tag.isEmpty();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty13() {
        Tag tag = new Tag();
        tag.isEmpty();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty14() {
        Tag tag = new Tag();
        tag.isEmpty();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing10() {
        Tag tag = new Tag();
        tag.isSelfClosing();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing11() {
        Tag tag = new Tag();
        tag.isSelfClosing();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing12() {
        Tag tag = new Tag();
        tag.isSelfClosing();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing13() {
        Tag tag = new Tag();
        tag.isSelfClosing();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing14() {
        Tag tag = new Tag();
        tag.isSelfClosing();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag10() {
        Tag tag = new Tag();
        tag.isKnownTag();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag11() {
        Tag tag = new Tag();
        tag.isKnownTag();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag12() {
        Tag tag = new Tag();
        tag.isKnownTag();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag13() {
        Tag tag = new Tag();
        tag.isKnownTag();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag14() {
        Tag tag = new Tag();
        tag.isKnownTag();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag987190() {
        Tag tag = new Tag();
        tag.isKnownTag("col");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag18245831() {
        Tag tag = new Tag();
        tag.isKnownTag(":alm");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag1188392() {
        Tag tag = new Tag();
        tag.isKnownTag("xmm");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag32110833() {
        Tag tag = new Tag();
        tag.isKnownTag("hreg");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag1143074() {
        Tag tag = new Tag();
        tag.isKnownTag("svg");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace10() {
        Tag tag = new Tag();
        tag.preserveWhitespace();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace11() {
        Tag tag = new Tag();
        tag.preserveWhitespace();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace12() {
        Tag tag = new Tag();
        tag.preserveWhitespace();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace13() {
        Tag tag = new Tag();
        tag.preserveWhitespace();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace14() {
        Tag tag = new Tag();
        tag.preserveWhitespace();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed10() {
        Tag tag = new Tag();
        tag.isFormListed();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed11() {
        Tag tag = new Tag();
        tag.isFormListed();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed12() {
        Tag tag = new Tag();
        tag.isFormListed();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed13() {
        Tag tag = new Tag();
        tag.isFormListed();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed14() {
        Tag tag = new Tag();
        tag.isFormListed();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable10() {
        Tag tag = new Tag();
        tag.isFormSubmittable();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable11() {
        Tag tag = new Tag();
        tag.isFormSubmittable();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable12() {
        Tag tag = new Tag();
        tag.isFormSubmittable();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable13() {
        Tag tag = new Tag();
        tag.isFormSubmittable();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable14() {
        Tag tag = new Tag();
        tag.isFormSubmittable();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage10() {
        ParseError parseerror = new ParseError();
        parseerror.getErrorMessage();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage11() {
        ParseError parseerror = new ParseError();
        parseerror.getErrorMessage();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage12() {
        ParseError parseerror = new ParseError();
        parseerror.getErrorMessage();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage13() {
        ParseError parseerror = new ParseError();
        parseerror.getErrorMessage();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage14() {
        ParseError parseerror = new ParseError();
        parseerror.getErrorMessage();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition10() {
        ParseError parseerror = new ParseError();
        parseerror.getPosition();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition11() {
        ParseError parseerror = new ParseError();
        parseerror.getPosition();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition12() {
        ParseError parseerror = new ParseError();
        parseerror.getPosition();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition13() {
        ParseError parseerror = new ParseError();
        parseerror.getPosition();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition14() {
        ParseError parseerror = new ParseError();
        parseerror.getPosition();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking10() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.noTracking();
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking11() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.noTracking();
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking12() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.noTracking();
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking13() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.noTracking();
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking14() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.noTracking();
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking310() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.tracking(0);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking321() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.tracking(1);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking2552() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.tracking(224);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking1313() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.tracking(100);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking2224() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.tracking(191);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos10() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.pos();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos11() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.pos();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos12() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.pos();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos13() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.pos();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos14() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.pos();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty10() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.isEmpty();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty11() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.isEmpty();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty12() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.isEmpty();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty13() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.isEmpty();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty14() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.isEmpty();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent10() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.current();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent11() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.current();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent12() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.current();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent13() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.current();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent14() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.current();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance10() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance11() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance12() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance13() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance14() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo1260() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeTo('_');
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo741() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeTo('+');
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo1012() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeTo('F');
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo1293() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeTo('b');
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo1344() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeTo('g');
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny1280() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeToAny('a');
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny1531() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeToAny('z');
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny1242() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeToAny(']');
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny883() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeToAny('9');
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny924() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeToAny('=');
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload6635100460() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((File) null,":nth-child(","optiom");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload32610961() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((File) null,"*<","gziq");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload31565622() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((File) null,"(","eveo");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload15055682413() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((File) null,":nth-of-type)","nobq");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload2141883694() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((File) null,"meta","titld");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload1138287230() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((InputStream) null,"xmp","tablf");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload940602801() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((InputStream) null,"bodx","xmo");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload1062055432() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((InputStream) null,"linj","heae");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload10407482513() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((InputStream) null,"plaintext","*}");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload13529132184() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((InputStream) null,"http:0","tfoos");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload933739460() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((InputStream) null,"radip","tfoou",(Parser) null);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload14583533941() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((InputStream) null,"td","US-ASCIJ",(Parser) null);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload10487116182() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((InputStream) null,":lt)",":nth-last-of-type(",(Parser) null);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload12060311033() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((InputStream) null,"html","h3",(Parser) null);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload4065674434() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.load((InputStream) null,"scrips","^<",(Parser) null);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer11150730() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.readToByteBuffer((InputStream) null,1114112);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer14611() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.readToByteBuffer((InputStream) null,500);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer12002() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.readToByteBuffer((InputStream) null,239);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer562583() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.readToByteBuffer((InputStream) null,55297);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer11604() throws Exception {
        DataUtil datautil = new DataUtil();
        datautil.readToByteBuffer((InputStream) null,199);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull310() {
        Validate validate = new Validate();
        validate.notNull((Object) null);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull311() {
        Validate validate = new Validate();
        validate.notNull((Object) null);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull312() {
        Validate validate = new Validate();
        validate.notNull((Object) null);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull313() {
        Validate validate = new Validate();
        validate.notNull((Object) null);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull314() {
        Validate validate = new Validate();
        validate.notNull((Object) null);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull18690644140() {
        Validate validate = new Validate();
        validate.notNull((Object) null,"sarcasn");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull21156140721() {
        Validate validate = new Validate();
        validate.notNull((Object) null,"noembec");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull19788920042() {
        Validate validate = new Validate();
        validate.notNull((Object) null,":containsOwn(");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull10548395573() {
        Validate validate = new Validate();
        validate.notNull((Object) null,":first-chilc");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull35376744() {
        Validate validate = new Validate();
        validate.notNull((Object) null,"spam");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12620() {
        Validate validate = new Validate();
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12621() {
        Validate validate = new Validate();
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12622() {
        Validate validate = new Validate();
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12623() {
        Validate validate = new Validate();
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12624() {
        Validate validate = new Validate();
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue15515900450() {
        Validate validate = new Validate();
        validate.isTrue(true,"noscrips");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue30555241() {
        Validate validate = new Validate();
        validate.isTrue(true,"basf");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue17209191832() {
        Validate validate = new Validate();
        validate.isTrue(true,"basefons");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue428333() {
        Validate validate = new Validate();
        validate.isTrue(true,"ts");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue32523494() {
        Validate validate = new Validate();
        validate.isTrue(true,"html");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12620() {
        Validate validate = new Validate();
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12621() {
        Validate validate = new Validate();
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12622() {
        Validate validate = new Validate();
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12623() {
        Validate validate = new Validate();
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12624() {
        Validate validate = new Validate();
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse21011748890() {
        Validate validate = new Validate();
        validate.isFalse(true,":matchTexs");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse571097421() {
        Validate validate = new Validate();
        validate.isFalse(true,":root");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse1003972132() {
        Validate validate = new Validate();
        validate.isFalse(true,"inpuu");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse35508923() {
        Validate validate = new Validate();
        validate.isFalse(true,"ruby");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse423984() {
        Validate validate = new Validate();
        validate.isFalse(true,"h4");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements18901873730() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{});
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements199866001() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{});
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements2941850232() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{});
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements7933151913() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{});
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements2703978464() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{});
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements12141740590() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{},":eq'");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements5815665261() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{},"spam");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements9874647412() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{},"img");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements17854137613() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{},"templatf");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements5254097794() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{},"frameses");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty1103714480() {
        Validate validate = new Validate();
        validate.notEmpty("titlf");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty10176250961() {
        Validate validate = new Validate();
        validate.notEmpty(":nth-last-of-type'");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty33042() {
        Validate validate = new Validate();
        validate.notEmpty("h1");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty32110823() {
        Validate validate = new Validate();
        validate.notEmpty("href");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty16449536134() {
        Validate validate = new Validate();
        validate.notEmpty("frameses");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty16597376220() {
        Validate validate = new Validate();
        validate.notEmpty(":first-child","h6");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty569876411() {
        Validate validate = new Validate();
        validate.notEmpty(":lt(","]]>");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty12035174222() {
        Validate validate = new Validate();
        validate.notEmpty("httpr","linl");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty21012359603() {
        Validate validate = new Validate();
        validate.notEmpty("de",":matchText");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty989812784() {
        Validate validate = new Validate();
        validate.notEmpty("gzio","xmk");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail1650854890() {
        Validate validate = new Validate();
        validate.fail("http-equiu");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail1101158211() {
        Validate validate = new Validate();
        validate.fail("table");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail996170352() {
        Validate validate = new Validate();
        validate.fail("httpt");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail10552537233() {
        Validate validate = new Validate();
        validate.fail(":matchesOwn)");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail35756414() {
        Validate validate = new Validate();
        validate.fail("type");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect10548386290() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect(":first-chile");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect9076856541() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect("script");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect30164322() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect("base");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect32132593() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect("htmm");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect1857353264() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect("US-ASCIJ");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect((URL) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect((URL) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect((URL) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect((URL) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect((URL) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url((URL) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url((URL) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url((URL) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url((URL) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url((URL) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl1188430() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url("xmq");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl358296681() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url("#root");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl15368918752() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url("checkboy");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl33868653() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url("nobs");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl11164() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url("!>");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy((Proxy) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy((Proxy) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy((Proxy) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy((Proxy) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy((Proxy) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy9620649900() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy(":last-child",224);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy6193703351() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy(":containsData'",2);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy4262637942() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy(":only-chile",3);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy8534394193() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy("noscrips",101);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy9125962314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy("hiddeo",401);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent1097804330() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.userAgent("stylf");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent11927218611() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.userAgent("noframer");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent33218812() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.userAgent("link");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent18912061163() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.userAgent(":nth-of-type(");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent358296694() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.userAgent("#roou");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout2710() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.timeout(240);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout5311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.timeout(500);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout1342() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.timeout(103);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout2303() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.timeout(199);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout2184() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.timeout(187);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize4310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.maxBodySize(400);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize1321() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.maxBodySize(101);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize2302() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.maxBodySize(199);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize2233() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.maxBodySize(192);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize554274() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.maxBodySize(55396);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12620() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.followRedirects(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12621() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.followRedirects(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12622() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.followRedirects(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12623() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.followRedirects(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12624() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.followRedirects(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer1097804320() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.referrer("style");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer2709408271() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.referrer("disabled");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer20919604292() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.referrer(":only-chilc");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer37323() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.referrer("ti");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer1101158204() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.referrer("tabld");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.method((Method) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.method((Method) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.method((Method) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.method((Method) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.method((Method) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12620() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreHttpErrors(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12621() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreHttpErrors(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12622() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreHttpErrors(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12623() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreHttpErrors(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12624() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreHttpErrors(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12620() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreContentType(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12621() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreContentType(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12622() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreContentType(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12623() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreContentType(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12624() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreContentType(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata7423166840() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(";","checkec");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata62092861() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("col","forn");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata16437962992() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("DOCTYPF","li");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata13266392563() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":first-of-type","head");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata385811124() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":has)","basefont");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.sslSocketFactory((SSLSocketFactory) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.sslSocketFactory((SSLSocketFactory) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.sslSocketFactory((SSLSocketFactory) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.sslSocketFactory((SSLSocketFactory) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.sslSocketFactory((SSLSocketFactory) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata17572456020() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":eq(","-,",(InputStream) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata18271458831() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":not(",":empty",(InputStream) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata17573035102() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":eq)","h4",(InputStream) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata13652995313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("basefons","DOCTYPF",(InputStream) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata9164378774() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("~>","hidden",(InputStream) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata12070() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("$<");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata32134791() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("http");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata34842() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("li");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata35118013() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("ruby");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata35118014() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("ruby");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata21065455170() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":last-of-typf");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata14562253621() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":matches(");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata1082706172() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("radin");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata1283() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("a");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata18285144() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":eq)");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data((Collection<Connection.KeyVal>) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data((Collection<Connection.KeyVal>) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data((Collection<Connection.KeyVal>) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data((Collection<Connection.KeyVal>) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data((Collection<Connection.KeyVal>) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata20919604270() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":only-chile");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata9503947311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("commane");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata9503947302() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("command");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata1188433() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("xmq");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata358799204() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("#texu");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody20353119920() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.requestBody(":first-of-type");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody3081290261() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.requestBody(":last-child");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody6361976012() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.requestBody("colgrouq");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody33441673() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.requestBody("math");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody10548386294() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.requestBody(":first-chile");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader5124331420() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.header("US-ASCII","command");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader17743326921() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.header("base","[a-zA-Z_:][-a-zA-Z0-9_:.])");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader2883907222() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.header("tc",":nth-child'");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader7686212173() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.header(":last-of-type","style");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader604775524() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.header("odc",":roou");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders11927218630() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.headers("noframet");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders14571() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.headers("*|");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders923492() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.headers("]]>");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders663() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.headers("#");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders20913044554() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.headers("isindex");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie810727490() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookie("UTF.","*=");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie7423571091() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookie("*=","checked");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie13298345182() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookie(":first-of-typd","de");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie18100956063() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookie("basefonu","h2");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie1142317054() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookie("type","nobs");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies5525734450() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookies("caption");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies32461() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookies("ds");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies33092() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookies("h6");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies15515509563() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookies("noscripu");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies923504() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookies("]]?");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.parser((Parser) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.parser((Parser) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.parser((Parser) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.parser((Parser) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.parser((Parser) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget10() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.get();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget11() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.get();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget12() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.get();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget13() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.get();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget14() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.get();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost10() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.post();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost11() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.post();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost12() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.post();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost13() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.post();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost14() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.post();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute10() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.execute();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute11() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.execute();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute12() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.execute();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute13() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.execute();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute14() throws Exception {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.execute();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest10() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest11() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest12() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest13() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest14() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request((Connection.Request) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request((Connection.Request) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request((Connection.Request) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request((Connection.Request) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request((Connection.Request) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse10() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse11() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse12() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse13() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse14() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response((Connection.Response) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response((Connection.Response) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response((Connection.Response) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response((Connection.Response) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response((Connection.Response) null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset18690634820() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.postDataCharset("sarcasl");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset33868641() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.postDataCharset("nobr");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset33218802() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.postDataCharset("linj");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset12073() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.postDataCharset("$<");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset32314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.postDataCharset("dd");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup310() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.fromJsoup((org.jsoup.nodes.Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup311() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.fromJsoup((org.jsoup.nodes.Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup312() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.fromJsoup((org.jsoup.nodes.Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup313() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.fromJsoup((org.jsoup.nodes.Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup314() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.fromJsoup((org.jsoup.nodes.Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9610() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.convert((org.jsoup.nodes.Document) null,(Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9611() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.convert((org.jsoup.nodes.Document) null,(Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9612() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.convert((org.jsoup.nodes.Document) null,(Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9613() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.convert((org.jsoup.nodes.Document) null,(Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9614() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.convert((org.jsoup.nodes.Document) null,(Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString310() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.asString((Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString311() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.asString((Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString312() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.asString((Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString313() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.asString((Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString314() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.asString((Document) null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.isEmpty();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.isEmpty();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.isEmpty();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.isEmpty();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.isEmpty();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.peek();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.peek();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.peek();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.peek();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.peek();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst1270() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst('`');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst1241() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst(']');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst1002() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst('E');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst1343() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst('g');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst774() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst('.');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst10101369390() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst("optioo");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst10548386281() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst(":first-child");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst32482() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst("du");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst33737383() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst("name");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst904() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst(";");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches1099020() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matches("odd");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches30164331() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matches("basf");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches37262() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matches("tc");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches15368918733() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matches("checkbow");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches9076856554() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matches("scrips");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS1102773770() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesCS("tfoot");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS39971() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesCS("~<");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS33737392() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesCS("namf");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS31984623() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesCS("heac");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS33094() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesCS("h6");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny10548386290() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny(":first-chile");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny18305271() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny(":gt'");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny14711890862() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny(":nth-last-child)");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny29875583() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny("abs9");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny17571249794() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny(":emptz");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny1270() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny('`');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny1241() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny(']');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny1572() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny('~');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny1263() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny('_');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny1014() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny('F');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesStartTag();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesStartTag();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesStartTag();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesStartTag();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesStartTag();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp32110810() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchChomp("hree");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp34841() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchChomp("li");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp1103268992() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchChomp("thead");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp996170343() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchChomp("https");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp16449536124() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchChomp("frameset");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume1857353270() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume("US-ASCII");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume14701() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume("-,");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume31891132() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume("gzip");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume30294403() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume("bodx");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume1188414() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume("xmo");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo7423139250() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTo("checkec");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo37301() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTo("tg");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo21156131442() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTo("noembee");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo21153115443() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTo("boundarx");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo11912143964() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTo("iframf");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase35367460() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToIgnoreCase("spao");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase16183955601() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToIgnoreCase(":only-of-type");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase33062() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToIgnoreCase("h3");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase29173() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToIgnoreCase("\"");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase37314() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToIgnoreCase("th");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny18353320() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToAny(":lt'");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny34841() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToAny("li");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny12082() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToAny("$=");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny20913044543() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToAny("isindew");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny1003581204() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToAny("inpus");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo19370() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompTo("<.");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo35118021() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompTo("rubz");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo11414281682() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompTo("[CDATA[");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo2882752483() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompTo(":nth-child(");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo31255624() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompTo("eveo");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase33040() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompToIgnoreCase("h1");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase567593341() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompToIgnoreCase(":has'");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase19788929352() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompToIgnoreCase(":containsOwn'");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase20913044543() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompToIgnoreCase("isindew");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase11927218624() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompToIgnoreCase("noframes");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced22400() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompBalanced("'",'F');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced42451() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompBalanced('f','z');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced22352() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompBalanced('&','`');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced40393() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompBalanced('`','f');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced23664() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompBalanced(',',')');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape37320() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.unescape("ti");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape30294401() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.unescape("bodx");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape35118022() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.unescape("rubz");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape15515509543() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.unescape("noscrips");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape12068418934() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.unescape("http:.");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTagName();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTagName();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTagName();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTagName();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTagName();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeElementSelector();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeElementSelector();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeElementSelector();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeElementSelector();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeElementSelector();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeCssIdentifier();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeCssIdentifier();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeCssIdentifier();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeCssIdentifier();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeCssIdentifier();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeAttributeKey();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeAttributeKey();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeAttributeKey();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeAttributeKey();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeAttributeKey();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.remainder();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.remainder();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.remainder();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.remainder();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.remainder();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase10() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveTagCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase11() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveTagCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase12() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveTagCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase13() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveTagCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase14() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveTagCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase10() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveAttributeCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase11() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveAttributeCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase12() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveAttributeCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase13() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveAttributeCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase14() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveAttributeCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag13930() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeTag("*<");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag30294411() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeTag("body");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag19392() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeTag("<0");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag15515509563() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeTag("noscripu");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag33737394() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeTag("namf");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute18245820() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeAttribute(":all");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute10548386281() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeAttribute(":first-child");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute35756402() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeAttribute("typd");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute31891133() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeAttribute("gzip");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute944() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeAttribute("?");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean310() {
        Cleaner cleaner = new Cleaner();
        cleaner.clean((Document) null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean311() {
        Cleaner cleaner = new Cleaner();
        cleaner.clean((Document) null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean312() {
        Cleaner cleaner = new Cleaner();
        cleaner.clean((Document) null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean313() {
        Cleaner cleaner = new Cleaner();
        cleaner.clean((Document) null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean314() {
        Cleaner cleaner = new Cleaner();
        cleaner.clean((Document) null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid310() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValid((Document) null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid311() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValid((Document) null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid312() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValid((Document) null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid313() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValid((Document) null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid314() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValid((Document) null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml33441670() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValidBodyHtml("math");
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml21065455171() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValidBodyHtml(":last-of-typf");
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml10761623192() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValidBodyHtml(":contains)");
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml11346655523() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValidBodyHtml("keygen");
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml26152064() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValidBodyHtml("UTF.");
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone10() {
        Whitelist whitelist = new Whitelist();
        whitelist.none();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone11() {
        Whitelist whitelist = new Whitelist();
        whitelist.none();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone12() {
        Whitelist whitelist = new Whitelist();
        whitelist.none();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone13() {
        Whitelist whitelist = new Whitelist();
        whitelist.none();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone14() {
        Whitelist whitelist = new Whitelist();
        whitelist.none();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText10() {
        Whitelist whitelist = new Whitelist();
        whitelist.simpleText();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText11() {
        Whitelist whitelist = new Whitelist();
        whitelist.simpleText();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText12() {
        Whitelist whitelist = new Whitelist();
        whitelist.simpleText();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText13() {
        Whitelist whitelist = new Whitelist();
        whitelist.simpleText();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText14() {
        Whitelist whitelist = new Whitelist();
        whitelist.simpleText();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic10() {
        Whitelist whitelist = new Whitelist();
        whitelist.basic();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic11() {
        Whitelist whitelist = new Whitelist();
        whitelist.basic();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic12() {
        Whitelist whitelist = new Whitelist();
        whitelist.basic();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic13() {
        Whitelist whitelist = new Whitelist();
        whitelist.basic();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic14() {
        Whitelist whitelist = new Whitelist();
        whitelist.basic();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages10() {
        Whitelist whitelist = new Whitelist();
        whitelist.basicWithImages();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages11() {
        Whitelist whitelist = new Whitelist();
        whitelist.basicWithImages();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages12() {
        Whitelist whitelist = new Whitelist();
        whitelist.basicWithImages();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages13() {
        Whitelist whitelist = new Whitelist();
        whitelist.basicWithImages();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages14() {
        Whitelist whitelist = new Whitelist();
        whitelist.basicWithImages();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed10() {
        Whitelist whitelist = new Whitelist();
        whitelist.relaxed();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed11() {
        Whitelist whitelist = new Whitelist();
        whitelist.relaxed();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed12() {
        Whitelist whitelist = new Whitelist();
        whitelist.relaxed();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed13() {
        Whitelist whitelist = new Whitelist();
        whitelist.relaxed();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed14() {
        Whitelist whitelist = new Whitelist();
        whitelist.relaxed();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags1101578780() {
        Whitelist whitelist = new Whitelist();
        whitelist.addTags("tbodz");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags29875581() {
        Whitelist whitelist = new Whitelist();
        whitelist.addTags("abs9");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags10032436872() {
        Whitelist whitelist = new Whitelist();
        whitelist.addTags("textarea");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags15368918743() {
        Whitelist whitelist = new Whitelist();
        whitelist.addTags("checkbox");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags13215466004() {
        Whitelist whitelist = new Whitelist();
        whitelist.addTags("templatd");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags987180() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeTags("cok");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags21011358001() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeTags(":matchTexu");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags18285132() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeTags(":eq(");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags1253() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeTags("^");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags1097804324() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeTags("style");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes604776140() {
        Whitelist whitelist = new Whitelist();
        whitelist.addAttributes("ode",":roou");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes11700510091() {
        Whitelist whitelist = new Whitelist();
        whitelist.addAttributes(":lt(",":containsData'");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes12003714592() {
        Whitelist whitelist = new Whitelist();
        whitelist.addAttributes("sarcasl","selecu");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes7137166993() {
        Whitelist whitelist = new Whitelist();
        whitelist.addAttributes(":matchTexs","base");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes10973017884() {
        Whitelist whitelist = new Whitelist();
        whitelist.addAttributes("bodx","iframe");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes987276940() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeAttributes("even",":lt)");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes7939268671() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeAttributes("buttoo","captiom");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes13298344562() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeAttributes(":first-of-typf","de");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes18795616273() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeAttributes(":roou","titld");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes15777915674() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeAttributes("selecu","charseu");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute8174745170() {
        Whitelist whitelist = new Whitelist();
        whitelist.addEnforcedAttribute("commane","bs",":containsOwn(");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute3887114981() {
        Whitelist whitelist = new Whitelist();
        whitelist.addEnforcedAttribute("imh","\'",":nth-child)");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute6633295702() {
        Whitelist whitelist = new Whitelist();
        whitelist.addEnforcedAttribute("*=","buttom","selecu");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute11782774643() {
        Whitelist whitelist = new Whitelist();
        whitelist.addEnforcedAttribute("metb",":matchTexs","deflatd");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute20851525434() {
        Whitelist whitelist = new Whitelist();
        whitelist.addEnforcedAttribute("tablf","checkec",":matchTexs");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute19103668130() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeEnforcedAttribute("disabled",":matchText");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute6158624901() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeEnforcedAttribute("DOCTYPF",":first-of-typd");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute21064854402() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeEnforcedAttribute("<0",":last-of-type");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute19334383013() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeEnforcedAttribute("radio","actioo");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute11672236124() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeEnforcedAttribute("textarea",":only-child");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12620() {
        Whitelist whitelist = new Whitelist();
        whitelist.preserveRelativeLinks(true);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12621() {
        Whitelist whitelist = new Whitelist();
        whitelist.preserveRelativeLinks(true);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12622() {
        Whitelist whitelist = new Whitelist();
        whitelist.preserveRelativeLinks(true);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12623() {
        Whitelist whitelist = new Whitelist();
        whitelist.preserveRelativeLinks(true);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12624() {
        Whitelist whitelist = new Whitelist();
        whitelist.preserveRelativeLinks(true);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols17903914690() {
        Whitelist whitelist = new Whitelist();
        whitelist.addProtocols("tbodx","template",":first-of-type");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols4018283571() {
        Whitelist whitelist = new Whitelist();
        whitelist.addProtocols("checked","h0","UTF.");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols9343685322() {
        Whitelist whitelist = new Whitelist();
        whitelist.addProtocols("hidden","form","checked");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols8235338343() {
        Whitelist whitelist = new Whitelist();
        whitelist.addProtocols("textarea","#roou","text0");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols17469773424() {
        Whitelist whitelist = new Whitelist();
        whitelist.addProtocols("imagf","h5","http-equiu");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols19946718290() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeProtocols("basefons","basf","boundarx");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols13584224261() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeProtocols("base","name","frameset");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols11415960022() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeProtocols("*","br","[CDATA[");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols7898977793() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeProtocols("noscript","link","imf");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols14033632394() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeProtocols("DOCTYPD",":last-of-typd",":roos");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain31891140() throws Exception {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.main("gziq");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain11927218621() throws Exception {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.main("noframes");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain32132582() throws Exception {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.main("html");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain10101369393() throws Exception {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.main("optioo");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain29875584() throws Exception {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.main("abs9");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText310() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.getPlainText((Element) null);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText311() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.getPlainText((Element) null);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText312() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.getPlainText((Element) null);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText313() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.getPlainText((Element) null);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText314() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.getPlainText((Element) null);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain20073314730() throws Exception {
        Wikipedia wikipedia = new Wikipedia();
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain19043241901() throws Exception {
        Wikipedia wikipedia = new Wikipedia();
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain11767353262() throws Exception {
        Wikipedia wikipedia = new Wikipedia();
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain18484150723() throws Exception {
        Wikipedia wikipedia = new Wikipedia();
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain8434673154() throws Exception {
        Wikipedia wikipedia = new Wikipedia();
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain13135325000() throws Exception {
        ListLinks listlinks = new ListLinks();
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain3399249481() throws Exception {
        ListLinks listlinks = new ListLinks();
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain5200222782() throws Exception {
        ListLinks listlinks = new ListLinks();
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain5185228533() throws Exception {
        ListLinks listlinks = new ListLinks();
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child("});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain1244071794() throws Exception {
        ListLinks listlinks = new ListLinks();
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType10() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getMimeType();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType11() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getMimeType();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType12() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getMimeType();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType13() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getMimeType();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType14() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getMimeType();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl10() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getUrl();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl11() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getUrl();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl12() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getUrl();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl13() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getUrl();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl14() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getUrl();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode10() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getStatusCode();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode11() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getStatusCode();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode12() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getStatusCode();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode13() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getStatusCode();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode14() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getStatusCode();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl10() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getUrl();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl11() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getUrl();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl12() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getUrl();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl13() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getUrl();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl14() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getUrl();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse310() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse311() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse312() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse313() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse314() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9610() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((NodeVisitor) null,(Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9611() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((NodeVisitor) null,(Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9612() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((NodeVisitor) null,(Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9613() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((NodeVisitor) null,(Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9614() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((NodeVisitor) null,(Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9610() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((NodeVisitor) null,(Elements) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9611() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((NodeVisitor) null,(Elements) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9612() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((NodeVisitor) null,(Elements) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9613() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((NodeVisitor) null,(Elements) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9614() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse((NodeVisitor) null,(Elements) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9610() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter((NodeFilter) null,(Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9611() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter((NodeFilter) null,(Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9612() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter((NodeFilter) null,(Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9613() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter((NodeFilter) null,(Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9614() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter((NodeFilter) null,(Node) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9610() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter((NodeFilter) null,(Elements) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9611() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter((NodeFilter) null,(Elements) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9612() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter((NodeFilter) null,(Elements) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9613() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter((NodeFilter) null,(Elements) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9614() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter((NodeFilter) null,(Elements) null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9610() {
        Collector collector = new Collector();
        collector.collect((Evaluator) null,(Element) null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9611() {
        Collector collector = new Collector();
        collector.collect((Evaluator) null,(Element) null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9612() {
        Collector collector = new Collector();
        collector.collect((Evaluator) null,(Element) null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9613() {
        Collector collector = new Collector();
        collector.collect((Evaluator) null,(Element) null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9614() {
        Collector collector = new Collector();
        collector.collect((Evaluator) null,(Element) null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9610() {
        Collector collector = new Collector();
        collector.findFirst((Evaluator) null,(Element) null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9611() {
        Collector collector = new Collector();
        collector.findFirst((Evaluator) null,(Element) null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9612() {
        Collector collector = new Collector();
        collector.findFirst((Evaluator) null,(Element) null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9613() {
        Collector collector = new Collector();
        collector.findFirst((Evaluator) null,(Element) null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9614() {
        Collector collector = new Collector();
        collector.findFirst((Evaluator) null,(Element) null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr1857353260() {
        Elements elements = new Elements();
        elements.attr("US-ASCIJ");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr18285121() {
        Elements elements = new Elements();
        elements.attr(":eq'");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr1099022() {
        Elements elements = new Elements();
        elements.attr("odd");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr807731723() {
        Elements elements = new Elements();
        elements.attr("optgrouq");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr10101369414() {
        Elements elements = new Elements();
        elements.attr("optiom");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr18285130() {
        Elements elements = new Elements();
        elements.hasAttr(":eq(");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr39991() {
        Elements elements = new Elements();
        elements.hasAttr("~>");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr33042() {
        Elements elements = new Elements();
        elements.hasAttr("h1");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr33868653() {
        Elements elements = new Elements();
        elements.hasAttr("nobs");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr2709408274() {
        Elements elements = new Elements();
        elements.hasAttr("disabled");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr30070() {
        Elements elements = new Elements();
        elements.eachAttr("^>");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr29171() {
        Elements elements = new Elements();
        elements.eachAttr("\"");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr14229508262() {
        Elements elements = new Elements();
        elements.eachAttr("actioo");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr1101158203() {
        Elements elements = new Elements();
        elements.eachAttr("tabld");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr33218824() {
        Elements elements = new Elements();
        elements.eachAttr("linl");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr6194802040() {
        Elements elements = new Elements();
        elements.attr(":containsData'","odd");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr6558260121() {
        Elements elements = new Elements();
        elements.attr("frameseu","style");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr8770518082() {
        Elements elements = new Elements();
        elements.attr("tbodx",":emptz");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr7390781613() {
        Elements elements = new Elements();
        elements.attr("[","charses");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr12930927244() {
        Elements elements = new Elements();
        elements.attr("noframes","template");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr21153115440() {
        Elements elements = new Elements();
        elements.removeAttr("boundarx");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr27763631() {
        Elements elements = new Elements();
        elements.removeAttr("\"\"");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr14562253632() {
        Elements elements = new Elements();
        elements.removeAttr(":matches'");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr10032436883() {
        Elements elements = new Elements();
        elements.removeAttr("textare`");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr358296694() {
        Elements elements = new Elements();
        elements.removeAttr("#roou");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass567593360() {
        Elements elements = new Elements();
        elements.addClass(":has)");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass9503947301() {
        Elements elements = new Elements();
        elements.addClass("command");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass33062() {
        Elements elements = new Elements();
        elements.addClass("h3");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass1188433() {
        Elements elements = new Elements();
        elements.addClass("xmq");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass1099024() {
        Elements elements = new Elements();
        elements.addClass("odd");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass20913044560() {
        Elements elements = new Elements();
        elements.removeClass("isindey");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass987181() {
        Elements elements = new Elements();
        elements.removeClass("cok");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass13942() {
        Elements elements = new Elements();
        elements.removeClass("*=");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass11163() {
        Elements elements = new Elements();
        elements.removeClass("!>");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass1103714464() {
        Elements elements = new Elements();
        elements.removeClass("titld");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass10176250960() {
        Elements elements = new Elements();
        elements.toggleClass(":nth-last-of-type'");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass1221() {
        Elements elements = new Elements();
        elements.toggleClass("[");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass1143082() {
        Elements elements = new Elements();
        elements.toggleClass("svh");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass1650854893() {
        Elements elements = new Elements();
        elements.toggleClass("http-equiu");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass21156131444() {
        Elements elements = new Elements();
        elements.toggleClass("noembee");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass16449536130() {
        Elements elements = new Elements();
        elements.hasClass("frameses");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass39981() {
        Elements elements = new Elements();
        elements.hasClass("~=");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass1102773782() {
        Elements elements = new Elements();
        elements.hasClass("tfoou");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass10761623183() {
        Elements elements = new Elements();
        elements.hasClass(":contains(");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass1103268994() {
        Elements elements = new Elements();
        elements.hasClass("thead");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval10() {
        Elements elements = new Elements();
        elements.val();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval11() {
        Elements elements = new Elements();
        elements.val();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval12() {
        Elements elements = new Elements();
        elements.val();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval13() {
        Elements elements = new Elements();
        elements.val();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval14() {
        Elements elements = new Elements();
        elements.val();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval1143060() {
        Elements elements = new Elements();
        elements.val("svf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval567593361() {
        Elements elements = new Elements();
        elements.val(":has)");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval807731732() {
        Elements elements = new Elements();
        elements.val("optgroup");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval1650854893() {
        Elements elements = new Elements();
        elements.val("http-equiu");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval9076856554() {
        Elements elements = new Elements();
        elements.val("scrips");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext10() {
        Elements elements = new Elements();
        elements.text();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext11() {
        Elements elements = new Elements();
        elements.text();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext12() {
        Elements elements = new Elements();
        elements.text();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext13() {
        Elements elements = new Elements();
        elements.text();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext14() {
        Elements elements = new Elements();
        elements.text();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText10() {
        Elements elements = new Elements();
        elements.hasText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText11() {
        Elements elements = new Elements();
        elements.hasText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText12() {
        Elements elements = new Elements();
        elements.hasText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText13() {
        Elements elements = new Elements();
        elements.hasText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText14() {
        Elements elements = new Elements();
        elements.hasText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText10() {
        Elements elements = new Elements();
        elements.eachText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText11() {
        Elements elements = new Elements();
        elements.eachText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText12() {
        Elements elements = new Elements();
        elements.eachText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText13() {
        Elements elements = new Elements();
        elements.eachText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText14() {
        Elements elements = new Elements();
        elements.eachText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml10() {
        Elements elements = new Elements();
        elements.html();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml11() {
        Elements elements = new Elements();
        elements.html();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml12() {
        Elements elements = new Elements();
        elements.html();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml13() {
        Elements elements = new Elements();
        elements.html();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml14() {
        Elements elements = new Elements();
        elements.html();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml10() {
        Elements elements = new Elements();
        elements.outerHtml();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml11() {
        Elements elements = new Elements();
        elements.outerHtml();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml12() {
        Elements elements = new Elements();
        elements.outerHtml();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml13() {
        Elements elements = new Elements();
        elements.outerHtml();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml14() {
        Elements elements = new Elements();
        elements.outerHtml();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName31255600() {
        Elements elements = new Elements();
        elements.tagName("evem");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName31984621() {
        Elements elements = new Elements();
        elements.tagName("heac");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName358296692() {
        Elements elements = new Elements();
        elements.tagName("#roou");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName7423139253() {
        Elements elements = new Elements();
        elements.tagName("checkec");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName15515509564() {
        Elements elements = new Elements();
        elements.tagName("noscripu");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml37300() {
        Elements elements = new Elements();
        elements.html("tg");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml1605222321() {
        Elements elements = new Elements();
        elements.html("bgsounc");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml10761623182() {
        Elements elements = new Elements();
        elements.html(":contains(");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml33218813() {
        Elements elements = new Elements();
        elements.html("link");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml1003134674() {
        Elements elements = new Elements();
        elements.html("imagf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend18690634820() {
        Elements elements = new Elements();
        elements.prepend("sarcasl");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend10032436881() {
        Elements elements = new Elements();
        elements.prepend("textare`");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend17209582722() {
        Elements elements = new Elements();
        elements.prepend("basefonu");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend15515509563() {
        Elements elements = new Elements();
        elements.prepend("noscripu");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend12174874154() {
        Elements elements = new Elements();
        elements.prepend("hidden");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend32134780() {
        Elements elements = new Elements();
        elements.append("htto");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend358799201() {
        Elements elements = new Elements();
        elements.append("#texu");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend1101158222() {
        Elements elements = new Elements();
        elements.append("tablf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend17571249773() {
        Elements elements = new Elements();
        elements.append(":emptx");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend358296684() {
        Elements elements = new Elements();
        elements.append("#root");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore12080() {
        Elements elements = new Elements();
        elements.before("$=");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore35118001() {
        Elements elements = new Elements();
        elements.before("rubx");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore358799192() {
        Elements elements = new Elements();
        elements.before("#text");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore14229508273() {
        Elements elements = new Elements();
        elements.before("action");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore1650854894() {
        Elements elements = new Elements();
        elements.before("http-equiu");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter20919604280() {
        Elements elements = new Elements();
        elements.after(":only-child");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter7390744121() {
        Elements elements = new Elements();
        elements.after("charseu");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter7390744102() {
        Elements elements = new Elements();
        elements.after("charses");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter21156131443() {
        Elements elements = new Elements();
        elements.after("noembee");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter12074() {
        Elements elements = new Elements();
        elements.after("$<");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap33441670() {
        Elements elements = new Elements();
        elements.wrap("math");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap1101578781() {
        Elements elements = new Elements();
        elements.wrap("tbodz");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap11912143972() {
        Elements elements = new Elements();
        elements.wrap("iframe");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap21156131443() {
        Elements elements = new Elements();
        elements.wrap("noembee");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap18245824() {
        Elements elements = new Elements();
        elements.wrap(":all");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap10() {
        Elements elements = new Elements();
        elements.unwrap();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap11() {
        Elements elements = new Elements();
        elements.unwrap();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap12() {
        Elements elements = new Elements();
        elements.unwrap();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap13() {
        Elements elements = new Elements();
        elements.unwrap();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap14() {
        Elements elements = new Elements();
        elements.unwrap();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty10() {
        Elements elements = new Elements();
        elements.empty();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty11() {
        Elements elements = new Elements();
        elements.empty();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty12() {
        Elements elements = new Elements();
        elements.empty();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty13() {
        Elements elements = new Elements();
        elements.empty();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty14() {
        Elements elements = new Elements();
        elements.empty();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove10() {
        Elements elements = new Elements();
        elements.remove();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove11() {
        Elements elements = new Elements();
        elements.remove();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove12() {
        Elements elements = new Elements();
        elements.remove();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove13() {
        Elements elements = new Elements();
        elements.remove();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove14() {
        Elements elements = new Elements();
        elements.remove();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect32470() {
        Elements elements = new Elements();
        elements.select("dt");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect14229508261() {
        Elements elements = new Elements();
        elements.select("actioo");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect33480042() {
        Elements elements = new Elements();
        elements.select("meta");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect33063() {
        Elements elements = new Elements();
        elements.select("h3");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect17571249794() {
        Elements elements = new Elements();
        elements.select(":emptz");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot33050() {
        Elements elements = new Elements();
        elements.not("h2");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot37281() {
        Elements elements = new Elements();
        elements.not("te");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot996170342() {
        Elements elements = new Elements();
        elements.not("https");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot807731733() {
        Elements elements = new Elements();
        elements.not("optgroup");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot29875584() {
        Elements elements = new Elements();
        elements.not("abs9");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq1340() {
        Elements elements = new Elements();
        elements.eq(103);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq331() {
        Elements elements = new Elements();
        elements.eq(2);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq573732() {
        Elements elements = new Elements();
        elements.eq(57342);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq343() {
        Elements elements = new Elements();
        elements.eq(3);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq553284() {
        Elements elements = new Elements();
        elements.eq(55297);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis35118020() {
        Elements elements = new Elements();
        elements.is("rubz");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis20913044541() {
        Elements elements = new Elements();
        elements.is("isindew");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis19732341992() {
        Elements elements = new Elements();
        elements.is("plaintexu");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis33093() {
        Elements elements = new Elements();
        elements.is("h6");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis30074() {
        Elements elements = new Elements();
        elements.is("^>");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext10() {
        Elements elements = new Elements();
        elements.next();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext11() {
        Elements elements = new Elements();
        elements.next();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext12() {
        Elements elements = new Elements();
        elements.next();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext13() {
        Elements elements = new Elements();
        elements.next();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext14() {
        Elements elements = new Elements();
        elements.next();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext33441660() {
        Elements elements = new Elements();
        elements.next("matg");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext1102773781() {
        Elements elements = new Elements();
        elements.next("tfoou");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext1102773782() {
        Elements elements = new Elements();
        elements.next("tfoou");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext1650854883() {
        Elements elements = new Elements();
        elements.next("http-equiv");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext19374() {
        Elements elements = new Elements();
        elements.next("<.");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll10() {
        Elements elements = new Elements();
        elements.nextAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll11() {
        Elements elements = new Elements();
        elements.nextAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll12() {
        Elements elements = new Elements();
        elements.nextAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll13() {
        Elements elements = new Elements();
        elements.nextAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll14() {
        Elements elements = new Elements();
        elements.nextAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll10548386270() {
        Elements elements = new Elements();
        elements.nextAll(":first-chilc");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll31841() {
        Elements elements = new Elements();
        elements.nextAll("bs");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll18678420532() {
        Elements elements = new Elements();
        elements.nextAll("[a-zA-Z_:][-a-zA-Z0-9_:.])");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll13215465983() {
        Elements elements = new Elements();
        elements.nextAll("templatf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll6361976034() {
        Elements elements = new Elements();
        elements.nextAll("colgrouo");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev10() {
        Elements elements = new Elements();
        elements.prev();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev11() {
        Elements elements = new Elements();
        elements.prev();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev12() {
        Elements elements = new Elements();
        elements.prev();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev13() {
        Elements elements = new Elements();
        elements.prev();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev14() {
        Elements elements = new Elements();
        elements.prev();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev31891130() {
        Elements elements = new Elements();
        elements.prev("gzip");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev1431() {
        Elements elements = new Elements();
        elements.prev("p");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev662() {
        Elements elements = new Elements();
        elements.prev("#");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev18285133() {
        Elements elements = new Elements();
        elements.prev(":eq(");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev33737384() {
        Elements elements = new Elements();
        elements.prev("name");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll10() {
        Elements elements = new Elements();
        elements.prevAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll11() {
        Elements elements = new Elements();
        elements.prevAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll12() {
        Elements elements = new Elements();
        elements.prevAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll13() {
        Elements elements = new Elements();
        elements.prevAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll14() {
        Elements elements = new Elements();
        elements.prevAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll10761623190() {
        Elements elements = new Elements();
        elements.prevAll(":contains)");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll39991() {
        Elements elements = new Elements();
        elements.prevAll("~>");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll1101158222() {
        Elements elements = new Elements();
        elements.prevAll("tablf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll14562253613() {
        Elements elements = new Elements();
        elements.prevAll(":matches)");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll20913044544() {
        Elements elements = new Elements();
        elements.prevAll("isindew");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents10() {
        Elements elements = new Elements();
        elements.parents();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents11() {
        Elements elements = new Elements();
        elements.parents();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents12() {
        Elements elements = new Elements();
        elements.parents();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents13() {
        Elements elements = new Elements();
        elements.parents();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents14() {
        Elements elements = new Elements();
        elements.parents();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst10() {
        Elements elements = new Elements();
        elements.first();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst11() {
        Elements elements = new Elements();
        elements.first();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst12() {
        Elements elements = new Elements();
        elements.first();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst13() {
        Elements elements = new Elements();
        elements.first();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst14() {
        Elements elements = new Elements();
        elements.first();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast10() {
        Elements elements = new Elements();
        elements.last();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast11() {
        Elements elements = new Elements();
        elements.last();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast12() {
        Elements elements = new Elements();
        elements.last();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast13() {
        Elements elements = new Elements();
        elements.last();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast14() {
        Elements elements = new Elements();
        elements.last();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse310() {
        Elements elements = new Elements();
        elements.traverse((NodeVisitor) null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse311() {
        Elements elements = new Elements();
        elements.traverse((NodeVisitor) null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse312() {
        Elements elements = new Elements();
        elements.traverse((NodeVisitor) null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse313() {
        Elements elements = new Elements();
        elements.traverse((NodeVisitor) null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse314() {
        Elements elements = new Elements();
        elements.traverse((NodeVisitor) null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter310() {
        Elements elements = new Elements();
        elements.filter((NodeFilter) null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter311() {
        Elements elements = new Elements();
        elements.filter((NodeFilter) null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter312() {
        Elements elements = new Elements();
        elements.filter((NodeFilter) null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter313() {
        Elements elements = new Elements();
        elements.filter((NodeFilter) null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter314() {
        Elements elements = new Elements();
        elements.filter((NodeFilter) null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms10() {
        Elements elements = new Elements();
        elements.forms();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms11() {
        Elements elements = new Elements();
        elements.forms();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms12() {
        Elements elements = new Elements();
        elements.forms();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms13() {
        Elements elements = new Elements();
        elements.forms();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms14() {
        Elements elements = new Elements();
        elements.forms();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse1143070() {
        QueryParser queryparser = new QueryParser();
        queryparser.parse("svg");
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse21011357991() {
        QueryParser queryparser = new QueryParser();
        queryparser.parse(":matchText");
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse11927218622() {
        QueryParser queryparser = new QueryParser();
        queryparser.parse("noframes");
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse29875593() {
        QueryParser queryparser = new QueryParser();
        queryparser.parse("abs:");
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse20353119934() {
        QueryParser queryparser = new QueryParser();
        queryparser.parse(":first-of-typf");
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect931860() {
        Selector selector = new Selector();
        selector.select("^=",(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect1239381() {
        Selector selector = new Selector();
        selector.select("~=",(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect8226828012() {
        Selector selector = new Selector();
        selector.select("http-equiw",(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect17527108493() {
        Selector selector = new Selector();
        selector.select("colgrouq",(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect17909989024() {
        Selector selector = new Selector();
        selector.select("optgrouo",(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9610() {
        Selector selector = new Selector();
        selector.select((Evaluator) null,(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9611() {
        Selector selector = new Selector();
        selector.select((Evaluator) null,(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9612() {
        Selector selector = new Selector();
        selector.select((Evaluator) null,(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9613() {
        Selector selector = new Selector();
        selector.select((Evaluator) null,(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9614() {
        Selector selector = new Selector();
        selector.select((Evaluator) null,(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect21063931250() {
        Selector selector = new Selector();
        selector.select("sarcasm",(Iterable<Element>) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9987064791() {
        Selector selector = new Selector();
        selector.select(":contains)",(Iterable<Element>) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect18100988802() {
        Selector selector = new Selector();
        selector.select("basefonu",(Iterable<Element>) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect968923603() {
        Selector selector = new Selector();
        selector.select("evem",(Iterable<Element>) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect17909989644() {
        Selector selector = new Selector();
        selector.select("optgrouq",(Iterable<Element>) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst4059286340() {
        Selector selector = new Selector();
        selector.selectFirst("isindew",(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst1155061() {
        Selector selector = new Selector();
        selector.selectFirst("tc",(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst600472() {
        Selector selector = new Selector();
        selector.selectFirst("<.",(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst17270593263() {
        Selector selector = new Selector();
        selector.selectFirst("iframd",(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst456324() {
        Selector selector = new Selector();
        selector.selectFirst("-.",(Element) null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
}