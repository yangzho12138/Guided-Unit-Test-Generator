package org.jsoup.mytests;
import edu.illinois.cs.test.generator.TestGenerator;
import org.jsoup.parser.helper.Validate;
import org.junit.Test;
import static org.junit.Assert.*;
import org.jsoup.nodes.*;
import org.jsoup.select.*;
import org.jsoup.examples.*;
import org.jsoup.parser.*;
import org.jsoup.helper.*;
import org.jsoup.internal.*;
import org.jsoup.safety.*;
import org.jsoup.*;
import org.jsoup.Connection.Method;
import java.io.InputStream;
import java.net.Proxy;
import java.nio.charset.Charset;
import java.util.regex.Pattern;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import java.nio.ByteBuffer;
import java.util.*;
import org.jsoup.nodes.Document.OutputSettings;
import org.jsoup.nodes.Document.QuirksMode;

import javax.net.ssl.SSLSocketFactory;

public class AutomatedTest {
    @Test
    public void testAttributesget1102563210() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("text/");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget14581() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("*}");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget14572() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("*|");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget18305283() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get(":gt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget35118004() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("rubx");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase35756400() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase("typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase12174874161() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase("hiddem");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase30072() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase("^>");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase1650854883() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase("http-equiv");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase19788929344() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase(":containsOwn(");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd19682153300() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("[a-zA-Z_:][-a-zA-Z0-9_:.]*","imagd");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd35741631() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("$=","spao");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd7224297872() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("http-equiv","deflate");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd8147838423() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("keygeo","odd");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd13603786794() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add(":empty","linl");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput1038804730() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("metb","]]>");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput18912022731() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("^",":nth-of-type'");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput806826232() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("\'","optgrouo");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput6028049143() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("frameseu",":has'");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput11628716994() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("noembed","namd");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput996191110() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("httq",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput16468717551() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put(":matchesOwn(",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput11838643142() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("input",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput3465992963() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put(":nth-child'",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput12426082744() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("http:0",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput310() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) TestGenerator.getObjectFromPool("Attribute"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput311() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) TestGenerator.getObjectFromPool("Attribute"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput312() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) TestGenerator.getObjectFromPool("Attribute"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput313() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) TestGenerator.getObjectFromPool("Attribute"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput314() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) TestGenerator.getObjectFromPool("Attribute"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove569515650() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove(":not'");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove33681() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("hq");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove358799192() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("#text");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove1003581203() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("inpus");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove31255624() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("eveo");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase18245820() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase(":all");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase1003581211() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("input");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase33092() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("h6");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase14713() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("--");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase1101158214() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("table");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey16183955610() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey(":only-of-typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey32132581() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey("html");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey21065455192() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey(":last-of-typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey807731743() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey("optgrouo");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey37274() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey("td");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase26152040() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("UTF,");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase9503947291() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("commanc");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase19392() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("<0");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase35118013() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("ruby");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase996170344() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("https");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize10() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize11() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize12() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize13() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize14() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty10() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty11() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty12() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty13() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty14() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll310() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) TestGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll311() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) TestGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll312() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) TestGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll313() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) TestGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll314() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) TestGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList10() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList11() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList12() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList13() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList14() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset10() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset11() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset12() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset13() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset14() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml10() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml11() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml12() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml13() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml14() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize10() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize11() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize12() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize13() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize14() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate310() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate311() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate312() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate313() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate314() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName33680() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("hq");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName358799201() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("#texu");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName18245812() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName(":alk");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName33868643() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("nobr");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName31255624() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("eveo");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr20819751320() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("disablec",":nth-of-type)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr1037735651() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("math","imh");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr1001058712() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("eveo","httq");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr64470923() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("cok","nobs");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr16564190804() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr(":first-chilc","linl");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr16468717550() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr(":matchesOwn(",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr10407191941() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("plaintexs",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr988637032() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("gzio",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr976210683() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("form",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr1168614() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("tg",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild11142420() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(1114211);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild681() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(-99);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild2712() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(240);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild343() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(3);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild324() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(1);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect1099030() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("ode");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect31891141() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("gziq");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect18912061152() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select(":nth-of-type)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect17480897443() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("DOCTYPD");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect12174874164() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("hiddem");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst1102563200() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("text.");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst1101158211() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("table");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst20353119912() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst(":first-of-typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst10548386283() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst(":first-child");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst15368918734() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("checkbow");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis15368918740() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("checkbox");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis31984621() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("heac");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis33737392() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("namf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis7390744103() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("charses");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis18245814() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is(":alk");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis310() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) TestGenerator.getObjectFromPool("Evaluator"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis311() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) TestGenerator.getObjectFromPool("Evaluator"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis312() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) TestGenerator.getObjectFromPool("Evaluator"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis313() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) TestGenerator.getObjectFromPool("Evaluator"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis314() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) TestGenerator.getObjectFromPool("Evaluator"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild310() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild311() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild312() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild313() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild314() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo310() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo311() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo312() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo313() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo314() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild310() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild311() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild312() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild313() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild314() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren69130() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(192,(Collection<? extends Node>) TestGenerator.getObjectFromPool("Collection<? extends Node>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren10541() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(3,(Collection<? extends Node>) TestGenerator.getObjectFromPool("Collection<? extends Node>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren17785942() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(57343,(Collection<? extends Node>) TestGenerator.getObjectFromPool("Collection<? extends Node>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren345415023() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(1114211,(Collection<? extends Node>) TestGenerator.getObjectFromPool("Collection<? extends Node>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren9614() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(0,(Collection<? extends Node>) TestGenerator.getObjectFromPool("Collection<? extends Node>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren17785940() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(57343,(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren41541() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(103,(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren68822() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(191,(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren9613() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(0,(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren133614() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(400,(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement18690634820() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("sarcasl");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement1099021() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("odd");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement31984642() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("heae");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement37323() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("ti");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement30294414() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("body");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement21011358000() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement(":matchTexu");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement11346655531() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("keygem");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement15515509542() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("noscrips");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement1102563223() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("text0");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement18912061164() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement(":nth-of-type(");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText987200() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("com");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText567593341() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText(":has'");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText35367452() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("span");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText33053() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("h2");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText734() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("*");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText33441680() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("mati");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText10552537231() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText(":matchesOwn)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText662() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("#");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText18285143() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText(":eq)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText2709408284() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("disablee");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend10032436880() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("textare`");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend1099031() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("ode");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend1082706172() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("radin");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend11346655533() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("keygem");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend1650854894() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("http-equiu");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend1044190() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("imh");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend987201() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("com");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend1102773782() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("tfoou");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend9060216053() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("select");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend18305284() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend(":gt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag32132580() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag("html");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag33071() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag("h4");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag20353119922() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag(":first-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag30294423() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag("bodz");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag10101369404() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag("option");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById29875580() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("abs9");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById31984621() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("heac");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById10552537232() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById(":matchesOwn)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById1102773783() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("tfoou");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById19788929334() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById(":containsOwn)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass21156131420() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("noembec");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass35118021() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("rubz");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass33441672() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("math");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass14713() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("--");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass569515654() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass(":not'");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute16449536130() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("frameses");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute30051() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("^<");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute32482() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("du");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute10552537233() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute(":matchesOwn)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute33218814() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("link");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting12174874160() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("hiddem");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting2882752491() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting(":nth-child)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting19788929342() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting(":containsOwn(");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting37323() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("ti");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting11144() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("!<");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue587238360() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue(":lt)",":eq(");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue11122804961() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("#texu","^>");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue995446252() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("href","!<");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue5614963603() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("colgrouo","iframf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue6570629774() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("deflatf","hreg");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot11107234380() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("#roou","tg");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot15053635981() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot(":nth-of-type(","hree");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot15516589582() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("lj","noscrips");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot11271062413() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("input",":has(");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot36577924() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("svg","svf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting3288033990() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("tablf","captioo");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting7951767341() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("typf","select");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting36781282() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("h4","typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting995436543() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("href","p");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting8786004824() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("tablf","\"\"");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding4077532480() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("isindey",":alm");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding1668393881() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding(":all","tfoot");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding18953482() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("<.",":lt'");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding20694883943() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("actiom","scrips");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding36869544() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("xml","^>");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining12027157440() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("hiddeo","boundary");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining17725770451() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining(":roou","nobr");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining19402442() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("ti",":alm");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining8226827723() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("http-equiu","[");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining5973150534() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("isindex","textarea");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching996178490() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("http",(Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching8800731401() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("tbodx",(Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching987042() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("bs",(Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching16597409313() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching(":first-chilc",(Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching27904() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching(";",(Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching9059136020() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("lj","selecs");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching10438669891() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("plaintext","forl");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching13181396362() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("ode","templatf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching19660352893() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching(":first-of-typf","colgrouq");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching17596581664() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching(":has'","xmq");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan2220() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(191);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan691() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(-100);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan322() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(1);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan4323() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(401);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan11141434() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(1114112);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan1320() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(101);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan1341() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(103);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan2182() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(187);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan1343() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(103);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan694() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(-100);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals2180() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(187);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals2701() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(239);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals342() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(3);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals2223() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(191);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals2304() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(199);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText12080() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("$=");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText14562253611() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText(":matches)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText1099022() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("odd");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText16183955593() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText(":only-of-typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText13776877264() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("buttoo");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText30164310() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("basd");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText17209582721() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("basefonu");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText30062() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("^=");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText32132573() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("htmk");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText30164324() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("base");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText310() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText311() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText312() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText313() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText314() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText20919604280() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText(":only-child");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText20353119931() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText(":first-of-typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText13942() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("*=");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText19732341983() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("plaintext");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText11912143964() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("iframf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText310() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText311() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText312() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText313() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText314() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText1143060() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("svf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText10176250981() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText(":nth-last-of-type)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText1432() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("p");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText6361976033() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("colgrouo");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText14562253634() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText(":matches'");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext570706520() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text(":roou");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext9503947311() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("commane");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext14229508282() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("actiom");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext32110823() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("href");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext1188414() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("xmo");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames35756420() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames("typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames567593361() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames(":has)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames21156131432() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames("noembed");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames1188383() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames("xml");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames1082706194() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames("radip");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass13940() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("*=");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass33868631() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("nobq");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass7390744102() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("charses");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass11414281683() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("[CDATA[");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass18285124() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass(":eq'");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass807731740() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("optgrouo");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass807731731() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("optgroup");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass13215466002() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("templatd");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass10176250983() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass(":nth-last-of-type)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass358296684() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("#root");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass1857353280() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("US-ASCIH");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass19381() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("</");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass13942() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("*=");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass17571249783() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass(":empty");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass20353119924() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass(":first-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass1099010() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("odc");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass26152061() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("UTF.");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass1605222312() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("bgsound");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass15451126503() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("deflate");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass12174874164() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("hiddem");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval18245810() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val(":alk");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval567593341() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val(":has'");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval12092() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("$>");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval14703() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("-,");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval29174() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("\"");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml10() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml11() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml12() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml13() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml14() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml35367450() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("span");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml33218811() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("link");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml358799202() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("#texu");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml16449536123() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("frameset");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml33218804() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("linj");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell30294410() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("body");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell570706511() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell(":root");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell1102773782() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("tfoou");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell30164333() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("basf");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell32132574() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("htmk");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation10() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation11() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation12() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation13() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation14() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead10() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead11() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead12() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead13() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead14() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody10() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody11() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody12() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody13() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody14() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle10() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle11() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle12() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle13() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle14() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle358296690() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("#roou");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle13215465991() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("template");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle2709408282() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("disablee");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle32132583() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("html");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle18285144() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title(":eq)");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement19804204660() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement("Set-Cookie");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement771() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement(".");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement10761623182() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement(":contains(");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement34843() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement("li");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement35118014() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement("ruby");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise10() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise11() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise12() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise13() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise14() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset310() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) TestGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset311() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) TestGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset312() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) TestGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset313() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) TestGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset314() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) TestGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset10() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset11() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset12() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset13() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset14() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement12620() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement12621() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement12622() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement12623() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement12624() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement10() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement11() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement12() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement13() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement14() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings10() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings11() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings12() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings13() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings14() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings310() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) TestGenerator.getObjectFromPool("OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings311() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) TestGenerator.getObjectFromPool("OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings312() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) TestGenerator.getObjectFromPool("OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings313() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) TestGenerator.getObjectFromPool("OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings314() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) TestGenerator.getObjectFromPool("OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode10() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode11() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode12() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode13() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode14() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode310() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) TestGenerator.getObjectFromPool("QuirksMode"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode311() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) TestGenerator.getObjectFromPool("QuirksMode"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode312() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) TestGenerator.getObjectFromPool("QuirksMode"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode313() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) TestGenerator.getObjectFromPool("QuirksMode"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode314() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) TestGenerator.getObjectFromPool("QuirksMode"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser10() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser11() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser12() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser13() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser14() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser310() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser311() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser312() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser313() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser314() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity15451126490() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("deflatd");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity33031() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("h0");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity27763632() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("\"\"");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity7423139253() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("checkec");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity987184() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("cok");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity15368918730() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("checkbow");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity11346655531() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("keygem");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity20919604272() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity(":only-chile");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity33737383() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("name");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity7423139264() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("checked");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName33441660() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("matg");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName12071() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("$<");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName17571249772() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName(":emptx");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName33703() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("hs");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName18690634834() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("sarcasm");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName21156131420() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("noembec");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName31255611() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("even");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName19788929352() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName(":containsOwn'");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName15451126513() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("deflatf");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName5525734454() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("caption");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName20157655440() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("caption",new int[]{0,-1});
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName19144172041() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("th",new int[]{0,-1,55296,192});
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName3350439092() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("http-equiv",new int[]{0,-1,55296,192,1,55297});
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName17086158193() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("*{",new int[]{0,-1,55296,192,1,55297,2,3,4,199,400,1114112,401});
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName2823676354() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName(":lt)",new int[]{0,-1,55296,192,1,55297,2,3,4,199,400});
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape810713550() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("UTF-",(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape1159401() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("tq",(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape1907689552() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("disabled",(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape1036691463() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("matg",(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape11838655144() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("inpuu",(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape9060216060() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("selecs");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape11141() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("!<");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape19732341982() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("plaintext");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape35756403() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape1101158214() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("table");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape7423139260() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("checked");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape19804204661() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("Set-Cookie");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape26152052() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("UTF-");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape5525734453() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("caption");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape13776877274() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("button");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName10() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName11() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName12() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName13() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName14() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData10() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData11() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData12() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData13() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData14() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData21156131440() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("noembee");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData1003581211() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("input");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData987182() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("cok");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData1103268983() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("theac");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData17480897444() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("DOCTYPD");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded4089580750() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("isindex","body");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded6889820231() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("captioo","charseu");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded21077642752() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("\"\"",":matchText");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded16185194353() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("~<",":only-of-typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded9654647494() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("boundarz","noembec");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName10() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName11() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName12() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName13() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName14() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData10() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData11() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData12() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData13() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData14() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration10() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration11() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration12() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration13() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration14() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration10() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration11() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration12() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration13() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration14() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName10() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName11() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName12() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName13() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName14() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname10() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname11() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname12() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname13() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname14() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration10() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration11() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration12() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration13() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration14() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements10() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements11() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements12() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements13() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements14() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement310() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement311() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement312() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement313() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement314() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit10() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit11() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit12() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit13() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit14() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData10() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData11() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData12() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData13() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData14() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey1101158210() {
        DocumentType documenttype = (DocumentType) TestGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("table");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey1103268981() {
        DocumentType documenttype = (DocumentType) TestGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("theac");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey1188412() {
        DocumentType documenttype = (DocumentType) TestGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("xmo");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey30063() {
        DocumentType documenttype = (DocumentType) TestGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("^=");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey10032436884() {
        DocumentType documenttype = (DocumentType) TestGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("textare`");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey10() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey11() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey12() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey13() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey14() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey11912143980() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("iframd");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey9060216051() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("select");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey15515509562() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("noscripu");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey33093() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("h6");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey37404() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("tq");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue10() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue11() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue12() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue13() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue14() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue14562253610() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue(":matches)");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue941() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("?");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue1432() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("p");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue13776877283() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("buttom");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue11927218624() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("noframes");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml10() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml11() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml12() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml13() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml14() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded16597371580() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded(":first-chile","ts");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded32916001() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("h4","gziq");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded19266346372() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("scripu","xmm");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded18598528213() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded(":has(","imagf");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded10100768934() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("</","option");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName10() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName11() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName12() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName13() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName14() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext10() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext11() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext12() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext13() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext14() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext730() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("*");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext1188421() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("xmp");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext21156131432() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("noembed");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext15368918733() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("checkbow");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext15451126514() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("deflatf");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText10() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText11() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText12() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText13() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText14() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank10() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank11() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank12() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank13() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank14() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText300() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(-1);
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText1331() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(102);
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText682() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(-99);
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText5313() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(500);
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText1344() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(103);
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded8813749680() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("tabld","<0");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded4332265421() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("charset","textare`");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded11222109432() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("name",":nth-last-of-type'");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded37828213() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("xmq","col");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded7971557754() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("rubz","selecs");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded19804204650() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("Set-Cookif");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded16449536111() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("frameseu");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded358296682() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("#root");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded1101578773() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("tbody");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded12174874154() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("hidden");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException10() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) TestGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        TestGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException11() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) TestGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        TestGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException12() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) TestGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        TestGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException13() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) TestGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        TestGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException14() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) TestGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        TestGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin11927227920() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) TestGenerator.getObjectFromPool("Collection"),"noframes");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin31900441() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) TestGenerator.getObjectFromPool("Collection"),"gziq");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin12174864862() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) TestGenerator.getObjectFromPool("Collection"),"hiddem");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin1053473() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) TestGenerator.getObjectFromPool("Collection"),"imf");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin1108314() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) TestGenerator.getObjectFromPool("Collection"),"odc");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin24000() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) TestGenerator.getObjectFromPool("Iterator"),"-,");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin31993921() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) TestGenerator.getObjectFromPool("Iterator"),"heac");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin6361966712() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) TestGenerator.getObjectFromPool("Iterator"),"colgrouq");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin7390753423() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) TestGenerator.getObjectFromPool("Iterator"),"charseu");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin3081280954() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) TestGenerator.getObjectFromPool("Iterator"),":last-chile");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin4284591300() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam"},"spam");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin10954029571() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^="},":matchTexu");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin11240503022() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn"},"noframet");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin7369873173() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,"},"imagd");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin2639260054() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto"},"bgsoune");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding2180() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(187);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding2551() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(224);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding573732() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(57342);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding333() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(2);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding553284() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(55297);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank5525734450() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("caption");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank1003134651() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("imagd");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank18285142() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank(":eq)");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank1102773773() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("tfoot");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank33868634() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("nobq");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric5525734460() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("captioo");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric11912143961() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("iframf");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric662() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("#");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric12083() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("$=");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric18305274() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric(":gt'");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace1340() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(103);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace2221() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(191);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace1332() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(102);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace333() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(2);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace304() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(-1);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace300() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(-1);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace1311() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(100);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace1312() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(100);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace693() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(-100);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace344() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(3);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar2700() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(239);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar1311() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(100);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar1322() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(101);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar353() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(4);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar11141434() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(1114112);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace5525734450() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("caption");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace17480897431() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("DOCTYPE");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace19382() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("</");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace1102563203() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("text.");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace18353324() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace(":lt'");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace10443037550() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace("th","plaintext",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace6569128321() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace(":containsData)",":emptz",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace5704835092() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace("abs:","noscrips",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace6302958943() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace("image","colgroup",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace4877564274() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace("]]?","checkbow",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin1114636470() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("span",":alm");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin20651419631() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("[a-zA-Z_:][-a-zA-Z0-9_:.])","nobq");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin17627284972() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in(":has)","gzio");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin3499849613() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in(":nth-child)","nobs");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin12459288304() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("http:.","linj");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted4167714550() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("https",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf"});
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted11152920261() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("\"",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com"});
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted3439500662() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("^<",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd"});
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted1026195123() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted(".",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root","US-ASCIH","http:/","http:.","US-ASCIJ","noembec","US-ASCII","http:0","noscrips","noscript","noscripu","optioo","optiom","option","boundary","boundarz"});
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted5079129934() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("keygen",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb"});
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve13776867970() throws Exception {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) TestGenerator.getObjectFromPool("URL"),"button");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve10851() throws Exception {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) TestGenerator.getObjectFromPool("URL"),"|");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve9076847252() throws Exception {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) TestGenerator.getObjectFromPool("URL"),"scrips");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve13776867963() throws Exception {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) TestGenerator.getObjectFromPool("URL"),"buttoo");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve12174864864() throws Exception {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) TestGenerator.getObjectFromPool("URL"),"hiddem");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve21064999480() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("--",":last-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve11584808271() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("action","link");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve8534430802() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("noscripu","th");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve12198956343() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("inpuu",":nth-of-type'");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve16734250514() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("titld","DOCTYPD");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder10() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder11() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder12() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder13() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder14() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder570706520() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder(":roou");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder32132591() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder("htmm");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder29875602() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder("abs;");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder1433() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder("p");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder1188434() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder("xmq");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase20913044550() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("isindex");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase12068418911() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("http:0");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase32462() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("ds");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase1223() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("[");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase29174() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("\"");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize33700() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("hs");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize13931() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("*<");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize16183955602() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize(":only-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize20353119933() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize(":first-of-typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize1003134654() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("imagd");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap871640() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) TestGenerator.getObjectFromPool("InputStream"),1,57342);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap421221() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) TestGenerator.getObjectFromPool("InputStream"),401,-100);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap356892() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) TestGenerator.getObjectFromPool("InputStream"),187,101);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap17473073() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) TestGenerator.getObjectFromPool("InputStream"),55396,240);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap266944() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) TestGenerator.getObjectFromPool("InputStream"),-100,3);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer2230() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(192);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer1341() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(103);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer553282() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(55297);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer4323() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(401);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer1314() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(100);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout10600() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(-1,-100);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout9921() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(1,0);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout41612() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(100,100);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout9923() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(1,-1);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout9934() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(1,1);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse11626235240() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("noembed","eveo");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse1073611() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("hs","\'");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse11749127252() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("frameset","basefons");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse20327160133() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":matchTexu","noscrips");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse12067487074() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("^>","http:.");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse15249166920() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("title","US-ASCIJ",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse990324761() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("--","forl",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse21037971672() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":eq'",":nth-child(",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse1529145843() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("frameses","href",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse10104986454() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":only-chile","bgsound",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse730() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("*");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse27763631() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("\"\"");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse37422() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("ts");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse570706523() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":roou");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse1097804324() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("style");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect13930() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("*<");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect11912143981() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("iframd");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect10552537212() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect(":matchesOwn'");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect35367453() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("span");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect11414281684() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("[CDATA[");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse17209250400() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"p","basefonu");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse1138900711() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"typd","base");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse7392076502() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"hr","charseu");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse16442727883() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"metb","DOCTYPF");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse18066963434() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"basefonu","name");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse7390753420() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"charseu");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse31993931() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"head");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse31900442() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"gziq");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse1605213013() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"bgsound");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse11912134674() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"iframe");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse15057180600() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),":nth-of-type'","spam");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse10549130581() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"-.",":first-chilc");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse12226552972() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"gzip","template");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse7299044443() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"noframer","command");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse636010094() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"eveo","bgsoune");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse5293423460() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"body","noscripu",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse11053960841() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"svh",":containsOwn'",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse10987642() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"?","th",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse18460198443() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"actioo","disabled",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse17675096094() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),":lt'","]]=",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment21288213840() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("basf",":first-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment378111() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("!<","h5");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment1103752922() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("^","titlf");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment14394866943() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("charseu","basf");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment16377767464() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment(":nth-last-child'","<.");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment9060216060() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("selecs");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment1003134671() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("imagf");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment29875592() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("abs:");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment1044193() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("imh");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment19788929354() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment(":containsOwn'");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse8610() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) TestGenerator.getObjectFromPool("URL"),-100);
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse13611() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) TestGenerator.getObjectFromPool("URL"),400);
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse12012() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) TestGenerator.getObjectFromPool("URL"),240);
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse9613() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) TestGenerator.getObjectFromPool("URL"),0);
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse582044() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) TestGenerator.getObjectFromPool("URL"),57243);
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean37570140() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(".","xml",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean20631827771() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(":last-of-typd","commanc",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean12067207602() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("httq","^>",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean20206457043() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(":containsData(","!=",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean14376291964() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("$<","charses",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean566839340() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(":eq)",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean19817283911() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("template",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean11122774892() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("#text",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean905823() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("\'",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean935093614() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("basd",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean10528022270() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("h1",":containsOwn(",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean11545228921() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("textare`","svg",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean7000052632() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("metb","action",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean4786720133() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(":emptx","#roos",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean12900256044() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("deflatf","tc",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid8734524080() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("titlf",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid17909989331() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("optgroup",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid986422() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("bq",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid11501483623() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("boundarz",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid1001304() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("dc",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput13585977680() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput(":matchesOwn(",":nth-child)");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput19803217941() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("bs","Set-Cookid");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput20918442122() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("templatf","table");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput11641195543() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("rubz",":matchesOwn)");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput14284187044() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput(":contains(","[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput32141870() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) TestGenerator.getObjectFromPool("Reader"),"htmk");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput42341() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) TestGenerator.getObjectFromPool("Reader"),"h1");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput23862() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) TestGenerator.getObjectFromPool("Reader"),"*{");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput570715813() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) TestGenerator.getObjectFromPool("Reader"),":root");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput11346646224() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) TestGenerator.getObjectFromPool("Reader"),"keygen");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput8552654860() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("typd",(Element) TestGenerator.getObjectFromPool("Element"),"ruby");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput887512411() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("]]?",(Element) TestGenerator.getObjectFromPool("Element"),"\'");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput4381915622() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("frameset",(Element) TestGenerator.getObjectFromPool("Element"),"US-ASCII");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput4896714763() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput(":matchesOwn)",(Element) TestGenerator.getObjectFromPool("Element"),"evem");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput5799813724() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("actioo",(Element) TestGenerator.getObjectFromPool("Element"),":contains'");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder10() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        TreeBuilder result = parser.getTreeBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder11() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        TreeBuilder result = parser.getTreeBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder12() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        TreeBuilder result = parser.getTreeBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder13() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        TreeBuilder result = parser.getTreeBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder14() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        TreeBuilder result = parser.getTreeBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder310() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTreeBuilder((TreeBuilder) TestGenerator.getObjectFromPool("TreeBuilder"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder311() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTreeBuilder((TreeBuilder) TestGenerator.getObjectFromPool("TreeBuilder"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder312() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTreeBuilder((TreeBuilder) TestGenerator.getObjectFromPool("TreeBuilder"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder313() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTreeBuilder((TreeBuilder) TestGenerator.getObjectFromPool("TreeBuilder"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder314() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTreeBuilder((TreeBuilder) TestGenerator.getObjectFromPool("TreeBuilder"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors10() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors11() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors12() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors13() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors14() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors554270() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(55396);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors2231() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(192);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors1332() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(102);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors2303() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(199);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors573734() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(57342);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors10() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors11() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors12() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors13() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors14() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings310() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings311() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings312() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings313() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings314() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings10() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings11() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings12() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings13() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings14() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse16184387110() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("*<",":only-of-typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse18756563601() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse(":not'","tbodx");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse35024632() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("tg","nobr");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse10794797153() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse(":contains(","optgrouo");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse1114695914() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("span",":gt'");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment4053806040() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("checkboy",(Element) TestGenerator.getObjectFromPool("Element"),"tfoos");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment1305004971() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("http:0",(Element) TestGenerator.getObjectFromPool("Element"),"nobs");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment11642272() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("$=",(Element) TestGenerator.getObjectFromPool("Element"),"hs");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment568227293() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("#",(Element) TestGenerator.getObjectFromPool("Element"),":has'");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment11916026184() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("selecu",(Element) TestGenerator.getObjectFromPool("Element"),"^<");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment12083047720() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("thead",(Element) TestGenerator.getObjectFromPool("Element"),"spam",(ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment20374824201() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("typf",(Element) TestGenerator.getObjectFromPool("Element"),"imagd",(ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment12370032662() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("html",(Element) TestGenerator.getObjectFromPool("Element"),"th",(ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment11779026773() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("http-equiu",(Element) TestGenerator.getObjectFromPool("Element"),":nth-of-type'",(ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment14294792804() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("boundarx",(Element) TestGenerator.getObjectFromPool("Element"),":alm",(ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment17718053240() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment(":roos","UTF-");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment995468201() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment("href","h6");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment21227921122() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment(":alm","noembec");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment8795522943() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment("table",":all");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment8752525904() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment(":last-of-typf","forn");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment1068181410() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("matg","forl");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment972568061() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("body","matg");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment32585842() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("*{","http");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment12462606213() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("option","htto");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment666095594() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("bodz","bgsoune");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities8813755830() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("tablf",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities9987053101() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities(":contains'",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities8800718782() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("tbody",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities17595406473() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities(":has)",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities464294() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("*}",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed17687118030() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed(":not)","htmk");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed15479754691() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("]]?","deflate");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed8783978912() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed(":last-of-typf","td");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed15369875753() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("checkee","]]>");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed8200676904() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("http-equiu","UTF,");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser10() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser11() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser12() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser13() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser14() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser10() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser11() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser12() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser13() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser14() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName10() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName11() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName12() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName13() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName14() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName10() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName11() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName12() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName13() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName14() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf1029783110() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("link",(ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf567463991() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf(":gt)",(ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf8748333962() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("theae",(ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf18100989423() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("basefons",(ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf20685287644() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("[a-zA-Z_:][-a-zA-Z0-9_:.]*",(ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf1003134660() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("image");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf987181() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("cok");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf16183955612() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf(":only-of-typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf21153115443() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("boundarx");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf39984() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("~=");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock10() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock11() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock12() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock13() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock14() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock10() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock11() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock12() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock13() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock14() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock10() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock11() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock12() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock13() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock14() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline10() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline11() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline12() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline13() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline14() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData10() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData11() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData12() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData13() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData14() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty10() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty11() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty12() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty13() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty14() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing10() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing11() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing12() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing13() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing14() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag10() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag11() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag12() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag13() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag14() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag10176250980() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag(":nth-last-of-type)");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag34851() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("lj");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag30294402() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("bodx");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag16449536123() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("frameset");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag33694() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("hr");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace10() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace11() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace12() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace13() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace14() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed10() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed11() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed12() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed13() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed14() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable10() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable11() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable12() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable13() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable14() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage10() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage11() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage12() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage13() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage14() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition10() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition11() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition12() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition13() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition14() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking10() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking11() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking12() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking13() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking14() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking2300() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(199);
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking1311() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(100);
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking11142422() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(1114211);
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking303() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(-1);
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking11142424() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(1114211);
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos10() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos11() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos12() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos13() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos14() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty10() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty11() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty12() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty13() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty14() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent10() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent11() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent12() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent13() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent14() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance10() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance11() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance12() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance13() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance14() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo920() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('=');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo741() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('+');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo1572() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('~');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo743() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('+');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo1344() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('g');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny1290() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('b');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny1231() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('\\');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny1332() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('f');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny703() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny("'");
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny1534() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('z');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload5460778320() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) TestGenerator.getObjectFromPool("File"),"frameses","li");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload1096679711() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) TestGenerator.getObjectFromPool("File"),"span",".");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload1090587652() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) TestGenerator.getObjectFromPool("File"),"imagd",":contains'");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload2448940533() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) TestGenerator.getObjectFromPool("File"),"buttoo","rubx");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload927354474() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) TestGenerator.getObjectFromPool("File"),"abs9","]]?");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload7391378050() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"!>","charses");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload12199244041() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"inpus",":nth-of-type)");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload12784817362() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"http-equiu",":matchTexu");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload997654563() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"htto","xmm");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload21164121464() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"UTF-",":first-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload17257203780() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),":first-of-typd","~=",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload23936341() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"*|","du",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload14977692622() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"commanc","$=",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload71897063() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"hq","col",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload11052163934() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"captiom",":nth-last-child'",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer8620() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) TestGenerator.getObjectFromPool("InputStream"),-99);
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer12001() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) TestGenerator.getObjectFromPool("InputStream"),239);
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer11852() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) TestGenerator.getObjectFromPool("InputStream"),224);
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer14613() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) TestGenerator.getObjectFromPool("InputStream"),500);
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer9644() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) TestGenerator.getObjectFromPool("InputStream"),3);
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull310() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull311() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull312() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull313() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull314() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull41770() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"),"dt");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull18294441() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"),":eq)");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull10582() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"),"a");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull41133() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"),"br");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull33450964() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"),"matg");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12620() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12621() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12622() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12623() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12624() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue31646530() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"eveo");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue11414672591() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"[CDATA[");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue1003972122() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"input");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue34259563() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"nobs");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue392194() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"a");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12620() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12621() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12622() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12623() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12624() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse1378090() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"cok");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse11911753051() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"iframf");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse1103164692() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"tfoou");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse18744233() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,":lt'");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse428324() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"tr");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements310() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements311() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements312() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements313() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements314() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements11912134680() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"),"iframd");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements23861() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"),"*{");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements17571259092() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"),":emptz");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements11414290983() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"),"[CDATA[");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements18690644134() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"),"sarcasm");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty14562253620() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty(":matches(");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty1003134671() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("imagf");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty358799202() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("#texu");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty37403() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("tq");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty2882752474() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty(":nth-child'");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty2413565430() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("buttom","bq");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty17288898861() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("iframf",":gt)");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty1014355182() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("htmk",":all");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty14610032583() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("US-ASCIJ",":alm");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty7663948934() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("httpr","plaintexs");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail15515509550() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("noscript");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail2709408261() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("disablec");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail37312() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("th");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail1605222313() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("bgsound");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail12269463014() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail(":containsData'");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect35367440() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect("spam");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect18305291() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect(":gt)");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect32482() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect("du");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect10176250963() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect(":nth-last-of-type'");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect13954() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect("*>");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect310() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect311() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect312() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect313() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect314() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl310() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl311() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl312() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl313() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl314() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl11346655510() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("keygeo");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl1097804321() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("style");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl1188432() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("xmq");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl13776877283() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("buttom");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl32314() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("dd");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy310() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) TestGenerator.getObjectFromPool("Proxy"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy311() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) TestGenerator.getObjectFromPool("Proxy"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy312() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) TestGenerator.getObjectFromPool("Proxy"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy313() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) TestGenerator.getObjectFromPool("Proxy"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy314() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) TestGenerator.getObjectFromPool("Proxy"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy10245349410() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("[CDATA[",101);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy568952961() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy(":lt'",4);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy11107196812() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("#roos",4);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy8813768423() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("table",3);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy1161324() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("tq",192);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent1102563220() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("text0");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent31891141() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("gziq");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent33868652() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("nobs");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent10032436883() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("textare`");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent20913044554() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("isindex");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout5310() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(500);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout4321() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(401);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout11141432() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(1114112);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout2303() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(199);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout4314() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(400);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize320() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(1);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize2181() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(187);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize2182() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(187);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize353() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(4);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize1324() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(101);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12620() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12621() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12622() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12623() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12624() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer2709408280() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("disablee");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer34851() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("lj");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer996170352() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("httpt");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer923() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("=");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer1188424() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("xmp");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod310() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) TestGenerator.getObjectFromPool("Method"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod311() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) TestGenerator.getObjectFromPool("Method"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod312() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) TestGenerator.getObjectFromPool("Method"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod313() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) TestGenerator.getObjectFromPool("Method"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod314() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) TestGenerator.getObjectFromPool("Method"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12620() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12621() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12622() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12623() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12624() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12620() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12621() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12622() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12623() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12624() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata15680814760() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("eveo",":nth-last-child(");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata21238245261() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data(":containsOwn'","script");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata33893342() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("*}","math");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata17302704093() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("iframe","hreg");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata377474() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("!>","bq");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory310() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) TestGenerator.getObjectFromPool("SSLSocketFactory"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory311() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) TestGenerator.getObjectFromPool("SSLSocketFactory"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory312() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) TestGenerator.getObjectFromPool("SSLSocketFactory"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory313() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) TestGenerator.getObjectFromPool("SSLSocketFactory"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory314() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) TestGenerator.getObjectFromPool("SSLSocketFactory"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata14108355730() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("[a-zA-Z_:][-a-zA-Z0-9_:.])","#roou",(InputStream) TestGenerator.getObjectFromPool("InputStream"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata8749559081() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("--","tfoou",(InputStream) TestGenerator.getObjectFromPool("InputStream"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata8549925372() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("frameses","commane",(InputStream) TestGenerator.getObjectFromPool("InputStream"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata12129426363() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("disabled","isindew",(InputStream) TestGenerator.getObjectFromPool("InputStream"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata7971098614() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("optgrouo","#root",(InputStream) TestGenerator.getObjectFromPool("InputStream"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata37320() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("ti");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata11346655521() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("keygen");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata31255622() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("eveo");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata20353119913() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data(":first-of-typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata30164334() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("basf");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata9076856550() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("scrips");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata20919604281() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data(":only-child");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata18305292() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data(":gt)");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata2709408273() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("disabled");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata569515654() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data(":not'");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata310() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) TestGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata311() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) TestGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata312() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) TestGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata313() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) TestGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata314() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) TestGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata567593350() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data(":has(");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata33868631() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("nobq");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata31984632() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("head");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata19788929333() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data(":containsOwn)");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata34834() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("lh");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody33480040() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody("meta");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody567593361() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody(":has)");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody1044182() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody("img");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody10761623183() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody(":contains(");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody7423139264() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody("checked");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader12644286670() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("radin",":only-chilc");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader7467972391() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("noframer","[a-zA-Z_:][-a-zA-Z0-9_:.])");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader13268213182() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header(":first-of-typd","base");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader10339527283() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("textarea",":gt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader7677709174() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header(":matchTexs",":roos");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders14562253630() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers(":matches'");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders14562253631() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers(":matches'");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders1857353272() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers("US-ASCII");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders16183955593() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers(":only-of-typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders39984() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers("~=");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie11489355970() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie("#roou",":first-of-typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie8450251021() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie("colgrouo","script");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie16345653952() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie(":nth-last-child(","htmk");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie3582214473() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie("caption",":last-chilc");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie5526108944() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie("$>","captioo");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies9060216050() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies("select");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies37421() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies("ts");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies12068418912() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies("http:0");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies1605222313() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies("bgsound");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies10176250964() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies(":nth-last-of-type'");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser310() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser311() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser312() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser313() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser314() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget10() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget11() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget12() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget13() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget14() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost10() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost11() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost12() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost13() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost14() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute10() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute11() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute12() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute13() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute14() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest10() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest11() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest12() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest13() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest14() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest310() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) TestGenerator.getObjectFromPool("Connection.Request"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest311() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) TestGenerator.getObjectFromPool("Connection.Request"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest312() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) TestGenerator.getObjectFromPool("Connection.Request"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest313() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) TestGenerator.getObjectFromPool("Connection.Request"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest314() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) TestGenerator.getObjectFromPool("Connection.Request"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse10() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse11() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse12() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse13() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse14() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse310() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) TestGenerator.getObjectFromPool("Connection.Response"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse311() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) TestGenerator.getObjectFromPool("Connection.Response"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse312() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) TestGenerator.getObjectFromPool("Connection.Response"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse313() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) TestGenerator.getObjectFromPool("Connection.Response"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse314() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) TestGenerator.getObjectFromPool("Connection.Response"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset1103268990() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("thead");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset18912061161() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset(":nth-of-type(");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset20353119932() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset(":first-of-typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset33868643() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("nobr");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset11912143974() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("iframe");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup310() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = w3cdom.fromJsoup((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup311() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = w3cdom.fromJsoup((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup312() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = w3cdom.fromJsoup((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup313() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = w3cdom.fromJsoup((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup314() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = w3cdom.fromJsoup((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9610() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(Document) TestGenerator.getObjectFromPool("Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9611() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(Document) TestGenerator.getObjectFromPool("Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9612() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(Document) TestGenerator.getObjectFromPool("Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9613() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(Document) TestGenerator.getObjectFromPool("Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9614() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(Document) TestGenerator.getObjectFromPool("Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString310() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString311() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString312() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString313() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString314() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst1010() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('F');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst771() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('.');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst1292() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('b');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst1233() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('\\');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst774() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('.');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst17571249790() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst(":emptz");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst9503947311() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("commane");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst996170352() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("httpt");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst30294403() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("bodx");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst567593364() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst(":has)");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches570706520() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches(":roou");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches37271() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("td");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches358799182() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("#texs");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches31823() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("bq");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches33480044() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("meta");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS11927218610() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("noframer");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS32481() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("du");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS33218802() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("linj");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS33063() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("h3");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS21156131424() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("noembec");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny15368918750() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("checkboy");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny29875591() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("abs:");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny33682() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("hq");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny18353343() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny(":lt)");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny21011357994() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny(":matchText");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny1210() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('Z');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny1321() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('e');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny772() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('.');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny773() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('.');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny774() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('.');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp35756400() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp1044181() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("img");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp16449536132() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("frameses");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp1857353263() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("US-ASCIJ");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp32110824() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("href");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume1220() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume("[");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume358296671() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume("#roos");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume10548386282() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume(":first-child");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume10761623183() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume(":contains(");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume20919604294() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume(":only-chilc");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo358799180() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("#texs");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo14711890861() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo(":nth-last-child)");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo35756422() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo1253() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("^");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo21153115444() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("boundarx");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase10032436880() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("textare`");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase20353119911() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase(":first-of-typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase12269463012() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase(":containsData'");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase29173() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("\"");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase30294424() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("bodz");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny567593350() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny(":has(");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny11346655511() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("keygeo");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny358296672() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("#roos");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny33218813() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("link");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny1003134674() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("imagf");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo18305290() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo(":gt)");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo1650854881() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo("http-equiv");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo30294402() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo("bodx");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo2709408273() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo("disabled");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo35756414() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo("type");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase1102563200() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("text.");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase12071() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("$<");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase987192() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("col");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase18245823() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase(":all");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase10101369394() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("optioo");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced32310() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('G','E');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced39131() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced(']','E');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced48842() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('}','0');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced40653() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('a','a');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced40924() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('b',']');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape569515650() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape(":not'");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape1003581211() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape("input");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape7423139272() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape("checkee");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape14711890863() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape(":nth-last-child)");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape35367464() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape("spao");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder10() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder11() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder12() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder13() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder14() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase10() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase11() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase12() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase13() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase14() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase10() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase11() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase12() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase13() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase14() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag7423139250() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("checkec");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag15368918741() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("checkbox");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag11346655532() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("keygem");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag14573() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("*|");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag33737374() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("namd");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute1103269000() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("theae");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute1103268981() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("theac");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute19732341972() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("plaintexs");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute9060216063() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("selecs");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute1102773784() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("tfoou");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean310() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean311() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean312() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean313() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean314() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid310() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid311() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid312() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid313() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid314() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml923490() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("]]>");
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml29221() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("\'");
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml19788929342() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml(":containsOwn(");
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml35118023() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("rubz");
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml14562253624() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml(":matches(");
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone10() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone11() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone12() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone13() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone14() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText10() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText11() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText12() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText13() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText14() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic10() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic11() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic12() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic13() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic14() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages10() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages11() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages12() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages13() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages14() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed10() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed11() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed12() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed13() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed14() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags32300() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("dc");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags16449536111() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("frameseu");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags32312() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("dd");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags31490273() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("form");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags1857353284() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("US-ASCIH");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags39970() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("~<");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags7390744111() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("charset");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags33868642() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("nobr");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags17571249773() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags(":emptx");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags31984634() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("head");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes55124300() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("xmk",":eq)");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes17628835211() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes(":has(","math");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes6558260132() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("frameseu","stylf");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes7125356013() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes(":matchTexs",":lt)");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes1061038714() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("linl","evem");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes17641728740() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes("mati","[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes568988081() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes(":lt)","lj");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes9620651532() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes(":last-child","=");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes1000413563() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes("evem","form");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes14805892834() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes(":has)",":first-child");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute3259167780() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("imf",":only-child","h2");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute21267711251() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("href",":last-chilc","abs;");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute12142404872() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("*<",":last-of-typd","isindex");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute11950740213() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("selecs","\"","nobr");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute9077748124() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("noscrips","typf","tabld");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute20389960950() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute("xmq",":first-of-typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute19185729961() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute(":contains'","buttom");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute15022668552() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute(":nth-of-type)","svg");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute3159865133() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute(":only-chilc","tfoot");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute8766993724() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute("tbodz","namd");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12620() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12621() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12622() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12623() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12624() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols2552183610() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("optgroup",":all",":eq)");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols10437829181() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols(":nth-last-of-type(","h4","disablee");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols3780896612() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("[a-zA-Z_:][-a-zA-Z0-9_:.])","bgsounc","base");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols3613116043() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("httpr","tablf","$>");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols11019322514() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("xmm",":containsOwn'","h0");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols17272189440() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("(","iframe","]]=");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols13354196261() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("hiddeo","imagf","lh");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols12696311272() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("styld","boundarx","*{");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols1690326903() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("buttom","optioo",":last-of-typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols5196655754() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("rubz","charset","linj");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain15368918730() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("checkbow");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain807731731() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("optgroup");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain33737382() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("name");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain21065455173() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main(":last-of-typf");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain9503947294() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("commanc");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText310() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText311() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText312() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText313() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText314() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain3639881600() throws Exception {
        Wikipedia wikipedia = (Wikipedia) TestGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain19979632221() throws Exception {
        Wikipedia wikipedia = (Wikipedia) TestGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain5349062792() throws Exception {
        Wikipedia wikipedia = (Wikipedia) TestGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain18266997153() throws Exception {
        Wikipedia wikipedia = (Wikipedia) TestGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain17691933964() throws Exception {
        Wikipedia wikipedia = (Wikipedia) TestGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain7694292260() throws Exception {
        ListLinks listlinks = (ListLinks) TestGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain5807188121() throws Exception {
        ListLinks listlinks = (ListLinks) TestGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain11966959222() throws Exception {
        ListLinks listlinks = (ListLinks) TestGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain8671481223() throws Exception {
        ListLinks listlinks = (ListLinks) TestGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type("});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain20518531704() throws Exception {
        ListLinks listlinks = (ListLinks) TestGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType10() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType11() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType12() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType13() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType14() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl10() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl11() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl12() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl13() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl14() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode10() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode11() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode12() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode13() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode14() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl10() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl11() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl12() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl13() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl14() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse310() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse311() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse312() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse313() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse314() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9610() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9611() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9612() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9613() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9614() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9610() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9611() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9612() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9613() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9614() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9610() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9611() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9612() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9613() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9614() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9610() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9611() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9612() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9613() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9614() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9610() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9611() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9612() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9613() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9614() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9610() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9611() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9612() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9613() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9614() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr31984640() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("heae");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr14581() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("*}");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr11346655512() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("keygeo");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr1103268983() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("theac");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr714() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("(");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr31984630() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("head");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr16183955591() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr(":only-of-typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr16183955602() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr(":only-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr33441663() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("matg");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr31824() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("bq");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr35118010() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("ruby");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr18305271() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr(":gt'");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr1143082() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("svh");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr10176250973() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr(":nth-last-of-type(");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr31891124() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("gzio");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr5997845370() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr("optgrouq","iframf");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr8148937021() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr("keygen","*");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr969846792() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr("evem","]]?");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr8841666183() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr(":matches)","hiddem");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr924419614() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr(":alm","#text");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr17480897440() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("DOCTYPD");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr1103269001() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("theae");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr987192() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("col");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr6361976013() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("colgrouq");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr10176250984() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr(":nth-last-of-type)");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass807731720() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("optgrouq");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass32311() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("dd");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass11414281682() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("[CDATA[");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass16183955593() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass(":only-of-typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass33694() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("hr");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass20913044550() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("isindex");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass13931() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("*<");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass1103268992() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("thead");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass21153115433() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("boundary");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass26152054() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("UTF-");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass10552537230() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass(":matchesOwn)");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass14711() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("--");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass1103268992() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("thead");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass20919604273() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass(":only-chile");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass567593344() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass(":has'");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass32480() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("du");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass32471() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("dt");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass18305282() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass(":gt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass11927218633() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("noframet");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass12074() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("$<");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval11150() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("!=");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval15451126491() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("deflatd");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval33441682() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("mati");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval807731743() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("optgrouo");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval33868644() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("nobr");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName10548386290() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName(":first-chile");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName12068418931() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("http:.");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName1044182() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("img");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName29875583() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("abs9");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName7390744104() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("charses");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml10101369400() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("option");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml18678420521() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("[a-zA-Z_:][-a-zA-Z0-9_:.]*");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml11927218632() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("noframet");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml33441683() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("mati");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml1103268984() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("theac");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend1101158200() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend("tabld");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend2882752481() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend(":nth-child(");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend30164332() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend("basf");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend32134783() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend("htto");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend35118024() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend("rubz");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend10761623180() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append(":contains(");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend7423139271() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("checkee");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend567593362() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append(":has)");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend32132573() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("htmk");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend10032436864() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("textareb");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore35118020() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("rubz");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore1101578771() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("tbody");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore10101369402() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("option");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore18245813() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before(":alk");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore7390744124() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("charseu");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter996170330() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("httpr");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter29875581() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("abs9");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter31255612() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("even");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter1188373() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("xmk");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter12068418934() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("http:.");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap30294410() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("body");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap569515661() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap(":not(");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap19788929342() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap(":containsOwn(");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap903() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap(";");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap14574() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("*|");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect19804204670() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("Set-Cookid");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect1102563211() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("text/");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect18305272() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select(":gt'");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect10761623173() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select(":contains'");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect12269463004() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select(":containsData(");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot1099030() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("ode");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot33480051() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("metb");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot10032436882() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("textare`");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot18305293() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not(":gt)");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot7423139264() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("checked");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq690() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(-100);
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq4321() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(401);
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq2182() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(187);
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq4323() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(401);
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq1344() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(103);
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis1003581200() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is("inpus");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis1857353281() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is("US-ASCIH");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis19788929332() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is(":containsOwn)");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis20353119923() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is(":first-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis18245824() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is(":all");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext358799200() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("#texu");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext807731731() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("optgroup");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext570706512() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next(":root");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext17480897423() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("DOCTYPF");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext1101578764() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("tbodx");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll7390744120() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("charseu");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll1082706181() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("radio");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll20353119932() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll(":first-of-typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll18353333() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll(":lt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll9060216044() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("selecu");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev10101369390() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("optioo");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev20913044551() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("isindex");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev1650854892() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("http-equiu");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev11912143973() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("iframe");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev5525734444() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("captiom");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll19804204650() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll("Set-Cookif");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll2709408281() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll("disablee");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll11346655532() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll("keygem");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll16183955603() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll(":only-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll10552537214() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll(":matchesOwn'");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse310() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse311() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse312() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse313() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse314() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter310() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter311() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter312() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter313() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter314() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms10() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms11() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms12() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms13() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms14() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse16449536130() {
        QueryParser queryparser = (QueryParser) TestGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("frameses");
        TestGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse1003581211() {
        QueryParser queryparser = (QueryParser) TestGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("input");
        TestGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse33441662() {
        QueryParser queryparser = (QueryParser) TestGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("matg");
        TestGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse807731743() {
        QueryParser queryparser = (QueryParser) TestGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("optgrouo");
        TestGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse10552537224() {
        QueryParser queryparser = (QueryParser) TestGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse(":matchesOwn(");
        TestGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect2413534230() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("button",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect8763686401() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("tfoos",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect810713242() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("UTF,",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect1045859093() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("namf",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect16377785904() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select(":nth-last-child)",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9610() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9611() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9612() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9613() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9614() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect18100989420() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("basefons",(Iterable<Element>) TestGenerator.getObjectFromPool("Iterable<Element>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect931861() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("^=",(Iterable<Element>) TestGenerator.getObjectFromPool("Iterable<Element>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect13298376572() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select(":first-of-typf",(Iterable<Element>) TestGenerator.getObjectFromPool("Iterable<Element>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect17595393543() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select(":has'",(Iterable<Element>) TestGenerator.getObjectFromPool("Iterable<Element>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect6025344424() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("command",(Iterable<Element>) TestGenerator.getObjectFromPool("Iterable<Element>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst8770213450() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("text/",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst600471() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("<.",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst8770213762() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("text.",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst1024863() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("h3",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst8770213764() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("text.",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
}