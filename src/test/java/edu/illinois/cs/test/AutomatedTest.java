package org.jsoup.mytests;
import edu.illinois.cs.test.generator.TestGenerator;
import edu.illinois.cs.test.generator.PoolGenerator;
import edu.illinois.cs.test.generator.PoolInit;
import org.junit.Test;
import static org.junit.Assert.*;
import org.jsoup.nodes.*;
import org.jsoup.select.*;
import org.jsoup.examples.*;
import org.jsoup.parser.*;
import org.jsoup.parser.helper.*;
import org.jsoup.internal.*;
import org.jsoup.safety.*;
import org.jsoup.*;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.regex.Pattern;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import java.nio.ByteBuffer;
import java.util.*;
import org.jsoup.nodes.Document.OutputSettings;
import org.jsoup.nodes.Document.QuirksMode;
import org.jsoup.Connection.Method;
import org.jsoup.parser.helper.Validate;
import javax.net.ssl.SSLSocketFactory;

import java.net.Proxy;
import org.jsoup.select.NodeFilter.FilterResult;

public class AutomatedTest {
    PoolInit pool = new PoolInit("src/main/java/org/jsoup/");
    PoolGenerator pg = new PoolGenerator("src/main/java/org/jsoup/");

    @Test
    public void testAttributesget45973496() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("stylf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget21982268() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("tq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget55624368() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("sarcasl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget23439372() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("theac");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget3935773() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("commanc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase16570835() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase(":first-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase42329808() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase("#text");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase91882889() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase(":nth-last-child)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase78732560() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase("com");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase58976162() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase("charses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd80704707() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("radio","inpus");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd43471868() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("textare`",":matches(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd73808708() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add(":eq)",":roou");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd52937683() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("basefonu","bq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd80218537() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("tablf","^");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput61066012() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put(":matchText",":last-of-typf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput75124701() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("#roos","tfoot");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput15172160() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put(":nth-child(",":containsData'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput23649957() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("</","http:0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput40118944() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("httq","button");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput53900968() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("br",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput44262208() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("sarcasm",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput49098237() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("typd",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput24662762() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("metb",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput94086004() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("DOCTYPD",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput68165206() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) PoolGenerator.getObjectFromPool("Attribute"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput72797065() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) PoolGenerator.getObjectFromPool("Attribute"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput41117034() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) PoolGenerator.getObjectFromPool("Attribute"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput98118682() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) PoolGenerator.getObjectFromPool("Attribute"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput5362259() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) PoolGenerator.getObjectFromPool("Attribute"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove38518510() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("tfoos");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove79157457() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove(":nth-child'");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove40171580() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("dc");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove45706231() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("gzip");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove16531377() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("https");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase19987528() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("hr");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase22663412() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase(":only-chile");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase61607314() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("httq");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase59431300() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("frameset");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase23041950() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("noembed");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey29806914() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey(":nth-child'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey37750096() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey("htmm");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey70424964() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey(":eq(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey20104433() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey("deflatf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey86014970() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey(":matchesOwn(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase10401817() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase(":last-chile");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase86968938() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("tbodx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase76485388() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase(":containsOwn)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase84821507() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("noembee");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase50396762() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("noembee");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize56722573() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize72816217() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize1716872() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize55157672() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize70968108() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty10184081() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty91723611() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty35288958() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty38867020() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty56655502() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll10016510() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) PoolGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll81490832() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) PoolGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll30743499() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) PoolGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll55884437() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) PoolGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll17087149() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) PoolGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList89848236() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList79682599() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList68857927() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList64353542() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList49242633() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset18721330() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset32007033() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset12727053() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset40451278() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset60203272() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml40851074() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml58312983() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml33402179() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml45465971() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml66046969() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize66451729() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize29212712() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize72175609() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize27039161() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize11484018() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate82345861() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate97187754() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate15565669() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate56693029() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate82217193() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName99923834() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName76803291() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName23437032() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName86115149() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName7182988() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName41351915() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName78618956() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName12196291() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName65693516() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName43542551() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName40145886() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("keygen");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName75284068() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("\'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName10385679() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("rubz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName9973522() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName(":matchesOwn'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName66457170() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("noscrips");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag8438087() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag53822003() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag99160073() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag21101582() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag39627016() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock14356534() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock60427111() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock37394270() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock4295634() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock32473491() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid33859080() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid94502297() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid21277906() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid24514205() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid77623641() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr26743097() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr(":emptz",":lt(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr28838343() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("abs:","^<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr61669508() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("$=",":alk");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr13595445() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr(":containsOwn)","base");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr94774494() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr(":nth-last-of-type)",":contains)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr22087036() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("http",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr13150756() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("text/",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr45649935() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("bgsound",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr77960641() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("plaintexs",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr21164153() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("h3",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset88214234() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset72586975() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset27673099() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset88023401() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset50490304() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents13777799() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents19244228() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents70573071() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents56034917() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents52022419() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild50624850() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(187);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild91156551() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(4);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild99580663() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(192);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild52664542() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(191);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild50220086() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(400);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren66007827() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren94803331() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren53361615() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren35404409() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren47429948() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes54828853() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes51306934() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes41808325() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes72802183() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes68257552() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes16604132() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes94231553() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes7489864() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes89581267() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes89184952() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect6934344() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select(":only-child");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect91192023() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select(":nth-last-of-type(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect65541804() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("http:/");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect55503751() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("script");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect68769883() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("sarcasn");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst58630880() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("$<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst12106100() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("imagd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst40244131() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("isindey");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst65024674() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("sarcasl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst200020() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("linl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis36532512() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("disablec");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis163887() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is(":lt)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis99030924() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("xmq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis68872088() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("~=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis11367106() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("Set-Cookie");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis21173830() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis43288492() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis20435104() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis97474821() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis70914380() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild63902121() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild47153027() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild57286610() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild43007236() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild77953310() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo57446225() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo9542936() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo21352629() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo1522029() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo10155139() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild39534114() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild75580399() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild35740950() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild17414435() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild13350618() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren22021810() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(57342,(Collection<? extends Node>) PoolGenerator.getObjectFromPool("Collection<? extends Node>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren72370913() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(1114112,(Collection<? extends Node>) PoolGenerator.getObjectFromPool("Collection<? extends Node>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren63927897() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(1,(Collection<? extends Node>) PoolGenerator.getObjectFromPool("Collection<? extends Node>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren58852939() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(400,(Collection<? extends Node>) PoolGenerator.getObjectFromPool("Collection<? extends Node>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren70948063() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(239,(Collection<? extends Node>) PoolGenerator.getObjectFromPool("Collection<? extends Node>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren22618060() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(3,(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren69039634() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(401,(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren32765944() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(224,(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren82341962() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(2,(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren30387389() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(57343,(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement53784456() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("tq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement41479844() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("keygem");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement26759911() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement26942418() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("script");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement91006966() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("http:.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement43476583() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("disablee");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement74427777() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("isindew");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement12444383() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("<.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement79159137() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("titld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement64198253() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("imagd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText11251650() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("*|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText92999036() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("*{");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText82714386() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("Set-Cookif");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText67278727() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("textareb");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText23062594() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("[a-zA-Z_:][-a-zA-Z0-9_:.])");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText22273042() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText(".");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText12006390() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("disablec");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText81829674() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("scrips");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText36646951() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("<0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText74630986() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("cok");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend84850247() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("inpus");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend81815175() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("styld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend70413284() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("abs9");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend49873156() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("command");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend82873722() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append(":nth-last-child(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend8892574() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend(":only-of-typf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend45313397() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("heae");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend12791713() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("imagf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend64766391() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("meta");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend20499326() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend(":containsOwn)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty38319057() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty38589722() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty12727701() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty22489199() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty67476796() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector28644629() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector98218847() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector7215714() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector51138389() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector29827275() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements91207143() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements19802857() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements14335662() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements51550572() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements94656275() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling53646993() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling86685303() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling18928108() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling83425065() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling84282494() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings14062043() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings7957073() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings68687387() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings90420173() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings56788247() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling2321507() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling22136383() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling11740155() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling57075283() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling90757631() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings43608088() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings71012792() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings40732554() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings65074074() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings92064980() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling52833345() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling45855523() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling3243708() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling33452274() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling50294298() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex61060320() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex34286420() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex46582828() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex20815124() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex66549643() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling73509404() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling57796672() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling83054315() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling60856990() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling27091192() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag95642225() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag(":nth-last-of-type(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag94821278() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag("buttoo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag65072350() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag("[a-zA-Z_:][-a-zA-Z0-9_:.]*");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag80106202() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag("Set-Cookif");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag43579781() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag("checked");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById37073895() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("buttom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById33441107() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("US-ASCIJ");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById75949776() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById(":first-child");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById16744471() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("spam");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById66860933() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass31592073() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass(":first-child");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass94301571() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("plaintexu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass37569569() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("ti");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass24850698() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("#roos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass75452257() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("keygem");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute74050732() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute(":containsData(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute92402197() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute(":matchesOwn)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute17265444() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("iframd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute97902958() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("actiom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute98007200() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("bgsound");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting82026189() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("nobs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting14921392() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("thead");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting66118554() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("\"\"");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting95250974() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting(":emptz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting30984588() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("td");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue50497091() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("de","gziq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue30562913() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("img","-.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue50054068() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("hr","noembec");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue58283482() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue(":nth-last-child)",":matchTexu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue42045019() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("h1","UTF.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot23642753() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("templatf","hiddeo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot25962153() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot(":nth-last-of-type)",":only-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot68382918() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("lj","linj");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot97600615() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("h1","UTF-");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot81969030() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("nobq","tfoot");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting59886015() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("inpuu","tq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting11382636() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("command","^>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting9940053() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting(":nth-child'",":has(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting33027108() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("rubz","^>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting64293444() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("sarcasl","UTF.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding37684244() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("basefont",":containsOwn)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding6292338() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding(":matchesOwn(","radip");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding16900950() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding(":alm","Set-Cookie");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding20604321() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("charset","hiddeo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding89795875() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding(":all",":not'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining19706105() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("#roou","noembed");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining64796060() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining(":last-chile",".");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining50015988() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("textareb","linl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining17526738() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("htto","plaintext");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining47112592() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("noscripu","typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching97629674() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("link",(Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching14603562() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("command",(Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching43656230() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching(":matchesOwn'",(Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching45850909() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("htmk",(Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching77238817() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("htto",(Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching61659006() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching(":has(","optiom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching2416770() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching(":nth-of-type(","*|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching80712242() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("bgsoune","button");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching99769131() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("com","]]?");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching16651147() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("h5","[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan52897465() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(1114112);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan65279936() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(55296);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan44144073() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(3);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan74382448() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(199);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan14139403() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(187);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan78827713() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(191);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan81906558() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(224);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan77246484() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(2);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan56632486() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(-1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan60265320() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(199);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals23474700() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(240);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals13727483() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(4);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals21124228() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(239);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals16586589() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(192);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals76885023() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(3);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText12706020() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("*=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText86307659() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("textare`");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText54700882() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("]]=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText59060860() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("<0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText91115447() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("Set-Cookie");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText55466522() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText(":only-chilc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText26188711() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("radio");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText90652946() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("^<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText95399422() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("]]>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText1572872() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("colgrouq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText69058758() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText64405910() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText14051583() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText41050575() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText10789291() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText55652527() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("lj");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText90044673() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("UTF,");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText9722863() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("~>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText95720336() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("math");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText48677226() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("select");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText43417485() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText63151765() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText42851938() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText81037272() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText55256517() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText49606257() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("UTF-");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText37199411() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("html");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText37885439() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("$>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText40924791() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("radio");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText55666488() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("boundarz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements43922581() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements36701558() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements20581159() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements85246505() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements92609313() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext86190991() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext55638692() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext41833802() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext82415064() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext6505704() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText45442449() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText26511117() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText40197948() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText67066741() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText56694321() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText29731794() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText12604959() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText35040586() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText84033138() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText28156178() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext27960316() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("Set-Cookif");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext56911178() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("inpuu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext52524508() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("xmp");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext34803142() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text(":not)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext63349302() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("com");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText95471661() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText16416647() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText16526015() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText81538818() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText48184042() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata66565148() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata61293231() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata28483977() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata66123185() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata26329777() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName77050983() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName3535472() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName25200626() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName24540685() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName61437456() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames28667536() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames40714521() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames93930027() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames2600370() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames52931570() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames53140862() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) PoolGenerator.getObjectFromPool("Set<String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames73802770() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) PoolGenerator.getObjectFromPool("Set<String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames73151572() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) PoolGenerator.getObjectFromPool("Set<String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames71713912() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) PoolGenerator.getObjectFromPool("Set<String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames91716875() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) PoolGenerator.getObjectFromPool("Set<String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass88120693() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("ode");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass25152669() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass(":matches'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass26511163() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass(":matchesOwn'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass25331290() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("!<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass21403827() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("dt");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass19622246() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("basefonu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass6725025() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("du");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass17347862() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("DOCTYPD");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass43206963() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("commane");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass7527756() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("charset");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass99969747() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("hs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass61844514() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass(":only-of-typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass83061311() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass(";");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass91873758() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("!=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass90116252() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("hq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass10274804() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("eveo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass69071211() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("h3");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass80220924() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("mati");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass88086935() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("linl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass12929412() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("~<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval68751930() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval41055072() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval79194086() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval51970221() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval36363893() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval86823780() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val(":lt'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval54429956() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("dc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval34611481() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("isindew");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval76954623() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("isindew");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval66426277() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("radio");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml28519780() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml93833078() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml69168169() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml93744244() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml53106989() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml61312106() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("*<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml66562549() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html(":containsOwn(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml689259() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("th");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml77726016() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("#text");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml77225636() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html(":first-chile");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell60895822() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("met`");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell99247988() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("lh");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell75378993() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("boundarz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell88905096() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("$<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell81978507() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell(":all");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation90191931() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation17404971() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation17419894() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation51845717() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation38038970() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead61366679() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead25552238() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead62259479() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead89780413() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead94155310() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody20649934() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody67845619() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody16798542() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody81773585() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody83825470() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle18527981() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle40322506() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle64863656() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle17209522() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle30956060() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle76528960() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("optiom");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle71205444() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("namd");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle80893864() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("abs9");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle17554755() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("colgrouq");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle84056541() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title(":last-chile");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement17472069() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement("captioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement78780950() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement("xml");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement24410561() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement("nobs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement57436685() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement(":nth-of-type(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement50066727() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement(":not'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise63027015() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise60812686() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise38126623() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise49739390() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise35757087() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset47105163() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) PoolGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset50674139() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) PoolGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset48671265() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) PoolGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset41498962() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) PoolGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset20000702() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) PoolGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset3910620() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset25785118() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset32554891() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset24766021() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset22284735() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement88150014() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement19555606() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement57944869() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement62976397() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement95550008() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement30576889() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement673804() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement32644209() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement98115494() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement4917762() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings36522358() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings27400042() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings31229227() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings88382514() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings71073838() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings73442557() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) PoolGenerator.getObjectFromPool("OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings24389029() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) PoolGenerator.getObjectFromPool("OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings88495490() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) PoolGenerator.getObjectFromPool("OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings36256944() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) PoolGenerator.getObjectFromPool("OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings47572602() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) PoolGenerator.getObjectFromPool("OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode79030388() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode10163375() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode2438425() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode62670687() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode72927758() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode45839478() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) PoolGenerator.getObjectFromPool("QuirksMode"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode32355127() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) PoolGenerator.getObjectFromPool("QuirksMode"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode94651614() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) PoolGenerator.getObjectFromPool("QuirksMode"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode26112103() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) PoolGenerator.getObjectFromPool("QuirksMode"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode32323460() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) PoolGenerator.getObjectFromPool("QuirksMode"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser72183207() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser13190170() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser23254946() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser64486528() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser52352201() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser974583() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser34976817() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser19539276() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser91326() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser2010301() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity49961621() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("templatf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity44951074() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("disablee");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity11199662() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("US-ASCIH");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity33398927() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("tfoos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity12712623() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("keygen");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity87369859() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity(":eq)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity84299861() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity(":lt(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity47611600() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity(":contains'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity91219619() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("h5");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity75608926() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("iframd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName13167958() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("command");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName60677580() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("textare`");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName23900088() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("imh");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName2366428() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("h3");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName95108831() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("span");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName8244525() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName(":only-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName32654434() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("sarcasm");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName455255() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName(":only-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName9677503() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName(":gt(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName26112129() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("plaintexs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName99327660() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName(":only-chile",new int[]{0,-1,55296,224,192,1,55297,2,3,4,199,239,240,400,1114112,401,187});
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName72413069() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("sarcasm",new int[]{0,-1,55296,224,192,1,55297,2,3,4,199,239,240});
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName56679721() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("svg",new int[]{0,-1,55296,224,192,1,55297,2,3,4,199,239,240,400,1114112,401,187});
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName81024830() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("img",new int[]{});
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName43342583() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName(":nth-of-type(",new int[]{0,-1,55296});
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape6391367() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("imh",(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape20835676() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("noscrips",(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape6824927() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("colgrouq",(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape9785453() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("http:.",(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape95407364() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("scripu",(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape42488011() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("checked");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape77922422() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("inpuu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape65510409() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("tbodz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape60755513() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("optioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape59831872() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("bgsound");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape34458211() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("#roos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape24223930() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("imagd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape95160273() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("noscrips");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape66932741() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("tablf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape48650334() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("hs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName46739110() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName1033221() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName75614329() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName47746339() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName72205431() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData38922878() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData59531313() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData2989481() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData2139107() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData66810106() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData27614385() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("href");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData83882034() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("forn");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData67498703() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("buttom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData98525849() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("tg");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData20582433() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData(":matchesOwn'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded37553472() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("xmq","imagf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded31053057() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("-,","p");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded91583942() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("theae","template");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded95458114() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("dd","*}");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded22131720() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("captiom","\"");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName35052144() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName13998072() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName10116() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName59815170() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName74708871() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData34781982() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData4212985() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData10850691() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData28135171() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData70916892() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration33838865() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration54337887() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration48304362() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration62000566() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration54762049() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration38264563() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration82901245() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration29577320() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration54224932() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration99365948() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName51299127() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName11088281() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName66680717() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName44106763() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName37498141() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname65469958() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname81978570() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname24807093() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname10532362() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname37696664() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration4351343() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration6118213() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration2426380() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration84905339() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration48702108() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements94305116() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements41906233() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements34702387() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements94476269() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements29453670() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement53514254() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement1610146() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement16779265() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement95250082() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement641594() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit2129048() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit56946165() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit66883474() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit10211981() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit91106490() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData49448781() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData9770592() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData75777034() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData78394704() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData7125957() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey47917357() {
        DocumentType documenttype = (DocumentType) PoolGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey(":nth-of-type)");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey5966814() {
        DocumentType documenttype = (DocumentType) PoolGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("*}");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey62598172() {
        DocumentType documenttype = (DocumentType) PoolGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey(":nth-child'");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey77254393() {
        DocumentType documenttype = (DocumentType) PoolGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("p");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey95957869() {
        DocumentType documenttype = (DocumentType) PoolGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("frameses");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey92532032() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey37315848() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey4056391() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey32164330() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey44828874() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey45808513() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("isindey");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey83343418() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("typf");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey15578235() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("captioo");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey19832768() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("heac");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey47838414() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey(":nth-of-type)");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue69088026() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue44189353() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue22514838() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue22026340() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue77284604() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue22968739() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("html");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue17534383() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("radip");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue29896362() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("noscript");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue72851200() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("sarcasl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue86957609() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("imh");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml91084883() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml88160() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml59624202() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml97951227() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml56047078() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded54175042() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("imf","html");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded95045217() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("hr","!>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded76216925() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded(":matchesOwn)","h0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded5645281() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("http-equiw","title");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded84212358() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("boundarz","-.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName65281364() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName17735145() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName43521462() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName6500439() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName80808835() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext42899303() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext6930379() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext48273186() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext4592858() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext69028114() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext62975136() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("captioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext3449400() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("met`");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext29206370() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("imagd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext62534192() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text(":matchesOwn'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext39526990() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("optioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText38840665() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText83190953() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText45991122() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText72465482() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText86346972() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank98150035() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank31164929() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank57769077() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank57730108() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank26861745() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText41086867() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(1114112);
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText13504468() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText5490168() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(57343);
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText56340437() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(55296);
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText97446245() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(1114112);
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded49586558() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded(":empty","optgroup");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded86110107() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("US-ASCIH","#roos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded5556205() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("\'","!=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded91254497() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("noframet","captiom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded41975750() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("radin","http:0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded14917923() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("radip");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded9069304() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("bq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded38948316() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("ode");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded37647324() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("sarcasl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded29835009() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("*|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException7858877() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) PoolGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        PoolGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException78331005() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) PoolGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        PoolGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException66278408() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) PoolGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        PoolGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException52061109() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) PoolGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        PoolGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException41492314() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) PoolGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        PoolGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin1087287() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) PoolGenerator.getObjectFromPool("Collection"),":lt(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin49187003() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) PoolGenerator.getObjectFromPool("Collection"),"\"\"");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin52569361() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) PoolGenerator.getObjectFromPool("Collection"),"<0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin11043129() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) PoolGenerator.getObjectFromPool("Collection"),"bodx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin75014256() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) PoolGenerator.getObjectFromPool("Collection"),"spam");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin69797338() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) PoolGenerator.getObjectFromPool("Iterator"),"~=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin11219172() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) PoolGenerator.getObjectFromPool("Iterator"),"math");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin9299340() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) PoolGenerator.getObjectFromPool("Iterator"),"th");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin57016798() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) PoolGenerator.getObjectFromPool("Iterator"),"theae");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin98025145() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) PoolGenerator.getObjectFromPool("Iterator"),"#roou");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin58100415() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData("},"noframes");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin31928263() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt"},"select");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin77695994() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom"},"[a-zA-Z_:][-a-zA-Z0-9_:.]*");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin93842463() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld"},":containsOwn'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin15465609() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd"},"plaintext");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding24296811() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(191);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding42105602() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(199);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding22102255() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(57343);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding81479603() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(-1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding10122035() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(2);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank53287428() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("ts");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank70859315() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank(":nth-child)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank84164185() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("checkbox");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank45529388() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("basefont");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank53210950() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("UTF-");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric18760885() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("th");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric3791833() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("hreg");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric54879619() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("httq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric18709814() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("svg");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric34864208() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("xmo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace57711573() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(199);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace12047947() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(4);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace64781279() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(4);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace68786775() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(55297);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace47889516() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(4);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace51005550() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(0);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace94303777() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(2);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace59445732() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(2);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace28095199() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(55296);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace73809496() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(224);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar67295640() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(57342);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar4299443() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(199);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar57683354() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(187);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar5870781() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(-1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar15408971() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(400);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace86537529() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace(":last-of-typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace98949652() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("xmp");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace39514597() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace(":matchesOwn)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace48112933() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("]]>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace50745177() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("\'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace20436040() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"),":matchesOwn'",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace71302005() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"),"h0",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace88630442() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"),"$<",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace70476066() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"),"xml",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace64004412() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"),"text/",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin84589161() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("deflatd","button");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin72249577() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in(":gt(","xmo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin95637923() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("spao","*=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin19167934() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("keygeo","Set-Cookid");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin46853431() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("!=","radio");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted49995779() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("svg",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?"});
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted9145950() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("templatd",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv"});
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted84746550() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("actioo",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate"});
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted79852093() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("br",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root","US-ASCIH","http:/","http:.","US-ASCIJ","noembec","US-ASCII","http:0","noscrips","noscript","noscripu","optioo","optiom","option","boundary","boundarz","img","boundarx","imf","imh","link","linl","linj","basefont","basefonu","head","heae","nobs","nobr","nobq",":empty","commane",":emptx","#texs","rubx","command","rubz","heac","commanc","ruby",":emptz","#texu","#text","basefons",":only-of-typf"});
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted9306831() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("button",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr"});
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve22609327() throws Exception {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) PoolGenerator.getObjectFromPool("URL"),"https");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve60926486() throws Exception {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) PoolGenerator.getObjectFromPool("URL"),"textareb");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve92493550() throws Exception {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) PoolGenerator.getObjectFromPool("URL"),"nobs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve38060714() throws Exception {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) PoolGenerator.getObjectFromPool("URL"),"~<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve7422681() throws Exception {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) PoolGenerator.getObjectFromPool("URL"),"inpuu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve86306105() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve(":containsData)","DOCTYPF");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve87508314() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("spao","http:/");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve482585() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("bodz",":matchesOwn)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve83864681() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("te","tc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve75843315() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("checkbow","DOCTYPE");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder32952675() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder35761327() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder59771805() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder10825345() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder8465709() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder44086647() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder65935975() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder16305474() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder79321500() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder72360560() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase49206831() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("*=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase36256418() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase86680548() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("forn");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase9305442() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("--");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase20513912() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("#texu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize88304865() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize(":last-child");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize18444393() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("hreg");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize99557240() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("ts");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize56007199() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("optiom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize88360255() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("bgsounc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap51638214() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) PoolGenerator.getObjectFromPool("InputStream"),-1,224);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap87122215() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) PoolGenerator.getObjectFromPool("InputStream"),187,1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap94839849() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) PoolGenerator.getObjectFromPool("InputStream"),57342,187);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap76386552() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) PoolGenerator.getObjectFromPool("InputStream"),57342,240);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap61794830() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) PoolGenerator.getObjectFromPool("InputStream"),0,2);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer65841157() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(1114112);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer57045860() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(55296);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer54836717() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(57343);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer72978626() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(187);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer13427142() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(55297);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout79051932() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(1,0);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout65682644() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(1,-100);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout69543226() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(-100,-100);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout28810997() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(0,0);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout47454229() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(0,1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse67861609() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":only-of-typf","namd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse85104601() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("img","stylf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse7501030() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("br","radin");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse57948619() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("radin","tg");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse81031035() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("http:0","scripu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse36794026() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("boundarz","optioo",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse52262797() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("tfoou",":nth-last-of-type(",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse40863153() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("*}","US-ASCIH",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse40488130() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("optgrouq","svf",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse77165709() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("rubx","http:.",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse32576757() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("html");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse17539137() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":eq)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse55837430() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("\"");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse80216791() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("plaintexs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse17181699() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("*<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect25988731() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("imf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect91208494() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("http-equiv");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect25469181() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("bgsounc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect23104393() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("^>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect39980895() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect(":empty");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse33195834() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"a","hq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse91634761() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"radip","xmq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse35591135() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"Set-Cookie","link");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse62309108() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"textareb","basefonu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse55455995() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"tfoos","titld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse18920915() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"typf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse45494021() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"h5");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse98812898() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),":emptx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse46302735() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"hree");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse3554151() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"textareb");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse16276299() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"theae",":last-of-typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse57449983() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"select","!>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse55964181() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"bgsounc","|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse10178637() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"imagf","evem");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse71873606() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"noframet","abs:");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse37288918() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"xmo","#root",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse99619586() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"noframer","buttom",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse80075474() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"namd",":nth-child'",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse13746456() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"\"",":matches)",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse33888713() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"hree","noscript",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment87969233() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment(":matches)","noscript");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment33847998() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("metb","meta");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment39966840() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("text/","frameses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment22807981() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment(":has(","keygen");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment30403745() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("Set-Cookif",":last-of-typf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment11231452() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("bodx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment19451800() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("frameses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment1949744() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("]]?");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment43403367() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("http:0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment74248541() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("bgsoune");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse56562665() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) PoolGenerator.getObjectFromPool("URL"),239);
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse35891889() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) PoolGenerator.getObjectFromPool("URL"),4);
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse12945587() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) PoolGenerator.getObjectFromPool("URL"),199);
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse52566399() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) PoolGenerator.getObjectFromPool("URL"),57343);
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse33609020() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) PoolGenerator.getObjectFromPool("URL"),240);
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean27631787() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(":not'",":nth-last-of-type)",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean79101146() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("[a-zA-Z_:][-a-zA-Z0-9_:.])","xmo",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean25617747() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("#texs","spao",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean55105782() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("text0","imf",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean14658943() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("lh",":not'",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean34177054() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("xmo",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean24564068() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(":matches'",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean36418636() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("thead",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean4529532() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("noframes",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean44298238() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("$<",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean94848353() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("style","colgroup",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean41907044() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("*}","colgroup",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean74888801() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("hidden","boundarx",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean98867809() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(":only-child",":containsData)",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean36603726() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(":nth-child(","h0",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid16472508() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("!>",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid87401731() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid(":empty",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid4843979() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("ode",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid64688806() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("dt",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid22816871() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid(":containsData(",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput138534() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("actioo","tbodx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput12864069() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput(":contains)","basefons");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput43904121() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("optgroup","gziq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput73953963() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput(":matches'","frameseu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput36615074() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("bgsoune","inpus");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput80124367() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) PoolGenerator.getObjectFromPool("Reader"),"style");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput89112204() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) PoolGenerator.getObjectFromPool("Reader"),"td");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput8906904() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) PoolGenerator.getObjectFromPool("Reader"),"\"");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput44638453() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) PoolGenerator.getObjectFromPool("Reader"),"svf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput2343684() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) PoolGenerator.getObjectFromPool("Reader"),":contains(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput6666864() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput(":only-child",(Element) PoolGenerator.getObjectFromPool("Element"),":containsData)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput26289002() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("noembed",(Element) PoolGenerator.getObjectFromPool("Element"),"text.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput10834460() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("a",(Element) PoolGenerator.getObjectFromPool("Element"),"commanc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput11379409() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("*",(Element) PoolGenerator.getObjectFromPool("Element"),"html");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput5967686() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("tfoou",(Element) PoolGenerator.getObjectFromPool("Element"),"http-equiw");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors33585691() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors89365714() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors35295415() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors29315196() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors82363924() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors80631896() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(55297);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors26847398() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(187);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors7414970() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(199);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors31738299() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(4);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors45021381() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(199);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors11782330() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors3150424() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors76974045() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors25462065() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors26368295() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings80269229() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings8705016() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings70711656() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings65147658() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings32568941() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings55577860() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings94144579() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings58557964() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings44309349() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings51276584() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse92914280() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("xmo","noscript");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse37600758() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("abs:","http:.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse16572479() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("http:0","Set-Cookie");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse54863588() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("hree","charseu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse41224793() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse(":last-child","bgsound");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment95607525() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("radip",(Element) PoolGenerator.getObjectFromPool("Element"),"!=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment11844632() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("noscrips",(Element) PoolGenerator.getObjectFromPool("Element"),"[a-zA-Z_:][-a-zA-Z0-9_:.])");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment92082794() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment(":nth-child'",(Element) PoolGenerator.getObjectFromPool("Element"),"evem");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment10398111() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("charses",(Element) PoolGenerator.getObjectFromPool("Element"),"httpt");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment39752859() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("#texu",(Element) PoolGenerator.getObjectFromPool("Element"),"http:/");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment80434535() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment(":nth-of-type)",(Element) PoolGenerator.getObjectFromPool("Element"),"captioo",(ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment92884304() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment(":containsData)",(Element) PoolGenerator.getObjectFromPool("Element"),"hs",(ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment46380551() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment(":only-child",(Element) PoolGenerator.getObjectFromPool("Element"),"text/",(ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment37164991() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment(":nth-last-child(",(Element) PoolGenerator.getObjectFromPool("Element"),"xmp",(ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment33979086() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("~=",(Element) PoolGenerator.getObjectFromPool("Element"),"htmk",(ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment30974959() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment("abs:","hree");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment1990655() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment(":alk","US-ASCIJ");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment52601532() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment(":gt'",".");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment47408786() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment(":matchText",":emptz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment67895507() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment(":not'","titld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment15467606() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment(":emptx",":matchesOwn)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment41343501() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("hs","radio");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment25772878() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("DOCTYPF","nobr");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment62907977() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("script","hq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment18059765() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("odc","isindew");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities90229487() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities(":nth-last-child'",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities89850638() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("=",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities56687851() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("lh",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities1082259() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities(":lt'",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities75425700() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("sarcasn",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed14218602() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("http:0","httpr");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed8468344() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("http:/","linj");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed39394974() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("dt","hiddeo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed93368286() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("odc",":eq'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed86240500() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("$>","checkbow");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser74672858() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser55225544() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser86796472() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser92419870() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser89017142() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser6205802() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser91719456() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser93398661() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser84430593() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser82008000() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName2365131() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName13135000() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName35341956() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName63534484() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName13685155() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName419113() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName19867295() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName85427970() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName56177960() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName95084098() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf70964410() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("noframes",(ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf71949197() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("checkbow",(ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf75596617() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf(":emptz",(ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf5613487() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("col",(ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf96134886() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("tablf",(ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf91003574() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("DOCTYPF");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf32953049() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("keygeo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf57758864() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf(":roos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf10386480() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("frameseu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf65051362() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("td");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock51521519() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock608361() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock57900949() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock29045182() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock45685926() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock71916655() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock56719180() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock74801349() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock73015802() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock52667612() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock57909059() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock75075603() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock47796902() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock38911213() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock24930600() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline94123795() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline92288473() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline23803212() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline40071484() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline57485636() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData45357901() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData97267489() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData69350165() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData39798584() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData43740821() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty32663455() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty14992047() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty53792758() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty91150613() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty47392384() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing1880985() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing82639983() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing72155818() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing64964878() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing72855578() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag51756847() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag18478609() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag75060270() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag31121696() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag30841642() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag20431525() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("#roos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag17342816() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("checked");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag67788461() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("matg");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag96805007() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("xml");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag7940622() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("href");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace38754776() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace28977626() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace98317089() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace75562169() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace6024309() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed88522443() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed38292942() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed37043727() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed88331603() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed41213980() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable89372520() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable76963535() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable9651026() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable61808153() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable68958646() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage81025970() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage96809338() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage42046905() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage71315144() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage52100206() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition31184364() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition94000676() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition98370779() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition61093168() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition83877337() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking56759683() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking85436652() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking12640332() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking32804836() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking24456557() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking69509099() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(57343);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking69194814() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(2);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking9068501() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(1114112);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking71696896() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(240);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking54247088() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(2);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos95883529() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos59614295() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos54090910() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos97166405() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos68388767() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty86626230() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty99884364() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty8164365() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty33443718() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty10177517() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent84679947() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent52835542() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent64393837() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent61765002() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent10317319() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance84254795() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance88399581() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance85009866() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance428165() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance66003133() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo51492194() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('A');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo99237838() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('-');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo68654288() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('/');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo22040735() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('{');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo87463805() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('"');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny28339663() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('z');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny68662255() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('F');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny82413513() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('.');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny88178422() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('f');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny14305040() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('>');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload19092168() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) PoolGenerator.getObjectFromPool("File"),"tq","http-equiv");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload27815789() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) PoolGenerator.getObjectFromPool("File"),"de","h0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload66673164() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) PoolGenerator.getObjectFromPool("File"),":contains'",":nth-child'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload75341305() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) PoolGenerator.getObjectFromPool("File"),"tbodx",":matches)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload40143961() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) PoolGenerator.getObjectFromPool("File"),"h3","ruby");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload26237525() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"abs9","nobr");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload44105305() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"imagf","h3");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload56658574() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"type",":containsData(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload12879038() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"http:0","ruby");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload45341926() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"forn","^<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload43408398() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),":all","ts",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload40790952() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"imh","title",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload69218847() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"http","radio",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload6344051() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"commane","rubx",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload58826027() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"option",":has(",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer87411581() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) PoolGenerator.getObjectFromPool("InputStream"),1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer46413221() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) PoolGenerator.getObjectFromPool("InputStream"),3);
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer88735827() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) PoolGenerator.getObjectFromPool("InputStream"),55297);
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer45587612() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) PoolGenerator.getObjectFromPool("InputStream"),-1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer72608092() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) PoolGenerator.getObjectFromPool("InputStream"),0);
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull94598786() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull56451494() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull94997832() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull62559600() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull90964975() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull98797753() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"),":only-child");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull20434849() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"),":contains)");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull61100078() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"),":nth-last-of-type(");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull98583948() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"),"[");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull45602705() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"),"rubx");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue63767641() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue41600838() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue77433500() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue47828473() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue92981817() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue43079164() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,":not)");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue81655051() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"disablec");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12904878() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"styld");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue4898666() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"isindey");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue57267492() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"Set-Cookie");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse45986757() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse76357681() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse63952002() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse23119181() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse55975857() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse99105453() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"col");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse86552760() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"captiom");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse24472064() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"boundarx");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse71173879() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"*=");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse38333145() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"|");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements11764386() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements2635455() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements11852270() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements13688662() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements54772232() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements92600297() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"),"*=");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements15809147() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"),"UTF,");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements90347365() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"),":containsData)");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements26091443() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"),":nth-child'");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements68943078() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"),"li");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty8540496() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("col");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty17560617() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("--");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty82693747() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("^");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty95620224() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("heae");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty96397853() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("!<");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty36714779() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("rubz","plaintexs");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty69821614() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("optiom",":containsOwn(");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty20842542() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("body","te");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty56309586() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("colgrouq",":containsOwn(");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty61555414() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty(":not)","heae");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail55171472() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("!<");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail30674650() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("deflate");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail89879105() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("imh");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail60310484() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("$>");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail10303273() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("selecs");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect69873347() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect("optioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect68873300() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect("inpuu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect31436596() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect("keygen");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect86738668() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect(":only-of-typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect93767799() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect("~>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect82718607() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect58839378() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect46650756() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect30106411() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect86194054() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl43804572() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl11126648() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl95900250() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl54972147() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl31069959() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl56120565() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url(":first-of-typf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl80916415() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url(":nth-last-child(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl66208007() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("http");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl98239181() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("tq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl77127287() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("deflate");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy77605917() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) PoolGenerator.getObjectFromPool("Proxy"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy85845413() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) PoolGenerator.getObjectFromPool("Proxy"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy85009198() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) PoolGenerator.getObjectFromPool("Proxy"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy87058835() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) PoolGenerator.getObjectFromPool("Proxy"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy18258215() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) PoolGenerator.getObjectFromPool("Proxy"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy66839105() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("noembec",1114112);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy17147276() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("checkee",4);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy4989421() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy(":last-of-type",1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy46220550() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("*<",187);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy74017533() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("ti",0);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent56130724() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("col");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent31135451() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("link");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent77898629() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("*<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent81447811() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("styld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent48037809() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("forl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout69508419() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(55296);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout37515776() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(199);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout87119198() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(239);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout81140902() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(-1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout65855408() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(224);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize53514525() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(199);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize26946092() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(192);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize59281753() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(239);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize64728923() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(224);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize46433807() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(4);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects87694185() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects8727760() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects47548094() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects70266733() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12395351() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer33143983() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer(":eq(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer72486306() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("ode");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer86301537() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer(":matchesOwn(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer69522096() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("tbody");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer31356127() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("noframer");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod24789174() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) PoolGenerator.getObjectFromPool("Method"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod82857322() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) PoolGenerator.getObjectFromPool("Method"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod58900710() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) PoolGenerator.getObjectFromPool("Method"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod93205250() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) PoolGenerator.getObjectFromPool("Method"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod87269814() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) PoolGenerator.getObjectFromPool("Method"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors42115246() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors94126045() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors5481233() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors51597478() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors99487558() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType78375546() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType89190346() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType95387218() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType95308277() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType94312681() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata45277834() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("htmk","*|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata18173770() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("iframd",":not'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata72841185() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("#texs","UTF-");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata47240479() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data(":nth-last-of-type)","namf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata54039597() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("boundarx","!=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory34114833() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) PoolGenerator.getObjectFromPool("SSLSocketFactory"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory24611391() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) PoolGenerator.getObjectFromPool("SSLSocketFactory"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory75309148() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) PoolGenerator.getObjectFromPool("SSLSocketFactory"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory20930885() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) PoolGenerator.getObjectFromPool("SSLSocketFactory"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory87204673() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) PoolGenerator.getObjectFromPool("SSLSocketFactory"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata98741976() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data(":last-of-typf","noembed",(InputStream) PoolGenerator.getObjectFromPool("InputStream"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata85733370() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("even","th",(InputStream) PoolGenerator.getObjectFromPool("InputStream"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata34494528() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("disablee",":emptx",(InputStream) PoolGenerator.getObjectFromPool("InputStream"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata2808242() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("tabld","du",(InputStream) PoolGenerator.getObjectFromPool("InputStream"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata62513744() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("abs:",":containsOwn'",(InputStream) PoolGenerator.getObjectFromPool("InputStream"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata24104606() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata20177762() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata52177015() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata98337483() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata11636360() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata4873044() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) PoolGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata32390563() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) PoolGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata7425497() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) PoolGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata21102914() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) PoolGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata97129030() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) PoolGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata24713863() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("text.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata95728198() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("command");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata47712265() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("#root");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata83539643() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data(":nth-child(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata70569847() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data(":lt(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody76805073() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody(":only-child");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody18312363() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody("*");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody48786474() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody("*<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody77902777() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody(":matches(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody26937857() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody(":eq)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader87530914() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("imagd",":gt(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader2559960() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("even","hidden");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader82707878() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("text.",":nth-child'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader36256662() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("^","basefonu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader43461604() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header(":matchTexs","ti");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders42786441() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders2465439() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders56237257() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders31714() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders64880319() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie90208591() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie(":matchesOwn)",":only-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie73436609() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie("radio","#roos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie87772450() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie("http-equiw","~<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie70208487() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie("ode","[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie36574053() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie(":nth-last-child'","^=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies26925453() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies41828968() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies74987220() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies75668516() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies30688579() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser24822846() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser70844216() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser73178121() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser82751915() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser61495527() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget90869243() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget17226920() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget65321104() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget83451121() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget18241640() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost25632743() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost19023870() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost20000485() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost68181651() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost26539212() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute76895473() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute29916888() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute89694952() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute36899318() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute99259259() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest9166286() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest22174317() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest6519101() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest30689929() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest46981653() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest14982137() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) PoolGenerator.getObjectFromPool("Connection.Request"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest77305739() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) PoolGenerator.getObjectFromPool("Connection.Request"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest14344051() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) PoolGenerator.getObjectFromPool("Connection.Request"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest46721510() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) PoolGenerator.getObjectFromPool("Connection.Request"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest56433571() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) PoolGenerator.getObjectFromPool("Connection.Request"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse14705461() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse94934800() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse4744645() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse73167767() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse99224443() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse10001691() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) PoolGenerator.getObjectFromPool("Connection.Response"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse76621141() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) PoolGenerator.getObjectFromPool("Connection.Response"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse42730091() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) PoolGenerator.getObjectFromPool("Connection.Response"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse13251912() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) PoolGenerator.getObjectFromPool("Connection.Response"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse26849433() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) PoolGenerator.getObjectFromPool("Connection.Response"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset29732960() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("optiom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset80101494() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("action");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset18745950() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("optgrouq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset10040561() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("templatf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset11482193() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("theae");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup44519019() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = (Document) w3cdom.fromJsoup((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup73036666() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = (Document) w3cdom.fromJsoup((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup71476775() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = (Document) w3cdom.fromJsoup((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup22302172() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = (Document) w3cdom.fromJsoup((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup43129753() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = (Document) w3cdom.fromJsoup((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert78969169() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) PoolGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert54036221() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) PoolGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert59065660() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) PoolGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert97838727() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) PoolGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert36635870() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) PoolGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString18940327() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString27558307() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString56118044() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString32841572() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString1611643() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty25558459() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty3057401() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty25314512() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty52718952() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty93045286() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek44985655() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek9250882() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek62937096() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek79487001() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek49353234() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst71776014() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('\\');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst2043798() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('o');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst46588262() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('f');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst4997659() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('0');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst50018065() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('<');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst50789974() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("^");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst29387679() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("h2");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst58068444() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("[a-zA-Z_:][-a-zA-Z0-9_:.]*");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst55683656() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("buttoo");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst92440028() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("plaintexu");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches44446839() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("tbodx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches87708492() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("Set-Cookid");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches80851079() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("evem");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches13275312() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("h3");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches24806414() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("US-ASCIJ");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS92199918() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("span");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS68042901() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("^<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS92595820() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("ode");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS9615160() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("#roou");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS64356462() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("button");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny55556124() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("]]?");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny60375629() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("th");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny29044749() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("http-equiv");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny15325153() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("-,");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny83246829() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("forn");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny5691720() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('_');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny92577631() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('0');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny84563656() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny(':');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny75477505() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('+');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny47656509() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('=');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag13217913() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag15455683() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag32498596() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag78449076() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag71862241() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp53109073() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp(":not(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp63271064() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp85642882() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("abs9");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp84548599() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("rubz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp4398386() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("deflate");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace61990308() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace92238532() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace44111977() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace22674872() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace97241452() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord78290976() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord7509971() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord14265784() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord63811328() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord3600852() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance6753687() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance78745217() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance35944926() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance97118655() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance23240943() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume25990578() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume12116636() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume87806827() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume37663278() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume54520541() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume47604899() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume("option");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume37894007() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume(":first-chile");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume34972632() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume(";");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume35724733() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume("ode");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume62505208() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume("href");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo81005694() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("link");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo51604310() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("sarcasl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo20768259() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo(":roos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo93609028() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("abs;");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo38932419() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("hiddem");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase95897226() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase(":lt(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase27157952() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase(":only-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase5140539() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("disablec");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase33942815() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("charset");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase72203133() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("te");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny68909855() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("plaintext");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny49851132() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("ti");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny94235272() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("met`");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny34713142() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny(":last-chile");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny39444839() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny(":matchTexs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo17461999() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo(":only-of-typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo8690942() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo(":last-chilc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo30247485() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo("bgsoune");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo51159880() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo(":gt(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo14868059() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo(":lt'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase21799217() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("linl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase80988340() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("linl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase96871410() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("tablf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase42526178() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("de");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase24787185() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("imagd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced38741961() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('9','\'');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced10064464() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('_','-');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced96174443() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('a','\'');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced58562035() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('~','g');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced69423665() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced(')','+');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape34775278() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape("colgrouo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape22539800() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape("deflatd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape1126090() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape("xmo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape27375790() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape(":has(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape70596690() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape("optgroup");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace28266201() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace13567904() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace11533112() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace1542404() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace92299532() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord83873437() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord8038112() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord25092321() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord86941745() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord63520558() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName65546457() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName86339735() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName46404024() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName34531969() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName61916280() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector14962546() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector94288165() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector11638816() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector91444560() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector89528919() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier47588615() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier86997826() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier9223426() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier78671766() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier82560024() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey13645824() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey17365824() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey38240841() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey28218504() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey16522182() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder65203323() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder58010860() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder61421868() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder57265794() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder48093933() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase66633657() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase27177629() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase53916529() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase81962363() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase62055844() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase19483464() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase87884883() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase63025985() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase59133215() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase85908459() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag75894956() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("link");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag73100984() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("isindey");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag71600546() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag(":matchText");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag75275289() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("*|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag49631474() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("scripu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute73563859() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("typf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute38349244() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute(":contains'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute22034980() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("charses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute98799167() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("#roos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute83145078() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("dc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean30476263() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean78151323() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean62426345() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean34455080() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean78951085() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid65689284() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid10510266() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid97946660() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid62604786() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid53043915() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml43097817() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("^");
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml59514878() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("radin");
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml84499756() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("ti");
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml24231114() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("]]>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml90910057() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("http-equiv");
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone37109337() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone39828779() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone18217706() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone72610166() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone56348703() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText70610707() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText91058544() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText60346273() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText73407661() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText60029287() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic5746642() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic76332135() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic92628888() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic92706690() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic85068714() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages17166519() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages2238503() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages91531681() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages79406121() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages31768334() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed75962427() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed7610360() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed83872650() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed45901677() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed73340785() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags12837303() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags(":eq(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags49201677() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("math");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags84569799() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("basf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags41826291() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("!=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags5066417() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags(":last-of-typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags65609452() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("select");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags90655401() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("ode");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags24914664() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("http");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags92423912() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("noscript");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags69208360() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("commane");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes84969312() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("!<","#texs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes94637952() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("plaintexs","noscripu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes54306926() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("evem","spam");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes55505366() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("keygeo","\"");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes24405066() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("tabld","text.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes48267870() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes(":matchesOwn)","UTF.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes81005724() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes("text.","script");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes16781305() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes(":eq(","commanc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes37220416() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes("heae","noembec");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes26901870() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes("h2","tfoot");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute94905471() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute(":first-of-typf","abs;","span");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute93000046() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("a","bodz","textareb");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute12302034() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute(":last-of-typf","dc","ruby");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute26957540() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("tablf",":matchText","textarea");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute98891583() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("checkbox",":has'","^");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute52647231() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute("xmp","keygeo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute94990667() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute(":gt(",":matchesOwn(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute17191531() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute("basefons","name");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute58444203() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute(":eq(","#text");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute76797309() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute("#","disabled");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks57358164() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks75716829() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks23044837() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks42764724() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks56365805() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols28945455() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols(":nth-of-type'","gziq","inpus");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols76470242() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols(":emptx","bq","charset");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols16665677() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("titlf","svg","commanc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols3021409() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("DOCTYPF","tfoos",":has'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols72157523() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("optgrouq","US-ASCII","keygen");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols17599955() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols(":last-of-typf",":last-of-typf","ts");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols4023896() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols(":first-of-type",":last-chile","a");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols21870459() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("metb","\'","h2");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols48359424() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols(":matches'","\"\"","|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols70476481() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("httq","US-ASCIH","a");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain86350430() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main(":lt'");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain612146() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("tbodx");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain35873882() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("rubx");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain65205657() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("$>");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain55920036() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("text0");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText29331206() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText99266045() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText25161408() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText36313569() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText21555575() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain52780011() throws Exception {
        Wikipedia wikipedia = (Wikipedia) PoolGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain96184769() throws Exception {
        Wikipedia wikipedia = (Wikipedia) PoolGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain41865320() throws Exception {
        Wikipedia wikipedia = (Wikipedia) PoolGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain20691554() throws Exception {
        Wikipedia wikipedia = (Wikipedia) PoolGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain31012991() throws Exception {
        Wikipedia wikipedia = (Wikipedia) PoolGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain75429697() throws Exception {
        ListLinks listlinks = (ListLinks) PoolGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain45487280() throws Exception {
        ListLinks listlinks = (ListLinks) PoolGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain41773989() throws Exception {
        ListLinks listlinks = (ListLinks) PoolGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain30816542() throws Exception {
        ListLinks listlinks = (ListLinks) PoolGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root","US-ASCIH","http:/","http:.","US-ASCIJ","noembec","US-ASCII","http:0","noscrips","noscript","noscripu","optioo"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain24599574() throws Exception {
        ListLinks listlinks = (ListLinks) PoolGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType92238317() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType54623638() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType2652699() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType55264941() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType33639133() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl10981793() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl63056363() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl66316811() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl17543669() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl27241638() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode91983562() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode77038143() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode34921845() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode10402167() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode35854618() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl88752598() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl34484570() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl32933809() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl47088019() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl55670195() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse89448340() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse78223986() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse73676210() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse23668634() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse39404474() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse83896757() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse5018445() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse51760445() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse94797952() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse11354318() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse3000789() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse53010152() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse70771575() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse24965836() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse45468231() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter80704510() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter25881135() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter72944359() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter36377605() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter79110399() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter30214404() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter16163824() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter85687728() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter21381675() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter20449528() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect10888844() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect57939290() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect59080627() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect37233418() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect45899537() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst22965554() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst40752019() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst93487511() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst67174880() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst80148842() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr68515865() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr(":eq)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr15177427() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("frameseu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr68303555() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("titld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr1627268() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("math");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr7283390() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr(":contains)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr27661170() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("DOCTYPE");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr87754780() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr(":first-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr57243139() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("nobq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr77893169() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("optiom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr77496389() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("gziq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr24560287() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr(":containsData)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr90184111() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("tq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr80868918() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr(":lt)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr10395257() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("!>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr48979394() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("optgroup");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr22997945() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr("basefonu","titlf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr15153993() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr("text.",":first-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr80967415() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr("isindex",":nth-last-child'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr91088416() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr("table",":matches(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr79638786() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr(":alm","UTF.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr41792886() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("dc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr13994765() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("optgroup");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr52931091() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("dt");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr61827814() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("h6");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr21361737() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("lj");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass22245610() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("input");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass72415523() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass(":all");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass22205347() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("metb");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass97177516() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("selecu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass66019093() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("tfoou");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass18220368() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("text0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass2883729() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("charses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass11443195() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("http-equiw");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass7716590() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("scripu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass46000838() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("http:/");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass75100144() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass(":containsOwn)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass90856565() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("optioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass95950846() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("body");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass2381281() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("-.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass75809774() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("*");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass92686299() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass(":last-child");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass54669357() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("http:0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass30678892() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("ts");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass54198674() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("tbodx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass55099221() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("math");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval41667022() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval65906288() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval42616028() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval49274617() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval36041222() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval51435477() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("h2");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval51392623() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("keygeo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval25605240() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("h4");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval8285422() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("xmq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval47412676() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("basefont");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext77949128() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext34965916() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext25448801() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext96930838() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext68302710() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText66623506() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText75151406() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText58400942() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText15445268() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText66129821() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText17428178() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText28582412() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText88640041() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText28831830() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText74030803() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml46454819() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml95838048() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml69730033() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml41904775() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml87571668() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml97232218() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml32402844() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml63912838() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml18388598() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml39554898() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName29266614() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName(":alk");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName66458411() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName37436554() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("plaintexu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName91695010() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName(":only-chilc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName16982079() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("namf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml39698291() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("caption");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml45593823() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("]]=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml45163281() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("image");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml85660823() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html(":alm");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml936920() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("evem");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend40126265() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend(":nth-last-of-type'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend9639784() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend(":only-of-typf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend41148556() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend(":roou");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend67472785() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend("html");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend10092743() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend("imagd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend86940530() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("heac");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend772639() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("gzio");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend25145792() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append(":containsOwn(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend29109578() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("checkbow");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend41935787() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("^");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore92785664() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("du");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore25808776() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("h6");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore86023297() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("forn");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore70215135() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("selecu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore34373406() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before(":lt(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter77042314() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("charses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter77905140() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after(":nth-of-type(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter71426312() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("base");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter32825408() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after(":nth-child'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter32703938() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("deflatf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap23171013() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("h4");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap33167826() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("imf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap96934048() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap(":not(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap30841426() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap(":nth-of-type'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap53585182() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("h4");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap11360229() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap35481358() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap44887753() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap67854507() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap97017213() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty68551524() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty58709112() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty85677916() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty57544561() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty71878594() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove54428820() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove12999385() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove91101334() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove29535349() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove20204827() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect79272985() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("heac");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect87349552() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select(":nth-last-of-type'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect42767708() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("abs;");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect50111641() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("basefont");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect66877557() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("checkbox");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot58530020() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("[a-zA-Z_:][-a-zA-Z0-9_:.])");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot36356676() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("te");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot13815899() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not(":containsOwn(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot6839428() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("<.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot61147067() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("buttoo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq81239762() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(191);
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq27836726() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(0);
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq48952047() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(4);
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq93093332() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(3);
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq72265155() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(1114112);
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis86351025() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is(":not)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis36912230() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is("radio");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis36918467() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is(":only-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis36470475() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is(":first-chilc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis71221902() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is("DOCTYPE");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext64086497() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext73269260() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext91368149() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext24045435() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext59022183() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext61594725() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("Set-Cookie");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext8352532() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("textare`");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext23198618() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next(".");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext62151488() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("charset");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext37847589() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next(":emptx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll96926218() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll78516935() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll26074781() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll19853285() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll5189411() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll92931314() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("gzip");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll54509034() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("bgsoune");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll77948242() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("[CDATA[");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll95134723() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("~>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll36582149() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("gziq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev66975047() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev11731096() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev38905069() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev96431740() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev88971161() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev32748266() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("bq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev23356976() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("commane");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev38705712() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("scrips");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev20970994() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("h3");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev44266579() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("hiddem");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll74190307() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll56831402() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll11353589() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll34072733() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll69756555() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll49094171() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll("#");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll2225326() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll(":roos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll70261039() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll("optgrouo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll15919330() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll("buttoo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll88621457() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll("tabld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents35151705() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents6579753() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents20428413() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents71728976() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents17071961() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst27505935() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst69417316() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst66449413() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst93285332() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst46529865() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast10214288() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast64254786() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast94738698() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast29881845() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast69568146() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse30870221() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse51609851() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse7784739() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse82800839() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse31379191() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter19629179() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter27247024() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter62216406() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter66568382() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter48081374() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms76791077() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms24602563() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms78360828() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms41495595() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms19403448() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse60312327() {
        QueryParser queryparser = (QueryParser) PoolGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("evem");
        PoolGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse56777184() {
        QueryParser queryparser = (QueryParser) PoolGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse(":matchesOwn'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse7641738() {
        QueryParser queryparser = (QueryParser) PoolGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("dt");
        PoolGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse26435103() {
        QueryParser queryparser = (QueryParser) PoolGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("#roou");
        PoolGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse78943887() {
        QueryParser queryparser = (QueryParser) PoolGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("met`");
        PoolGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect30363609() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("*>",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect87863705() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("scripu",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect13950034() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("bgsound",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect45293182() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("h5",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect53616172() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("hr",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect51815487() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect75597125() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect83696283() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect17558324() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect71192138() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect23643378() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("styld",(Iterable<Element>) PoolGenerator.getObjectFromPool("Iterable<Element>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect98482939() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("<.",(Iterable<Element>) PoolGenerator.getObjectFromPool("Iterable<Element>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9707300() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("checkee",(Iterable<Element>) PoolGenerator.getObjectFromPool("Iterable<Element>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect67343427() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("h1",(Iterable<Element>) PoolGenerator.getObjectFromPool("Iterable<Element>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect41157185() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("rubz",(Iterable<Element>) PoolGenerator.getObjectFromPool("Iterable<Element>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst69929273() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("sarcasn",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst41823731() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("UTF-",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst53358085() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("^<",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst62973557() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst(":containsData(",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst82313935() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst(".",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
}