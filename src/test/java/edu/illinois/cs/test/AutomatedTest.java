package org.jsoup.mytests;
import edu.illinois.cs.test.generator.TestGenerator;
import edu.illinois.cs.test.generator.PoolGenerator;
import edu.illinois.cs.test.generator.PoolInit;
import org.junit.Test;
import static org.junit.Assert.*;
import org.jsoup.nodes.*;
import org.jsoup.select.*;
import org.jsoup.examples.*;
import org.jsoup.parser.*;
import org.jsoup.parser.helper.*;
import org.jsoup.internal.*;
import org.jsoup.safety.*;
import org.jsoup.*;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.regex.Pattern;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import java.nio.ByteBuffer;
import java.util.*;
import org.jsoup.nodes.Document.OutputSettings;
import org.jsoup.nodes.Document.QuirksMode;
import org.jsoup.Connection.Method;
import org.jsoup.parser.helper.Validate;
import javax.net.ssl.SSLSocketFactory;

import java.net.Proxy;
import org.jsoup.select.NodeFilter.FilterResult;

public class AutomatedTest {
    PoolInit pool = new PoolInit("src/main/java/org/jsoup/");
    PoolGenerator pg = new PoolGenerator("src/main/java/org/jsoup/");

    @Test
    public void testAttributesget36752041() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("abs:");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget56152617() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("lj");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget39215159() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("text0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget1909309() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("http:0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget45220266() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("img");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase78235347() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase("tc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase613274() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase(":gt'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase49626786() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase(":matchTexs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase89621178() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase("<0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase36045344() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase(":matchTexu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd927470() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("DOCTYPD",":eq(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd14946436() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("US-ASCII","script");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd78337335() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("captioo","gziq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd50095423() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add(":eq(","rubx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd57182276() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("span","link");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput71131094() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("table","text/");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput84204525() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("[a-zA-Z_:][-a-zA-Z0-9_:.]*","cok");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput63042011() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put(":first-chile","selecs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput33662655() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("tfoos","UTF,");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput50086116() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("tg","colgrouo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput18673348() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("input",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput44924356() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("titlf",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput53964421() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("tbodx",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput56422789() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("tfoos",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput27788541() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("script",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput98414621() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) PoolGenerator.getObjectFromPool("Attribute"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput23117934() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) PoolGenerator.getObjectFromPool("Attribute"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput31319028() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) PoolGenerator.getObjectFromPool("Attribute"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput16512255() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) PoolGenerator.getObjectFromPool("Attribute"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput67232846() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) PoolGenerator.getObjectFromPool("Attribute"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove88364916() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("nobs");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove33351379() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove(":matchTexs");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove10273451() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("tfoos");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove83588058() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("bgsound");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove45877938() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("img");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase44365285() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("\"\"");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase27738057() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("a");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase49511039() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase(":first-chile");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase46939369() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("actioo");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase66294136() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("disablee");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey88431401() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey("xmo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey81192865() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey("optioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey51218402() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey(":nth-child)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey19527062() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey("checkee");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey72187583() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey("dd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase78340564() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("commanc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase61906211() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("hree");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase32282625() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("lj");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase93999444() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase(":not)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase34345502() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("linj");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize74806388() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize49322442() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize47297554() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize71210894() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize56157538() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty31459531() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty84034021() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty98267982() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty9115811() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty4436499() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll76241207() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) PoolGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll67930352() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) PoolGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll8843325() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) PoolGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll88528361() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) PoolGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll86430467() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) PoolGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList19748218() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList55340406() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList87553581() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList52812140() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList59230637() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset30421624() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset83939590() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset70292805() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset31212051() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset60074288() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml36425726() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml32364401() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml34004178() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml10544878() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml59709335() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize39925598() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize23215677() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize49755202() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize31669096() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize64900238() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate79086264() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate59119083() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate44680573() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate46629646() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate81472029() {
        Attributes attributes = (Attributes) PoolGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName86924214() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName6662394() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName79469991() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName69268726() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName15132943() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName80451141() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName74137801() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName78902477() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName19942352() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName71678723() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName36002642() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName(":containsOwn)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName16398211() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("nobq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName29260620() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("xmm");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName56870042() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName(":nth-last-of-type(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName61853910() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName(":nth-child'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag76031163() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag64049893() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag93055267() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag38845096() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag78443253() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock45805286() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock36907946() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock20560298() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock40721867() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock9187513() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid87411189() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid65374659() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid32329436() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid13569799() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid25980235() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr89367054() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("hs","captiom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr40763801() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("tc","optgrouq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr52910563() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("tablf","h3");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr37778548() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("radip","(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr16341906() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("keygen","tfoos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr94627207() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr(":last-chile",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr2095633() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("iframd",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr12962421() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("optiom",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr96008679() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("deflate",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr88779636() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("hidden",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset4162286() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset10006118() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset28854172() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset47824301() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset66418072() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents57711686() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents32516783() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents41462908() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents14426393() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents74213204() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild97681159() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(55296);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild3813019() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(57243);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild78855098() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(57342);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild88225068() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(240);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild10096414() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(57343);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren14544251() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren34693036() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren86613774() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren33327561() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren82107727() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes48775333() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes79318189() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes29589486() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes83017038() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes45790578() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes3117139() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes67008637() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes2774222() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes71863064() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes50035052() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect77426493() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("frameses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect31187845() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("!<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect32541111() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select(":matches(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect4066364() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("ts");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect31477430() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("[CDATA[");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst87404133() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("ruby");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst45530378() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst(":matchesOwn'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst77790183() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("*<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst89876412() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("hreg");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst2644009() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("http-equiv");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis70226417() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("buttoo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis26367759() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is(":emptx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis38401882() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("heae");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis59904494() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis18801597() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("httpr");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis90752428() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis82868775() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis97683987() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis61349775() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis39962996() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild56042387() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild94213843() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild4647488() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild36591931() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild79950166() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo86468447() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo67206472() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo42631941() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo55670568() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo3104577() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild37693016() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild8291774() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild19131230() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild46129273() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild5350986() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren78185150() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(-100,(Collection<? extends Node>) PoolGenerator.getObjectFromPool("Collection<? extends Node>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren23954488() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(55396,(Collection<? extends Node>) PoolGenerator.getObjectFromPool("Collection<? extends Node>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren23803640() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(-1,(Collection<? extends Node>) PoolGenerator.getObjectFromPool("Collection<? extends Node>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren79896406() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(-100,(Collection<? extends Node>) PoolGenerator.getObjectFromPool("Collection<? extends Node>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren95553452() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(-100,(Collection<? extends Node>) PoolGenerator.getObjectFromPool("Collection<? extends Node>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren70203863() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(-1,(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren56788909() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(57243,(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren92106045() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(57342,(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren71509261() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(57243,(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren67593179() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(1114211,(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement74400992() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("inpuu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement219496() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("checkbox");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement95533170() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("keygem");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement17886496() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("DOCTYPF");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement26463747() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("\'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement31320092() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("typf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement58352834() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("plaintext");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement44269478() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("inpuu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement23256590() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("http:0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement27370761() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("checked");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText24903913() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText(":eq(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText57941107() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("!>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText24309382() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("svf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText93696758() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("html");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText56977104() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("te");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText60532726() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("image");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText59411533() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("frameses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText85643137() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("commane");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText31134025() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("styld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText94140007() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("isindey");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend41217036() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("sarcasl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend18578447() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append(":only-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend95552688() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("bodx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend46691515() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("checkec");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend78937153() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("styld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend51504329() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("forn");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend7406609() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend(":nth-child'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend14786594() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("titlf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend61848702() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("template");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend11770111() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("]]>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty52224916() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty49578721() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty4239766() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty64353931() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty55982839() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector83593356() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector29758515() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector31540764() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector45378480() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector58501418() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements69709610() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements19323860() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements32040255() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements39357440() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements8278688() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling28588903() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling70684730() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling95192492() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling48023853() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling93148143() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings76906894() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings73594106() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings54257107() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings85643337() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings83317701() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling39489511() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling54343656() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling85282543() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling31242734() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling23185713() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings54756538() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings1421599() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings7279568() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings83194292() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings14708818() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling6976255() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling20034080() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling25953844() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling91322462() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling44360706() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex60380142() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex88289081() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex43775671() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex34343223() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex89188282() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling72711047() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling55779444() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling98424015() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling12824685() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling51168004() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag11162636() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag("#text");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag53728111() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag("bgsound");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag18752530() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag(":first-of-typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag36535837() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag(":only-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag27713020() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag("http-equiw");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById38592279() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById(":has'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById11561418() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("radio");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById36421885() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("imh");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById60458635() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("command");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById893371() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("keygen");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass26226010() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass(":last-child");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass41683116() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("nobs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass74257022() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("basefont");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass46209875() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass(":first-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass44681795() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("base");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute78633643() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("titlf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute47060672() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("gzip");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute57240234() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("script");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute88216587() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("~=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute99737096() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("checkboy");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting97021234() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting(":emptx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting85122139() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("tc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting62134534() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("]]>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting51389867() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("DOCTYPD");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting60010913() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("htto");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue60201571() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("optgrouo",":nth-last-of-type)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue4389357() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("checkee","=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue496499() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("evem","US-ASCIH");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue68529606() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("dc","colgroup");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue36263305() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("bgsounc","*{");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot88203046() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("ts",":first-child");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot21450652() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("table","h2");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot14695949() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("*","caption");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot12149759() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("href",":first-child");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot55214221() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("text/","plaintexs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting46721644() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("thead","captiom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting22711575() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("tbodz",":gt)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting29512613() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("~=","noframet");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting75120150() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("http:/","tbody");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting69853968() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("isindex","eveo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding61200442() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("buttoo",":nth-child)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding88646009() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("-.","name");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding61429438() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("-,","$<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding94629882() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding(":gt)",":first-of-typf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding47821837() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("evem","xmk");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining47417989() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("]]?","command");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining22553216() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("?","$>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining70215510() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining(":last-chilc",":contains)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining53269387() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("a","]]?");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining78735534() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("heae","$<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching50262111() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("mati",(Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching55943792() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching(":gt)",(Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching41537077() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("noembee",(Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching95685386() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("https",(Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching75462765() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("<.",(Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching35758988() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("noscrips","*=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching6809652() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("~>",":nth-last-child(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching75582974() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching(":contains'","typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching88457514() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("htto","checkbow");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching52514004() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("!>","tfoou");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan68045265() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(4);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan93707195() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(-100);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan7466723() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(224);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan85468640() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(0);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan99295805() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(240);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan41359486() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(57342);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan96906982() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(224);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan10654092() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(55296);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan28256177() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(400);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan79447113() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(-1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals68056305() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(239);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals57602321() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(191);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals62512507() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(2);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals72561007() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(401);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals22243830() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(-1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText21379623() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("[a-zA-Z_:][-a-zA-Z0-9_:.]*");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText65467688() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("gzip");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText61019820() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("actiom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText11268119() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("tbody");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText40095181() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText(":emptz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText88900753() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("li");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText44091327() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("nobr");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText67178159() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("#texu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText76572311() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText(":nth-of-type)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText71547026() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("action");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText95363070() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText84793721() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText7391472() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText47631441() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText34036376() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText72122751() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("Set-Cookid");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText60701764() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("tabld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText1980687() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText(":not'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText22782248() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("-.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText32213688() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("frameseu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText64078360() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText85407613() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText9899569() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText57644312() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText73778529() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) PoolGenerator.getObjectFromPool("Pattern"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText84952147() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("tfoos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText1920227() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText(":nth-child(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText77644563() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("imagd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText94825850() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("href");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText27834390() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("http-equiu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements63602539() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements99720749() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements24537291() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements12430982() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements52167595() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext50350616() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext3727216() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext32925973() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext9777227() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext34648210() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText52132107() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText62818420() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText30320972() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText78609627() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText11935476() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText88440833() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText99353213() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText15455128() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText13587936() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText301652() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext91001536() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("de");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext77821742() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("basd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext72333106() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text(":emptx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext89031697() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("UTF.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext37716351() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("htmk");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText53252370() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText82482064() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText49722820() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText76424194() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText1792433() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata4912815() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata56371931() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata21474377() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata10363995() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata2495726() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName30340320() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName62717714() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName67630377() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName4784939() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName70715166() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames84563693() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames4986656() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames43571012() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames55135660() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames91681284() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames66460432() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) PoolGenerator.getObjectFromPool("Set<String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames13104002() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) PoolGenerator.getObjectFromPool("Set<String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames8459249() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) PoolGenerator.getObjectFromPool("Set<String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames65075413() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) PoolGenerator.getObjectFromPool("Set<String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames93385776() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) PoolGenerator.getObjectFromPool("Set<String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass85004747() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("charseu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass42846175() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("form");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass40439942() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("!=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass19752714() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("frameses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass7528295() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("buttom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass26877259() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("frameses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass35098581() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("com");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass71378207() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("href");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass46495214() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("plaintexs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass28325007() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass(":has'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass74672018() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("matg");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass68844199() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("com");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass95814756() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("radip");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass37654359() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("caption");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass65796338() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("templatd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass9622450() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("link");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass93804458() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("httq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass54460777() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("text0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass56865833() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("checkbow");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass92706696() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("tq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval57369350() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval21613064() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval41528966() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval18764025() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval96463198() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval48467725() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("*=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval99395232() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("met`");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval12953061() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val(":nth-of-type'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval78565357() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("input");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval74380209() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val(":matchesOwn)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml27127114() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml83367172() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml13921202() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml57159638() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml6257039() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml18563870() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("xmm");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml61993810() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html(":containsData'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml4889516() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("radio");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml1160842() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html(":only-child");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml91375000() {
        Element element = (Element) PoolGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("*");
        PoolGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell42484287() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("namd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell52791154() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell(":nth-last-child(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell83587093() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("checked");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell22492295() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("textareb");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell94375642() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("!<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation94715613() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation70585265() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation11190845() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation33496030() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation5526892() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead22004218() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead39665801() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead28862960() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead48382827() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead94806225() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody85450774() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody38798883() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody44809322() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody39788542() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody72986678() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle7355198() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle55451873() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle77763926() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle74687606() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle21360490() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle65471144() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("th");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle17484670() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("(");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle46970785() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("actioo");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle2199885() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("\"");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle3056842() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("frameseu");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement85107325() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement("$>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement10442599() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement("disablee");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement62628331() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement("radin");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement17072569() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement("deflatd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement80994292() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement("buttoo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise93619015() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise94635402() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise91509697() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise84150893() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise24963448() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset23909276() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) PoolGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset40253599() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) PoolGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset31490371() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) PoolGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset93440503() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) PoolGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset11126902() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) PoolGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset83465358() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset49948579() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset46946551() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset14807984() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset41650982() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement28688164() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement37107326() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement53825397() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement58248231() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement8959571() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement75025064() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement1892870() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement74064477() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement57911046() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement38504932() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings41891606() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings77003347() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings19047809() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings61589908() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings43660527() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings37453391() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) PoolGenerator.getObjectFromPool("OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings49415378() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) PoolGenerator.getObjectFromPool("OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings23152897() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) PoolGenerator.getObjectFromPool("OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings45897005() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) PoolGenerator.getObjectFromPool("OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings8751786() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) PoolGenerator.getObjectFromPool("OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode37607489() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode1814943() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode93669316() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode94709840() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode63288916() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode15665282() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) PoolGenerator.getObjectFromPool("QuirksMode"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode95046939() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) PoolGenerator.getObjectFromPool("QuirksMode"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode2818983() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) PoolGenerator.getObjectFromPool("QuirksMode"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode35836445() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) PoolGenerator.getObjectFromPool("QuirksMode"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode75864391() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) PoolGenerator.getObjectFromPool("QuirksMode"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser3628809() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser17627980() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser56924503() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser47998219() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser750718() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser89533571() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser81592572() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser60135926() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser9290270() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser33562939() {
        Document document = (Document) PoolGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity88573200() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("mati");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity56598536() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity(":only-chilc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity46366053() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("colgrouq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity19761677() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity(":lt'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity68526076() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity(":nth-last-of-type'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity7508208() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity(":matchesOwn(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity94812833() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("dt");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity60483913() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("buttoo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity35607040() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("xmp");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity6378508() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("xml");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName93714860() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("com");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName44813208() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("lj");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName29935486() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("de");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName84448433() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("input");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName53691193() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("href");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName40678709() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("frameset");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName86661442() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("namf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName20806143() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName(":emptz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName79231840() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("iframf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName61926293() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("captiom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName58006568() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("]]>",new int[]{0,-1,55296,192,1,55297,2,3,4});
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName53994064() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("li",new int[]{0,-1,55296,192,1,55297,2,3,4,199,400,1114112,401,57243,224,-99,-100,100,55396,101,102,103,239,240,1114211,500});
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName13903528() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("spam",new int[]{0,-1,55296,192,1,55297,2,3,4,199,400,1114112,401});
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName11371998() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("deflate",new int[]{0,-1,55296,192,1,55297,2,3,4,199,400,1114112,401,57243,224,-99,-100,100,55396,101});
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName50258745() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("#roou",new int[]{0,-1,55296,192,1,55297,2,3,4,199,400,1114112,401,57243,224,-99,-100,100,55396,101,102,103,239,240,1114211,500,187,57342,57343});
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape48619012() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape(":first-child",(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape29833179() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("charset",(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape66265907() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("namf",(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape93310893() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("tc",(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape29420025() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("#texu",(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape44576265() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("xmq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape82536186() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("tfoos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape54386738() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("colgroup");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape49715120() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("noembed");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape34378518() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("input");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape89563808() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("Set-Cookid");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape33644625() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("charses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape83346016() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("frameses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape96846732() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("^=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape43121405() {
        Entities entities = (Entities) PoolGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("bodx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName74780885() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName80731984() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName88287193() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName33629351() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName10868936() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData35813171() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData913842() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData12583986() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData34829103() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData67867647() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData8941682() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("charses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData3264013() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData(":nth-of-type(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData46588077() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData(":nth-last-of-type(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData65046348() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("optgrouo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData61422676() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("titlf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded35462859() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded(":alk","hiddeo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded13805115() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("lj",":has)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded1162192() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("Set-Cookif","charseu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded92991061() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded(":eq)","Set-Cookif");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded80248416() {
        DataNode datanode = (DataNode) PoolGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("rubx",":matchTexu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName20970192() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName71309209() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName72871962() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName6220146() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName37360116() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData5297143() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData91746513() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData83675907() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData10075421() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData12812729() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration35430801() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration84310904() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration19942243() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration78290062() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration13572704() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration10289939() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration71165469() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration72675689() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration88868504() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration23285932() {
        Comment comment = (Comment) PoolGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName42887522() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName29738362() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName43214923() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName22427104() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName25032842() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname90350334() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname73931443() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname7398463() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname51467128() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname62377636() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration16924168() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration53118536() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration95852997() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration63510564() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration27540460() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) PoolGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        PoolGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements27664080() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements9244696() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements17061327() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements97430136() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements31528427() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement89612508() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement40381247() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement31670920() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement76690380() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement89939174() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit70766334() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit18711167() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit55899280() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit11413306() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit91371609() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData13258974() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData77140173() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData83622946() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData69865185() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData45577965() {
        FormElement formelement = (FormElement) PoolGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey57857966() {
        DocumentType documenttype = (DocumentType) PoolGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("imagd");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey84822267() {
        DocumentType documenttype = (DocumentType) PoolGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("meta");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey95613886() {
        DocumentType documenttype = (DocumentType) PoolGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey(":nth-of-type)");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey59008813() {
        DocumentType documenttype = (DocumentType) PoolGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("tr");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey81976947() {
        DocumentType documenttype = (DocumentType) PoolGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("text/");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey28829722() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey14488047() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey87894055() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey87066785() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey4484863() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey37308254() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("isindew");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey56376426() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey(":matches'");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey36552303() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("theae");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey36699133() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("http");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey69874439() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey(":last-of-typd");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue91097677() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue38679196() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue54835098() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue64185845() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue8739950() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue74173092() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("gzio");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue73015852() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("http:0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue77896840() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("*|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue65896701() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue(":first-of-typf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue5923630() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("matg");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml61996056() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml47289101() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml83327294() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml17678742() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml17263126() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded56539455() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("textarea","checkee");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded69076048() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("keygen","cok");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded1357405() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("sarcasn","col");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded47217461() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded(":gt(","\"");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded93649956() {
        Attribute attribute = (Attribute) PoolGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded(":matchTexs","xmq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName25629673() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName94528012() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName62618853() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName50073917() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName88842583() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext9892731() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext543100() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext46451055() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext63326234() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext88606310() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext12827922() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("http:.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext5015870() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("templatf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext36146074() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("hiddeo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext91849697() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("ruby");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext30557720() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("buttom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText23945805() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText9025116() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText98989769() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText13587101() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText41604398() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank20398432() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank92320336() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank69212951() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank94810359() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank41875686() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText58661618() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(57342);
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText79065200() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(239);
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText34760417() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(57342);
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText54555517() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(103);
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText70329885() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(401);
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded794790() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded(":has(","radin");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded9790238() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("colgrouo","isindex");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded36852969() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("h2","styld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded7481994() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded(":eq(","#texs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded68923377() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("boundarx","plaintexu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded14616305() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("<0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded14326619() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("p");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded89743039() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("inpus");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded36848117() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("deflatf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded33676299() {
        TextNode textnode = (TextNode) PoolGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("hreg");
        PoolGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException23858239() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) PoolGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        PoolGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException62031740() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) PoolGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        PoolGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException17064671() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) PoolGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        PoolGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException27033108() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) PoolGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        PoolGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException19846698() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) PoolGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        PoolGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin8127268() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) PoolGenerator.getObjectFromPool("Collection"),":alm");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin5540161() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) PoolGenerator.getObjectFromPool("Collection"),"-.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin54965160() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) PoolGenerator.getObjectFromPool("Collection"),"hree");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin43010243() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) PoolGenerator.getObjectFromPool("Collection"),"ode");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin48789825() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) PoolGenerator.getObjectFromPool("Collection"),"checked");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin26004817() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) PoolGenerator.getObjectFromPool("Iterator"),"href");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin76451733() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) PoolGenerator.getObjectFromPool("Iterator"),"boundarx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin91962384() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) PoolGenerator.getObjectFromPool("Iterator"),"basd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin53085749() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) PoolGenerator.getObjectFromPool("Iterator"),"actiom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin21263829() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) PoolGenerator.getObjectFromPool("Iterator"),"hree");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin21276770() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex"},"td");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin77739877() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm"},"tfoot");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin57529965() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root","US-ASCIH","http:/","http:.","US-ASCIJ","noembec","US-ASCII","http:0","noscrips","noscript","noscripu","optioo","optiom","option","boundary","boundarz","img","boundarx","imf","imh","link"},"imagd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin48096833() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs"},"imagd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin8339152() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root","US-ASCIH","http:/","http:.","US-ASCIJ","noembec","US-ASCII","http:0","noscrips","noscript","noscripu","optioo","optiom","option","boundary","boundarz","img","boundarx","imf","imh","link","linl","linj","basefont","basefonu","head","heae","nobs","nobr","nobq"},"th");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding99485442() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(1114112);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding65645499() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(400);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding55958160() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(239);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding84756675() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(500);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding37927844() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(192);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank84820335() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("keygeo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank13906198() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("checked");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank61302854() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("name");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank2915487() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("*>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank41920471() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("br");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric34351037() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("bgsoune");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric32628737() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("form");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric87583304() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric(":matchText");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric68080389() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("optgrouq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric49454721() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("tabld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace16953384() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace39709143() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(100);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace40384078() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(101);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace95741926() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(1114211);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace67043442() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(187);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace35392613() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(55396);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace31822273() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(102);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace90985995() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(2);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace33843726() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(401);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace66552515() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(3);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar9057888() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(199);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar24634249() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(3);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar23902572() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar83072089() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(55396);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar45033843() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(1114211);
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace14779876() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("[CDATA[");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace39287298() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("#roou");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace64106873() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("templatf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace90128888() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("Set-Cookif");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace69778232() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace(":matches'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace34775945() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"),"$<",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace82343249() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"),"buttoo",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace98065411() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"),"#texu",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace28624289() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"),"captiom",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace61572435() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"),":nth-last-child(",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin59884521() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("gzio",":root");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin29866108() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("bgsounc","actioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin23818900() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("basefont",":matchTexs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin60157309() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("basefons","frameset");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin39534636() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("]]=","imagd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted49842770() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("commanc",new String[]{":last-of-typd",":last-of-type",":last-of-typf"});
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted72663061() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("tabld",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden"});
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted63290770() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("http:.",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos"});
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted60156943() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("$<",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https"});
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted89264988() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("basefont",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid"});
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve29491359() throws Exception {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) PoolGenerator.getObjectFromPool("URL"),"com");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve97740598() throws Exception {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) PoolGenerator.getObjectFromPool("URL"),"plaintext");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve48728952() throws Exception {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) PoolGenerator.getObjectFromPool("URL"),"base");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve839891() throws Exception {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) PoolGenerator.getObjectFromPool("URL"),"metb");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve26520611() throws Exception {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) PoolGenerator.getObjectFromPool("URL"),"xmo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve48522148() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("deflate",":containsOwn(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve85104946() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("noembec","DOCTYPF");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve73827436() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("htmk","Set-Cookid");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve19020963() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("frameses","xmk");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve30374578() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("h4","httpr");
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder65343982() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder69921099() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder16771899() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder80211411() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder15102122() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder47063792() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder52472298() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder6401916() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder93455240() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder96858811() {
        StringUtil stringutil = (StringUtil) PoolGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) PoolGenerator.getObjectFromPool("StringBuilder"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase44631971() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("buttoo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase1438019() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase(":matchTexu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase68047149() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase(":gt'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase47364403() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("metb");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase45286436() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase(":first-chile");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize18895342() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("tfoou");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize17817896() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("scrips");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize99692783() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("titlf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize8992261() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize(":containsData'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize59306818() {
        Normalizer normalizer = (Normalizer) PoolGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("sarcasl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap90981321() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) PoolGenerator.getObjectFromPool("InputStream"),0,57342);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap14363247() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) PoolGenerator.getObjectFromPool("InputStream"),57343,199);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap60612491() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) PoolGenerator.getObjectFromPool("InputStream"),55396,-1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap98753986() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) PoolGenerator.getObjectFromPool("InputStream"),500,239);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap16651994() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) PoolGenerator.getObjectFromPool("InputStream"),101,239);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer35271401() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(240);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer28742251() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(57343);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer21683056() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(57342);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer55052788() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(0);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer55076788() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(55296);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout51751113() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(0,1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout83207971() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(0,100);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout76410983() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(1,100);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout96924596() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(-1,-100);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout22685548() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) PoolGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(0,0);
        PoolGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse5376432() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":nth-child)","#texu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse39420795() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":matchesOwn'","template");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse44703834() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":eq'",":emptz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse76709718() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("disablec","xmo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse26562862() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("noscript","captiom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse30841809() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("body","hiddeo",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse47384482() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("commane","tc",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse34760357() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("imh","imh",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse63265850() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("actiom",":nth-last-child'",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse46879219() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":matchesOwn(","ds",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse36534132() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":root");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse93245947() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":contains'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse29384437() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("hr");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse94676074() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("xmq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse10674884() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("matg");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect15657986() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("td");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect96724074() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect97292658() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("noscript");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect7952217() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("commanc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect13946203() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect(":lt(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse73164934() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"captiom","htto");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse93323436() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"boundarx",":matchTexu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse91976841() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),":root","inpus");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse49764661() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"a","sarcasm");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse88249645() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"bs",":roou");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse14359679() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"svh");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse4192371() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"colgroup");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse68858121() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"h1");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse5335514() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),"*<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse65431972() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) PoolGenerator.getObjectFromPool("File"),":nth-last-child(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse64139424() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"table",":last-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse6893803() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"boundarx",":not'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse56968582() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"htmk","US-ASCIH");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse15996076() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),":nth-of-type(","http:.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse85489984() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"h6","hr");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse14890925() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"#root","</",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse2866262() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"lj","keygen",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse57310826() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"DOCTYPF","US-ASCIJ",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse8133385() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"spam","--",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse88388072() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"]]>","link",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment71413626() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("textareb","-,");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment55652284() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("radip","command");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment11703837() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("even","noscripu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment26297841() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("tablf","US-ASCIJ");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment65177321() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("#","DOCTYPD");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment53534527() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("#");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment18138362() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment(";");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment89614101() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment(":first-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment48786032() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("buttoo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment90248829() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("^>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse59780051() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) PoolGenerator.getObjectFromPool("URL"),3);
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse12431549() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) PoolGenerator.getObjectFromPool("URL"),500);
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse90000169() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) PoolGenerator.getObjectFromPool("URL"),100);
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse68902872() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) PoolGenerator.getObjectFromPool("URL"),239);
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse83014250() throws Exception {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) PoolGenerator.getObjectFromPool("URL"),400);
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean40068222() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("http:/","plaintexs",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean18520629() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("deflatf","#root",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean60454571() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("text0","imh",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean74612629() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("dd","noframet",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean50793323() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("xmp","httpr",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean26546407() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("-.",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean16017886() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(":nth-of-type(",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean54496699() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("*",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean55898372() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(":first-of-typf",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean35139039() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(":matchesOwn(",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean6671636() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("disablec","frameses",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean88379410() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("(","noframer",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean96871328() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(":gt)","checkbow",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean69308260() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("h3","DOCTYPF",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean24582824() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("iframd","nobq",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) PoolGenerator.getObjectFromPool("Document.OutputSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid23482853() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("sarcasn",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid42412761() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("http-equiv",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid32591610() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("basefonu",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid53859933() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("p",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid1713493() {
        Jsoup jsoup = (Jsoup) PoolGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("h4",(Whitelist) PoolGenerator.getObjectFromPool("Whitelist"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput96697088() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("base","body");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput85273178() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("hree",":lt)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput6249583() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("bodz",":eq'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput32162076() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("h2","h1");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput95934796() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("-,",":containsOwn(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput70259055() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) PoolGenerator.getObjectFromPool("Reader"),"style");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput62543683() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) PoolGenerator.getObjectFromPool("Reader"),"#root");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput3330972() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) PoolGenerator.getObjectFromPool("Reader"),"keygem");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput41366279() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) PoolGenerator.getObjectFromPool("Reader"),"templatd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput2631064() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) PoolGenerator.getObjectFromPool("Reader"),"boundarz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput53684424() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("httq",(Element) PoolGenerator.getObjectFromPool("Element"),":all");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput349914() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput(":nth-last-of-type'",(Element) PoolGenerator.getObjectFromPool("Element"),"#");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput46627746() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput(":not)",(Element) PoolGenerator.getObjectFromPool("Element"),"$<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput69925846() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("templatf",(Element) PoolGenerator.getObjectFromPool("Element"),"textareb");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput95906266() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("!=",(Element) PoolGenerator.getObjectFromPool("Element"),"style");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors23376709() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors37141086() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors26151085() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors53069980() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors62234735() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors67021406() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(191);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors83733378() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(500);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors67324002() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(2);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors22365639() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(401);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors30299654() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(103);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors77222033() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors30524765() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors87434727() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors88310027() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors80460979() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings85938247() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings65662171() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings64115829() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings62328153() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings78786131() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings91170742() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings10574844() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings77543460() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings28031967() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings71616737() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse94826448() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("?",":nth-last-child)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse52532546() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("forl","svh");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse70100618() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse(":gt(","inpus");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse80113804() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("#","textare`");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse12214579() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("commanc","ruby");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment23263683() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("bgsound",(Element) PoolGenerator.getObjectFromPool("Element"),"http:.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment6308209() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment(":nth-child)",(Element) PoolGenerator.getObjectFromPool("Element"),"*}");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment73007962() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("buttoo",(Element) PoolGenerator.getObjectFromPool("Element"),"href");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment67396693() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("keygeo",(Element) PoolGenerator.getObjectFromPool("Element"),"US-ASCII");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment89375787() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("UTF,",(Element) PoolGenerator.getObjectFromPool("Element"),"#");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment9174382() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("even",(Element) PoolGenerator.getObjectFromPool("Element"),"!=",(ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment29982167() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("typd",(Element) PoolGenerator.getObjectFromPool("Element"),"#root",(ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment15497393() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("eveo",(Element) PoolGenerator.getObjectFromPool("Element"),"script",(ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment69297413() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("\"",(Element) PoolGenerator.getObjectFromPool("Element"),"frameseu",(ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment37547359() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("disabled",(Element) PoolGenerator.getObjectFromPool("Element"),"dd",(ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment92015089() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment("tbody","plaintexu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment34909849() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment("checkbox","style");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment21084674() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment("col","isindey");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment35363033() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment(".","hiddeo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment33662899() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment(":matchTexu",".");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment15496132() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("tabld","style");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment6724469() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("xmo","abs;");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment98090183() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("[a-zA-Z_:][-a-zA-Z0-9_:.]*",":containsData)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment69573643() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("ti","eveo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment72800581() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("checkboy","commane");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities10104493() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("tg",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities52283471() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("Set-Cookie",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities24224395() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("gzio",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities68954009() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("h0",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities71593377() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("action",true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed60074928() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed(":matches(","\"\"");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed13152261() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("[CDATA[",":not(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed63434881() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("tfoou","xml");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed4262344() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("</","rubx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed96411292() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("tabld","bgsound");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser32904157() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser23711734() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser52805957() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser66689600() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser11817836() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser88404127() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser64024940() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser55696052() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser69990346() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser84671695() {
        Parser parser = (Parser) PoolGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName33793582() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName61390550() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName8021542() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName26014892() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName25054226() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName39810663() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName44337170() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName49821702() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName51664768() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName23370369() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf54666643() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("type",(ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf94194362() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("theac",(ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf13055087() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("h2",(ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf50248988() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("theac",(ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf22637703() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("html",(ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf39263638() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("scrips");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf40203834() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("checked");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf6751144() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("gziq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf7870389() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("tq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf65979007() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf(":emptz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock29171773() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock22772327() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock25026462() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock81442559() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock67936260() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock64904449() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock33409380() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock32725670() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock67562737() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock29118908() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock73853953() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock86062074() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock75842667() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock63932227() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock49848593() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline18684040() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline31821660() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline9275592() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline18910336() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline21558653() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData23162407() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData7126308() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData121011() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData31783397() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData36272832() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty58446604() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty59973839() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty78489535() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty82358152() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty82867216() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing71694566() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing24821566() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing11282145() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing61292992() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing13672515() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag2834814() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag29281281() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag77994577() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag80552113() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag38020933() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag11430271() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("http:.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag82484555() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag(":matchTexu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag54617127() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("tablf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag65127457() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("http-equiw");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag31820020() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag(":only-of-typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace52529213() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace86614435() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace84820222() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace40488388() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace68542748() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed50282323() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed64065673() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed73031455() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed16075596() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed72435326() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable34663298() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable73129760() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable78659735() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable2179240() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable14651711() {
        Tag tag = (Tag) PoolGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage15836893() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage40932992() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage64771665() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage91276389() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage13103832() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition22347372() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition53073057() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition80396021() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition27992012() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition75002227() {
        ParseError parseerror = (ParseError) PoolGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking60743645() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking5813870() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking63830503() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking66788759() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking48645268() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking232501() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(401);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking71189024() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(3);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking17066202() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(101);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking57023225() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(500);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking814286() {
        ParseErrorList parseerrorlist = (ParseErrorList) PoolGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(191);
        PoolGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos69921414() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos48484567() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos55534208() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos95216451() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos52171409() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty81193922() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty8887626() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty84946134() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty8971502() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty19509480() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent6703958() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent393628() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent62709518() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent73448523() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent54176506() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance90563692() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance70169091() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance30194546() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance63881465() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance72710543() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo54481670() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('9');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo1984167() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('`');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo55735851() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('f');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo27465305() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('0');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo34272778() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('g');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny86878236() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny(']');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny16904437() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('e');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny13295137() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('f');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny21361767() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('G');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny12189292() {
        CharacterReader characterreader = (CharacterReader) PoolGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('{');
        PoolGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload8229703() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) PoolGenerator.getObjectFromPool("File"),"nobs","ts");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload86327934() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) PoolGenerator.getObjectFromPool("File"),":containsData)","linl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload80769699() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) PoolGenerator.getObjectFromPool("File"),"frameses","UTF.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload41545207() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) PoolGenerator.getObjectFromPool("File"),"image","lj");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload34853481() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) PoolGenerator.getObjectFromPool("File"),"\"","linl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload64911747() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"text0","hq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload64075849() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),":emptx","style");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload14686818() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"optgrouq","thead");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload2471808() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"scrips",":first-child");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload67091263() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"selecs","tbody");
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload53594260() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"*<",":nth-child)",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload84794975() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"tfoot",":containsOwn)",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload53350673() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"*|","checkboy",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload93269688() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"https",":nth-last-of-type(",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload3881281() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) PoolGenerator.getObjectFromPool("InputStream"),"p","US-ASCIH",(Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer87420727() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) PoolGenerator.getObjectFromPool("InputStream"),401);
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer14460779() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) PoolGenerator.getObjectFromPool("InputStream"),239);
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer47940274() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) PoolGenerator.getObjectFromPool("InputStream"),3);
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer46162252() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) PoolGenerator.getObjectFromPool("InputStream"),199);
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer3971027() throws Exception {
        DataUtil datautil = (DataUtil) PoolGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) PoolGenerator.getObjectFromPool("InputStream"),-1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull63903784() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull95017845() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull10988415() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull5558033() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull39754989() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull25270800() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"),"optioo");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull99808462() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"),"h0");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull61672980() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"),"colgroup");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull382920() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"),"checkec");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull59393762() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) PoolGenerator.getObjectFromPool("Object"),":matches'");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue813400() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue74708821() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue46104012() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue45257905() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue10139066() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue5048522() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"noframer");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue15940808() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"#roos");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue28984356() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"xmk");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue71096305() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"DOCTYPD");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue85547213() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"nobq");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse40922459() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse54577677() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse36983123() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse97101167() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse98084354() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse35348945() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,".");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse50948219() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"basd");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse14296597() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"gzip");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse94855705() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,":first-of-type");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse21494997() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"text/");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements78290340() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements10291624() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements57182215() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements74046535() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements57186784() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements14467839() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"),"gziq");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements32926966() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"),"gzio");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements54400634() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"),"svh");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements71297953() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"),"]]=");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements45304416() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) PoolGenerator.getObjectFromPool("Object[]"),":matchesOwn(");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty73492368() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty(":containsOwn(");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty92983852() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("bgsound");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty86786218() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("disablee");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty1910322() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("tablf");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty61995753() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("^");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty15905046() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("US-ASCIJ","svf");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty34455941() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty(":empty","boundarx");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty78855675() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty(":emptx","noembee");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty40712719() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("th",":not)");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty47900349() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("textarea",":only-of-typd");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail73847814() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("plaintexu");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail57393441() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("htmk");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail10907507() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail(":alm");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail59650400() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("com");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail32262604() {
        Validate validate = (Validate) PoolGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("radin");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect15206891() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect("boundary");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect93849362() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect(":first-of-typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect37938358() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect(":contains)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect63603958() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect(":alm");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect47649838() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect("frameseu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect72131552() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect55915805() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect13275116() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect57508161() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect52845666() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl11284355() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl71978846() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl20640286() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl46649819() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl85297274() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) PoolGenerator.getObjectFromPool("URL"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl32662995() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("spam");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl83887282() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("forn");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl76060494() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url(":has(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl116209() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("-.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl81176753() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("httpt");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy2189366() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) PoolGenerator.getObjectFromPool("Proxy"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy32246417() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) PoolGenerator.getObjectFromPool("Proxy"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy22695781() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) PoolGenerator.getObjectFromPool("Proxy"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy62245523() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) PoolGenerator.getObjectFromPool("Proxy"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy48496480() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) PoolGenerator.getObjectFromPool("Proxy"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy98187384() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("[a-zA-Z_:][-a-zA-Z0-9_:.]+",401);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy28062226() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("option",191);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy82523585() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("odc",57343);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy97731541() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("]]?",224);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy52579539() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("dt",240);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent17277672() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("http-equiv");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent15286177() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("de");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent93467402() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("radip");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent44937476() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent(":emptz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent27037518() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("titld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout12441394() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(4);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout91392502() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(224);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout61729905() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(240);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout56475613() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(57243);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout85023297() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(-100);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize6814356() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(-1);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize44181787() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(0);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize80575846() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(103);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize35344643() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(1114112);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize20960276() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(1114211);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects21218431() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects24280083() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects88529078() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects83483886() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects25414942() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer17353221() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("basd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer70285643() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("h3");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer65865225() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("!=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer49497173() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer(":emptx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer52848832() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("noembed");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod71889563() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) PoolGenerator.getObjectFromPool("Method"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod5020662() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) PoolGenerator.getObjectFromPool("Method"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod23945537() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) PoolGenerator.getObjectFromPool("Method"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod28399821() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) PoolGenerator.getObjectFromPool("Method"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod8466262() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) PoolGenerator.getObjectFromPool("Method"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors6912225() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors39159118() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors43357622() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors91832597() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors87467836() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType55192437() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType50133301() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType45099319() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType57441580() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType74710692() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata16834728() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("http-equiw","UTF,");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata85077197() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("a","hree");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata44590814() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("Set-Cookid",":matchesOwn)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata72059949() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data(":matches)","$>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata84776001() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data(":last-child","metb");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory88056576() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) PoolGenerator.getObjectFromPool("SSLSocketFactory"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory53097291() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) PoolGenerator.getObjectFromPool("SSLSocketFactory"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory24993618() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) PoolGenerator.getObjectFromPool("SSLSocketFactory"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory64974616() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) PoolGenerator.getObjectFromPool("SSLSocketFactory"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory20950005() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) PoolGenerator.getObjectFromPool("SSLSocketFactory"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata44717693() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("*{","htmk",(InputStream) PoolGenerator.getObjectFromPool("InputStream"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata99742093() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data(":matchTexs","optiom",(InputStream) PoolGenerator.getObjectFromPool("InputStream"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata77035828() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("titld","type",(InputStream) PoolGenerator.getObjectFromPool("InputStream"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata65614260() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("xmo","image",(InputStream) PoolGenerator.getObjectFromPool("InputStream"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata31453063() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("DOCTYPE","gzip",(InputStream) PoolGenerator.getObjectFromPool("InputStream"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata24477409() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata17800628() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata2734516() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata72758474() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata62904378() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata95747239() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) PoolGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata21038823() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) PoolGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata79062385() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) PoolGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata94298239() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) PoolGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata15055523() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) PoolGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata61347501() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("tfoos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata78747314() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("iframf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata27142468() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("iframd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata60019208() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("DOCTYPE");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata78469239() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody19959020() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody("col");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody60833196() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody("h1");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody86070351() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody(":nth-of-type)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody74392858() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody(":first-of-typf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody65715959() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody(":first-chile");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader84499066() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("colgroup","h0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader85542907() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("inpus","theae");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader67300237() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("evem","action");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader47258724() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("frameses",":all");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader7371336() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("textare`","head");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders84527660() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders77639989() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders4969107() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders60564729() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders36065365() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie68375205() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie("tfoot","hidden");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie41406731() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie("US-ASCIJ","lj");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie29767552() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie("xml","htmm");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie70540021() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie("namd","captioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie5718562() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie(":first-chile",":only-of-typf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies94004206() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies63704485() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies46733525() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies11644107() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies31787030() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) PoolGenerator.getObjectFromPool("Map<String, String>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser11236602() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser60073862() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser14250711() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser47299728() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser95151183() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) PoolGenerator.getObjectFromPool("Parser"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget95324389() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget7765457() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget84382527() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget78111891() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget41496211() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost24723753() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost97724994() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost68295352() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost51627970() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost96539820() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute2424452() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute76627545() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute21118822() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute7839030() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute47201689() throws Exception {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest58076038() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest95397151() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest28881934() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest42104634() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest85684408() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest89587554() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) PoolGenerator.getObjectFromPool("Connection.Request"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest22008959() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) PoolGenerator.getObjectFromPool("Connection.Request"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest17900829() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) PoolGenerator.getObjectFromPool("Connection.Request"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest67084834() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) PoolGenerator.getObjectFromPool("Connection.Request"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest44835017() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) PoolGenerator.getObjectFromPool("Connection.Request"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse33381162() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse67145350() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse10726008() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse17871416() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse44544469() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse10244290() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) PoolGenerator.getObjectFromPool("Connection.Response"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse83723351() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) PoolGenerator.getObjectFromPool("Connection.Response"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse35627320() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) PoolGenerator.getObjectFromPool("Connection.Response"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse76374523() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) PoolGenerator.getObjectFromPool("Connection.Response"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse75852848() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) PoolGenerator.getObjectFromPool("Connection.Response"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset10545295() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("[CDATA[");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset43474426() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("tbodz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset44566659() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("math");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset87524605() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("hr");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset40612330() {
        HttpConnection httpconnection = (HttpConnection) PoolGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("#roos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup8763193() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = (Document) w3cdom.fromJsoup((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup97374404() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = (Document) w3cdom.fromJsoup((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup1015567() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = (Document) w3cdom.fromJsoup((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup75914270() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = (Document) w3cdom.fromJsoup((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup80917201() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = (Document) w3cdom.fromJsoup((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert35335710() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) PoolGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert70725322() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) PoolGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert42165664() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) PoolGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert96790186() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) PoolGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert18439072() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) PoolGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString43591802() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString88692832() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString56549314() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString83712933() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString86966990() {
        W3CDom w3cdom = (W3CDom) PoolGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((org.w3c.dom.Document) PoolGenerator.getObjectFromPool("org.w3c.dom.Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty78720958() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty88809662() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty80956549() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty1955033() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty99039859() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek7481650() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek72255178() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek54547804() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek38441264() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek28709816() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst22961838() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('G');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst34338250() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('G');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst71024831() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('A');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst66789455() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('A');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst40134520() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst(']');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst85387779() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("template");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst59835975() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst(":contains(");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst26766611() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("[a-zA-Z_:][-a-zA-Z0-9_:.])");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst61403825() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("type");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst50596686() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("scripu");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches15138053() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches(":first-chilc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches371946() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("plaintexu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches70519184() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("abs:");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches55512593() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("http:.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches39390569() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("boundary");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS2400516() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS(":lt)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS85828406() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("US-ASCII");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS97221588() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("textareb");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS88853380() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("even");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS23081686() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS(":containsData'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny82281478() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny(":first-child");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny7193661() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("disablee");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny92307594() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("[a-zA-Z_:][-a-zA-Z0-9_:.])");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny37179629() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("hiddem");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny76166114() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("imf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny5014418() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny(',');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny14309792() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('a');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny9647382() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('A');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny65310117() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny(':');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny41089497() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny(')');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag24829157() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag41074509() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag47789161() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag62071534() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag52744562() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp91444858() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("nobs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp44249101() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("UTF-");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp96407998() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("bodx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp17275041() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("scrips");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp3507700() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("UTF.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace54479016() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace91518022() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace81534515() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace89376536() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace45659190() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord10675283() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord51481035() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord27999255() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord99188117() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord9362884() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance91062391() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance13536359() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance28163746() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance54417637() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance62774143() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume63835645() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume51478919() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume63156289() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume42502472() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume74652029() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume77869558() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume("]]>");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume73010775() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume("US-ASCIH");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume46206618() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume(":matchesOwn'");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume75014405() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume("bgsounc");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume1337636() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume("ds");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo8500218() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("httq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo8344281() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("dc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo98498117() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("http:0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo6056120() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("meta");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo46617078() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("~=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase5085986() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("ruby");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase47217435() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("odd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase46353514() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("templatd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase70942831() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("]]=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase89885600() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("action");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny30092480() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("basefons");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny33681896() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny(";");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny14264214() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny96310700() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("httq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny34127902() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny(":contains(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo55123729() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo("titlf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo23305859() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo("keygen");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo73710996() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo("*|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo13046171() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo("inpus");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo78769849() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo(":nth-last-child'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase10087876() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("tbodz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase28311285() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("h4");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase43989070() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase(":last-chilc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase12764331() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("inpus");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase96845227() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("isindey");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced72976383() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('z','q');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced2875711() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced(')','0');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced4555613() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('A','A');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced97214674() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced(',','@');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced7513537() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('=','`');
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape6868414() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape(":nth-last-of-type(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape18215725() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape("~<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape87762960() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape("th");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape86653642() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape("noembee");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape3619273() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape(":has'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace79051481() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace62222540() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace36467599() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace97062919() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace18500321() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord36005519() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord59785410() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord16496687() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord63396764() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord34806622() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName28762327() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName78746068() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName38769048() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName45720784() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName17517427() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector65885633() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector65841329() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector6316318() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector73930462() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector3397376() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier42010545() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier19113700() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier78577241() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier38822749() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier99522480() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey48657298() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey96200324() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey985157() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey12149325() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey79995633() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder32136066() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder17213735() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder35257834() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder51687245() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder53476293() {
        TokenQueue tokenqueue = (TokenQueue) PoolGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        PoolGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase59079543() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase26872098() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase17225102() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase44438642() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase80961501() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase86619675() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase82723317() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase81920772() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase20970310() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase52584323() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag37514137() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("text.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag1825916() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("optioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag55918274() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("htto");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag88495263() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag(":matchesOwn(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag50031509() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("frameses");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute69007202() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("theae");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute52215212() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("checkbow");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute88765565() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("bgsoune");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute85944141() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("tbody");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute59158540() {
        ParseSettings parsesettings = (ParseSettings) PoolGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("#root");
        PoolGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean40074871() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean22208887() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean90300641() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean70174878() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean78230531() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid81168394() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid3127185() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid80243604() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid29324330() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid92026180() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) PoolGenerator.getObjectFromPool("Document"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml80605436() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml(":gt'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml38325979() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("tbodz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml52308960() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("tfoot");
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml2314624() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("span");
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml6327206() {
        Cleaner cleaner = (Cleaner) PoolGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml(":contains'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone44723199() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone3188398() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone30988240() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone84159597() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone74186149() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText16273381() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText54863431() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText29021130() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText3610792() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText27627878() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic30163939() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic39816308() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic87038122() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic86940341() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic40652289() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages89001446() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages88224237() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages23649433() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages14937253() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages89934860() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed22685205() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed83733682() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed28195180() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed42311285() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed61689269() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags85023721() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("table");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags37847480() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags(":last-chilc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags324791() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("*|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags25801561() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("*|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags47123882() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags64312902() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("boundary");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags73293066() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags(".");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags9249528() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("*=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags16540819() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("text0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags56194827() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("optgroup");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes51376181() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("noembee","imagf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes36660815() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("img","UTF-");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes43380577() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes(":last-chile","templatd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes45000055() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("tbodz",":only-child");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes40779518() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("iframf",":has)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes34853597() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes("imh","actioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes97434730() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes("body","boundarx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes1874432() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes("~=","httq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes2598017() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes(":matchText","https");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes70143112() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes(":matches)","optgrouo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute59157494() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("select",":nth-last-child)","httq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute76105679() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute(":lt)","~>","style");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute54726741() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("bgsound","abs;",":matchTexu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute53332560() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("theac","h2","DOCTYPE");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute26723871() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("even","http:.","te");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute54134513() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute("radin","ode");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute12957440() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute(":not)",":alk");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute18913933() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute("#texs","rubx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute66061232() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute("te","checkee");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute14147911() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute("tbodz",":nth-child)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks88660165() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks21872681() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks10517102() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks49017611() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks68240675() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols84312137() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("hree","actioo","namf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols22810877() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("]]=","dt","ds");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols17444949() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("mati","Set-Cookie","select");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols94042245() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("httpr","checkboy","tfoot");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols60325249() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("http",":nth-of-type)","*=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols83437704() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("even","<0","col");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols97578783() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("thead","plaintext","DOCTYPD");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols80051827() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("sarcasm","[CDATA[","frameseu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols72871097() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("name","[a-zA-Z_:][-a-zA-Z0-9_:.])","style");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols90684132() {
        Whitelist whitelist = (Whitelist) PoolGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("bgsound",":empty",":nth-last-child)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain28823621() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main(":alk");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain81004039() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("http");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain53086927() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("deflate");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain15370487() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main(":last-of-type");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain92110578() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main(":roou");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText32602727() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText87640179() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText75089514() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText30256545() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText71473448() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) PoolGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain54250593() throws Exception {
        Wikipedia wikipedia = (Wikipedia) PoolGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","["});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain82236942() throws Exception {
        Wikipedia wikipedia = (Wikipedia) PoolGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain99979219() throws Exception {
        Wikipedia wikipedia = (Wikipedia) PoolGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain11058343() throws Exception {
        Wikipedia wikipedia = (Wikipedia) PoolGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\""});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain76334872() throws Exception {
        Wikipedia wikipedia = (Wikipedia) PoolGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain10958715() throws Exception {
        ListLinks listlinks = (ListLinks) PoolGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains("});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain99649667() throws Exception {
        ListLinks listlinks = (ListLinks) PoolGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root","US-ASCIH","http:/","http:.","US-ASCIJ","noembec","US-ASCII","http:0","noscrips","noscript","noscripu"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain23989660() throws Exception {
        ListLinks listlinks = (ListLinks) PoolGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA["});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain49159361() throws Exception {
        ListLinks listlinks = (ListLinks) PoolGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain97989202() throws Exception {
        ListLinks listlinks = (ListLinks) PoolGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType95185759() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType86876438() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType13865208() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType38969753() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType20590285() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl65114694() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl53376793() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl87339561() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl7516508() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl70274310() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) PoolGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode85265090() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode56482414() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode84778571() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode35577535() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode78500898() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl60982830() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl44845492() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl28601860() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl25767469() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl27392031() {
        HttpStatusException httpstatusexception = (HttpStatusException) PoolGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        PoolGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse73161398() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse40058301() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse45437683() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse94495624() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse6451094() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse47412386() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse79369438() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse72991868() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse92360916() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse95128448() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Node) PoolGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse78462627() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse84119298() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse34128966() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse72926309() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse61304566() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter51155451() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter13775423() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter15098070() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter45597038() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter26191834() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Node) PoolGenerator.getObjectFromPool("Node"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter97283012() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter88306269() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter43531463() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter7537273() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter47584765() {
        NodeTraversor nodetraversor = (NodeTraversor) PoolGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"),(Elements) PoolGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect59570919() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect74030158() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect12586900() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect84541858() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect87525003() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst45646120() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst26132207() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst895214() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst62436405() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst79933297() {
        Collector collector = (Collector) PoolGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr11388425() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("ode");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr47420771() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("Set-Cookid");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr8588100() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr(":emptx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr23987334() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("tbodx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr19954568() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("noframer");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr50386897() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr(":matches(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr61251050() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("basefonu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr64963423() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr(":has(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr27539768() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("lj");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr98348705() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("^<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr53989946() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("#");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr47546927() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("keygen");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr96065355() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("bq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr20694014() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr(":nth-of-type)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr3415838() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("sarcasm");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr67809691() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr(":last-of-typd","htmk");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr35772303() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr(":only-chilc","tr");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr73495847() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr(":matchText",":alk");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr48271404() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr(":only-of-typf","radio");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr18285669() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr(":last-child","titlf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr9531126() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("radip");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr2375073() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr(":matches'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr19906851() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("tabld");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr58013351() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("httpt");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr27845653() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("imh");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass46924234() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("svg");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass13977342() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("~=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass57715145() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("httpt");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass83235285() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("^<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass79903071() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("lj");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass23140854() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass(":has(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass42111257() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass(":roos");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass35698041() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("th");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass39842566() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("DOCTYPD");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass89692000() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass(":contains)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass70536430() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("*|");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass36912767() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("-,");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass8509534() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("forn");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass70464921() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("met`");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass19942223() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("h2");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass52997990() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("tbodz");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass59132673() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("ode");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass14755521() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("tr");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass23020606() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass(":lt)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass18115737() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("$=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval49383452() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval93132747() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval51751512() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval52711601() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval72910640() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval58667895() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("$>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval89780502() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val(":has'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval35585065() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val(":eq'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval62499376() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val(":nth-last-of-type'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval87849085() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext94214225() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext16264054() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext92595536() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext16434821() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext6949373() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText11452243() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText75989804() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText32310677() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText60677177() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText27015846() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText50179307() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText39261820() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText13108144() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText56300774() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText70495950() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml23429146() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml30761891() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml28569418() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml43737436() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml28608447() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml1519673() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml405110() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml68534638() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml34182682() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml26218578() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName7968821() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName(":containsOwn'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName97515609() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("*>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName37784992() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("xmm");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName72334042() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("hq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName16665542() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("tfoou");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml21357004() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("$<");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml25467824() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("h6");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml56784100() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html(":emptx");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml46559813() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("</");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml27190822() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("form");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend74804186() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend(":has)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend43588932() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend(":containsOwn'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend85136053() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend("xml");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend11068222() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend("optioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend93913738() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend("tc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend57381780() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append(":nth-last-of-type(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend64700299() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("hs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend99486472() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("*=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend82120735() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("ruby");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend26702139() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("plaintext");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore13048872() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("theac");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore63100013() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("option");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore15056248() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("http:.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore33603326() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before(":contains'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore65941518() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("tfoou");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter64006101() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("h1");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter20308770() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("#texu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter70681002() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("thead");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter9649871() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("sarcasn");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter12750160() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after(":matchesOwn(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap7325935() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("action");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap91847318() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("head");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap79347951() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("optgrouq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap54390703() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("commanc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap67129489() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("nobs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap81728066() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap19225345() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap10065106() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap7151480() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap97535525() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty99507018() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty85687055() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty56405965() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty55086316() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty69798253() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove20537804() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove65603072() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove24258629() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove9361249() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove57414906() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect26501689() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("#text");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect69548615() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("http:0");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect15185671() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("tablf");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect52810050() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("templatd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect84329054() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("-.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot4355205() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("optgrouo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot30314545() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("nobq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot91641752() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("span");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot6525327() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("colgrouo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot91818296() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not(":nth-of-type(");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq56462663() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(-100);
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq50568756() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(-100);
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq16074197() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(55297);
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq65811190() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(0);
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq48995793() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(100);
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis37180795() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is("noscript");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis40820425() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is("noframes");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis9457564() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is("optgrouq");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis89235383() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is(":first-of-typd");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis86958575() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is("hs");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext72016973() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext70109803() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext16914961() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext4438636() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext11880674() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext61431706() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("Set-Cookie");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext49441740() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("sarcasl");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext62132265() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next(":not)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext55405583() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("^=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext26348424() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("^");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll10523896() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll64350373() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll7348576() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll61532() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll17759419() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll22233411() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("actioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll90707450() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("~=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll83065334() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("linj");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll1161606() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("htmm");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll35983499() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll(":contains'");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev53351104() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev99211979() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev85119518() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev54016324() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev62026952() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev42639470() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("captiom");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev14065417() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("eveo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev43802447() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("de");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev90771670() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("-.");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev9459731() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("keygen");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll60163916() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll65717078() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll7315116() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll71519149() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll51967253() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll65100221() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll("$>");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll59642360() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll("selecu");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll88109195() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll("eveo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll69918056() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll("~=");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll70805119() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll(":first-of-type");
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents29773137() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents36043179() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents40635602() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents68877528() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents14828382() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst25790417() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst70269579() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst60722275() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst9307893() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst41330081() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast72707218() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast86219234() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast61020248() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast84701796() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast1919263() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse42192533() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse29578693() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse83633652() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse64247590() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse69612830() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) PoolGenerator.getObjectFromPool("NodeVisitor"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter83312505() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter54725500() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter33281727() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter56236379() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter14653546() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) PoolGenerator.getObjectFromPool("NodeFilter"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms46957971() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms15541184() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms82480930() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms89112038() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms47962461() {
        Elements elements = (Elements) PoolGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        PoolGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse94075734() {
        QueryParser queryparser = (QueryParser) PoolGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("plaintext");
        PoolGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse85437845() {
        QueryParser queryparser = (QueryParser) PoolGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("optioo");
        PoolGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse92443259() {
        QueryParser queryparser = (QueryParser) PoolGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("checkbow");
        PoolGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse84314678() {
        QueryParser queryparser = (QueryParser) PoolGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse(":not)");
        PoolGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse4819645() {
        QueryParser queryparser = (QueryParser) PoolGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse(":first-chilc");
        PoolGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect17905397() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("hreg",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect25785848() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select(":first-chilc",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect61319368() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("radin",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect61591580() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("button",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect53178515() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select(":contains)",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect13432217() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect8591370() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect28109951() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect74432480() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect96803775() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) PoolGenerator.getObjectFromPool("Evaluator"),(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect30305238() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select(":matchTexs",(Iterable<Element>) PoolGenerator.getObjectFromPool("Iterable<Element>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect25059034() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("httpr",(Iterable<Element>) PoolGenerator.getObjectFromPool("Iterable<Element>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect40446360() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select(":lt(",(Iterable<Element>) PoolGenerator.getObjectFromPool("Iterable<Element>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect94123593() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("commane",(Iterable<Element>) PoolGenerator.getObjectFromPool("Iterable<Element>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9378505() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("#roos",(Iterable<Element>) PoolGenerator.getObjectFromPool("Iterable<Element>"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst2485968() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("colgrouo",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst77190308() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst(":matches)",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst36709492() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("frameset",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst19202695() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst(";",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst93389556() {
        Selector selector = (Selector) PoolGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst(":roou",(Element) PoolGenerator.getObjectFromPool("Element"));
        PoolGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
}