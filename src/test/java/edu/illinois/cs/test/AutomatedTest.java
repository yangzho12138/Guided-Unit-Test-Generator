package org.jsoup.mytests;
import org.junit.Test;
import static org.junit.Assert.*;
import org.jsoup.nodes.*;
import org.jsoup.select.*;
import org.jsoup.examples.*;
import org.jsoup.parser.*;
import org.jsoup.helper.*;
import org.jsoup.internal.*;
import org.jsoup.safety.*;
import org.jsoup.*;

public class AutomatedTest {
    @Test
    public void testAttributesget19804204670() {
        Attributes attributes = new Attributes();
        attributes.get("Set-Cookid");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget11414281681() {
        Attributes attributes = new Attributes();
        attributes.get("[CDATA[");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget10032436862() {
        Attributes attributes = new Attributes();
        attributes.get("textareb");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget1082706193() {
        Attributes attributes = new Attributes();
        attributes.get("radip");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget1082706194() {
        Attributes attributes = new Attributes();
        attributes.get("radip");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase34840() {
        Attributes attributes = new Attributes();
        attributes.getIgnoreCase("li");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase18678420511() {
        Attributes attributes = new Attributes();
        attributes.getIgnoreCase("[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase7423139252() {
        Attributes attributes = new Attributes();
        attributes.getIgnoreCase("checkec");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase30164323() {
        Attributes attributes = new Attributes();
        attributes.getIgnoreCase("base");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase1101158224() {
        Attributes attributes = new Attributes();
        attributes.getIgnoreCase("tablf");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd11133348820() {
        Attributes attributes = new Attributes();
        attributes.add("#root","UTF-");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd12268303611() {
        Attributes attributes = new Attributes();
        attributes.add("tr",":containsData'");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd565649332() {
        Attributes attributes = new Attributes();
        attributes.add(":all","\'");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd21095915563() {
        Attributes attributes = new Attributes();
        attributes.add("sarcasm","heac");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd15850331824() {
        Attributes attributes = new Attributes();
        attributes.add(":has)","commanc");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput1014463300() {
        Attributes attributes = new Attributes();
        attributes.put("htmm",":lt'");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput13566075141() {
        Attributes attributes = new Attributes();
        attributes.put("httq",":matches'");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput13508264622() {
        Attributes attributes = new Attributes();
        attributes.put("scrips",":nth-last-of-type)");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput17725770443() {
        Attributes attributes = new Attributes();
        attributes.put(":roou","nobq");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput12458054454() {
        Attributes attributes = new Attributes();
        attributes.put("http:/","heae");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput1172020() {
        Attributes attributes = new Attributes();
        attributes.put("tr",true);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput1037893241() {
        Attributes attributes = new Attributes();
        attributes.put("met`",true);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput8770201142() {
        Attributes attributes = new Attributes();
        attributes.put("text/",true);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput1045871403() {
        Attributes attributes = new Attributes();
        attributes.put("namf",true);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput1088670314() {
        Attributes attributes = new Attributes();
        attributes.put("rubx",true);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput310() {
        Attributes attributes = new Attributes();
        attributes.put(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput311() {
        Attributes attributes = new Attributes();
        attributes.put(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput312() {
        Attributes attributes = new Attributes();
        attributes.put(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput313() {
        Attributes attributes = new Attributes();
        attributes.put(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput314() {
        Attributes attributes = new Attributes();
        attributes.put(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove21153115440() {
        Attributes attributes = new Attributes();
        attributes.remove("boundarx");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove987201() {
        Attributes attributes = new Attributes();
        attributes.remove("com");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove1082706192() {
        Attributes attributes = new Attributes();
        attributes.remove("radip");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove32134793() {
        Attributes attributes = new Attributes();
        attributes.remove("http");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove30064() {
        Attributes attributes = new Attributes();
        attributes.remove("^=");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase11912143970() {
        Attributes attributes = new Attributes();
        attributes.removeIgnoreCase("iframe");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase1103714481() {
        Attributes attributes = new Attributes();
        attributes.removeIgnoreCase("titlf");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase13215465982() {
        Attributes attributes = new Attributes();
        attributes.removeIgnoreCase("templatf");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase33868633() {
        Attributes attributes = new Attributes();
        attributes.removeIgnoreCase("nobq");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase10552537214() {
        Attributes attributes = new Attributes();
        attributes.removeIgnoreCase(":matchesOwn'");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey569515650() {
        Attributes attributes = new Attributes();
        attributes.hasKey(":not'");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey11927218631() {
        Attributes attributes = new Attributes();
        attributes.hasKey("noframet");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey35756422() {
        Attributes attributes = new Attributes();
        attributes.hasKey("typf");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey30164323() {
        Attributes attributes = new Attributes();
        attributes.hasKey("base");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey1103269004() {
        Attributes attributes = new Attributes();
        attributes.hasKey("theae");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase33070() {
        Attributes attributes = new Attributes();
        attributes.hasKeyIgnoreCase("h4");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase12091() {
        Attributes attributes = new Attributes();
        attributes.hasKeyIgnoreCase("$>");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase21153115442() {
        Attributes attributes = new Attributes();
        attributes.hasKeyIgnoreCase("boundarx");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase10552537213() {
        Attributes attributes = new Attributes();
        attributes.hasKeyIgnoreCase(":matchesOwn'");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase1003581224() {
        Attributes attributes = new Attributes();
        attributes.hasKeyIgnoreCase("inpuu");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize10() {
        Attributes attributes = new Attributes();
        attributes.size();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize11() {
        Attributes attributes = new Attributes();
        attributes.size();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize12() {
        Attributes attributes = new Attributes();
        attributes.size();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize13() {
        Attributes attributes = new Attributes();
        attributes.size();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize14() {
        Attributes attributes = new Attributes();
        attributes.size();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty10() {
        Attributes attributes = new Attributes();
        attributes.isEmpty();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty11() {
        Attributes attributes = new Attributes();
        attributes.isEmpty();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty12() {
        Attributes attributes = new Attributes();
        attributes.isEmpty();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty13() {
        Attributes attributes = new Attributes();
        attributes.isEmpty();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty14() {
        Attributes attributes = new Attributes();
        attributes.isEmpty();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll310() {
        Attributes attributes = new Attributes();
        attributes.addAll(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll311() {
        Attributes attributes = new Attributes();
        attributes.addAll(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll312() {
        Attributes attributes = new Attributes();
        attributes.addAll(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll313() {
        Attributes attributes = new Attributes();
        attributes.addAll(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll314() {
        Attributes attributes = new Attributes();
        attributes.addAll(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesiterator10() {
        Attributes attributes = new Attributes();
        attributes.iterator();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesiterator11() {
        Attributes attributes = new Attributes();
        attributes.iterator();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesiterator12() {
        Attributes attributes = new Attributes();
        attributes.iterator();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesiterator13() {
        Attributes attributes = new Attributes();
        attributes.iterator();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesiterator14() {
        Attributes attributes = new Attributes();
        attributes.iterator();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasNext10() {
        Attributes attributes = new Attributes();
        attributes.hasNext();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasNext11() {
        Attributes attributes = new Attributes();
        attributes.hasNext();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasNext12() {
        Attributes attributes = new Attributes();
        attributes.hasNext();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasNext13() {
        Attributes attributes = new Attributes();
        attributes.hasNext();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasNext14() {
        Attributes attributes = new Attributes();
        attributes.hasNext();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnext10() {
        Attributes attributes = new Attributes();
        attributes.next();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnext11() {
        Attributes attributes = new Attributes();
        attributes.next();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnext12() {
        Attributes attributes = new Attributes();
        attributes.next();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnext13() {
        Attributes attributes = new Attributes();
        attributes.next();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnext14() {
        Attributes attributes = new Attributes();
        attributes.next();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove10() {
        Attributes attributes = new Attributes();
        attributes.remove();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove11() {
        Attributes attributes = new Attributes();
        attributes.remove();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove12() {
        Attributes attributes = new Attributes();
        attributes.remove();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove13() {
        Attributes attributes = new Attributes();
        attributes.remove();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove14() {
        Attributes attributes = new Attributes();
        attributes.remove();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList10() {
        Attributes attributes = new Attributes();
        attributes.asList();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList11() {
        Attributes attributes = new Attributes();
        attributes.asList();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList12() {
        Attributes attributes = new Attributes();
        attributes.asList();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList13() {
        Attributes attributes = new Attributes();
        attributes.asList();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList14() {
        Attributes attributes = new Attributes();
        attributes.asList();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset10() {
        Attributes attributes = new Attributes();
        attributes.dataset();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset11() {
        Attributes attributes = new Attributes();
        attributes.dataset();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset12() {
        Attributes attributes = new Attributes();
        attributes.dataset();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset13() {
        Attributes attributes = new Attributes();
        attributes.dataset();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset14() {
        Attributes attributes = new Attributes();
        attributes.dataset();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml10() {
        Attributes attributes = new Attributes();
        attributes.html();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml11() {
        Attributes attributes = new Attributes();
        attributes.html();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml12() {
        Attributes attributes = new Attributes();
        attributes.html();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml13() {
        Attributes attributes = new Attributes();
        attributes.html();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml14() {
        Attributes attributes = new Attributes();
        attributes.html();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributestoString10() {
        Attributes attributes = new Attributes();
        attributes.toString();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributestoString11() {
        Attributes attributes = new Attributes();
        attributes.toString();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributestoString12() {
        Attributes attributes = new Attributes();
        attributes.toString();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributestoString13() {
        Attributes attributes = new Attributes();
        attributes.toString();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributestoString14() {
        Attributes attributes = new Attributes();
        attributes.toString();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesequals310() {
        Attributes attributes = new Attributes();
        attributes.equals(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesequals311() {
        Attributes attributes = new Attributes();
        attributes.equals(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesequals312() {
        Attributes attributes = new Attributes();
        attributes.equals(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesequals313() {
        Attributes attributes = new Attributes();
        attributes.equals(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesequals314() {
        Attributes attributes = new Attributes();
        attributes.equals(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshashCode10() {
        Attributes attributes = new Attributes();
        attributes.hashCode();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshashCode11() {
        Attributes attributes = new Attributes();
        attributes.hashCode();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshashCode12() {
        Attributes attributes = new Attributes();
        attributes.hashCode();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshashCode13() {
        Attributes attributes = new Attributes();
        attributes.hashCode();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshashCode14() {
        Attributes attributes = new Attributes();
        attributes.hashCode();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesclone10() {
        Attributes attributes = new Attributes();
        attributes.clone();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesclone11() {
        Attributes attributes = new Attributes();
        attributes.clone();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesclone12() {
        Attributes attributes = new Attributes();
        attributes.clone();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesclone13() {
        Attributes attributes = new Attributes();
        attributes.clone();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesclone14() {
        Attributes attributes = new Attributes();
        attributes.clone();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize10() {
        Attributes attributes = new Attributes();
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize11() {
        Attributes attributes = new Attributes();
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize12() {
        Attributes attributes = new Attributes();
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize13() {
        Attributes attributes = new Attributes();
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize14() {
        Attributes attributes = new Attributes();
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate310() {
        Attributes attributes = new Attributes();
        attributes.deduplicate(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate311() {
        Attributes attributes = new Attributes();
        attributes.deduplicate(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate312() {
        Attributes attributes = new Attributes();
        attributes.deduplicate(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate313() {
        Attributes attributes = new Attributes();
        attributes.deduplicate(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate314() {
        Attributes attributes = new Attributes();
        attributes.deduplicate(null);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity18285120() {
        Entities entities = new Entities();
        entities.isNamedEntity(":eq'");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity996170341() {
        Entities entities = new Entities();
        entities.isNamedEntity("https");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity10032436882() {
        Entities entities = new Entities();
        entities.isNamedEntity("textare`");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity5525734453() {
        Entities entities = new Entities();
        entities.isNamedEntity("caption");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity14704() {
        Entities entities = new Entities();
        entities.isNamedEntity("-,");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity13776877280() {
        Entities entities = new Entities();
        entities.isBaseNamedEntity("buttom");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity31490281() {
        Entities entities = new Entities();
        entities.isBaseNamedEntity("forn");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity987202() {
        Entities entities = new Entities();
        entities.isBaseNamedEntity("com");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity30294403() {
        Entities entities = new Entities();
        entities.isBaseNamedEntity("bodx");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity987194() {
        Entities entities = new Entities();
        entities.isBaseNamedEntity("col");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName10101369390() {
        Entities entities = new Entities();
        entities.getCharacterByName("optioo");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName1143081() {
        Entities entities = new Entities();
        entities.getCharacterByName("svh");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName19382() {
        Entities entities = new Entities();
        entities.getCharacterByName("</");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName18678420513() {
        Entities entities = new Entities();
        entities.getCharacterByName("[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName1082706194() {
        Entities entities = new Entities();
        entities.getCharacterByName("radip");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName570706520() {
        Entities entities = new Entities();
        entities.getByName(":roou");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName1003134661() {
        Entities entities = new Entities();
        entities.getByName("image");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName14711890862() {
        Entities entities = new Entities();
        entities.getByName(":nth-last-child)");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName570706503() {
        Entities entities = new Entities();
        entities.getByName(":roos");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName567593354() {
        Entities entities = new Entities();
        entities.getByName(":has(");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName14348089120() {
        Entities entities = new Entities();
        entities.codepointsForName("noembed",new int[]{0,-1,55296,192,1,55297,2,3,4,199,9,400,1114112,401,-90,57243,224,-99,-100,100,55396});
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName12350414041() {
        Entities entities = new Entities();
        entities.codepointsForName("theac",new int[]{0,-1,55296,192,1,55297,2,3,4,199,9,400,1114112,401,-90,57243,224,-99,-100});
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName1833220492() {
        Entities entities = new Entities();
        entities.codepointsForName("$>",new int[]{0,-1,55296,192,1,55297,2,3});
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName8966628493() {
        Entities entities = new Entities();
        entities.codepointsForName("optgroup",new int[]{0,-1,55296,192,1,55297,2,3,4,199,9,400,1114112,401,-90,57243,224,-99,-100,100});
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName1493656694() {
        Entities entities = new Entities();
        entities.codepointsForName("com",new int[]{0,-1,55296,192,1,55297,2,3,4,199,9,400,1114112,401,-90,57243,224,-99,-100,100,55396,101,102,103,239,240,1114211,500});
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape19781012860() {
        Entities entities = new Entities();
        entities.escape("selecs",null);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape3465980961() {
        Entities entities = new Entities();
        entities.escape(":nth-child(",null);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape11107197082() {
        Entities entities = new Entities();
        entities.escape("#root",null);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape16803279113() {
        Entities entities = new Entities();
        entities.escape("noframet",null);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape14816069354() {
        Entities entities = new Entities();
        entities.escape(":nth-last-of-type(",null);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape16449536130() {
        Entities entities = new Entities();
        entities.escape("frameses");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape3081290271() {
        Entities entities = new Entities();
        entities.escape(":last-chilc");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape19788929342() {
        Entities entities = new Entities();
        entities.escape(":containsOwn(");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape30063() {
        Entities entities = new Entities();
        entities.escape("^=");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape1082706174() {
        Entities entities = new Entities();
        entities.escape("radin");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape18285120() {
        Entities entities = new Entities();
        entities.unescape(":eq'");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape1650854891() {
        Entities entities = new Entities();
        entities.unescape("http-equiu");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape18678420522() {
        Entities entities = new Entities();
        entities.unescape("[a-zA-Z_:][-a-zA-Z0-9_:.]*");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape13776877283() {
        Entities entities = new Entities();
        entities.unescape("buttom");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape34834() {
        Entities entities = new Entities();
        entities.unescape("lh");
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin10850() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(null,"|");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin21011367291() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(null,":matchText");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin3081280952() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(null,":last-chile");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin33228113() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(null,"link");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin10554() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(null,"^");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin10070() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(null,".");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin13776867981() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(null,"buttom");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin33877942() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(null,"nobr");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin14229498983() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(null,"actiom");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin569524974() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(null,":not)");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin7410528520() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","\"","charses","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio",":has(","gzip",":has)","gziq","<.","</","<0","[a-zA-Z_:][-a-zA-Z0-9_:.]+","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked"},"heae");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin17409333981() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","\"","charses","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio",":has(","gzip",":has)","gziq","<.","</","<0","[a-zA-Z_:][-a-zA-Z0-9_:.]+","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html",":first-child","Set-Cookie","htmk",":first-chilc","Set-Cookid","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>"},"|");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin6244895592() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math"},":nth-last-child'");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin1136701623() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","\"","charses","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio",":has(","gzip",":has)","gziq","<.","</","<0","[a-zA-Z_:][-a-zA-Z0-9_:.]+","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz"},"odd");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin1313454194() {
        StringUtil stringutil = new StringUtil();
        stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","\"","charses","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio",":has(","gzip",":has)","gziq","<.","</","<0","[a-zA-Z_:][-a-zA-Z0-9_:.]+","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html",":first-child","Set-Cookie","htmk",":first-chilc","Set-Cookid","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>"},"#");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding553270() {
        StringUtil stringutil = new StringUtil();
        stringutil.padding(55296);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding1331() {
        StringUtil stringutil = new StringUtil();
        stringutil.padding(102);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding1312() {
        StringUtil stringutil = new StringUtil();
        stringutil.padding(100);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding573733() {
        StringUtil stringutil = new StringUtil();
        stringutil.padding(57342);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding304() {
        StringUtil stringutil = new StringUtil();
        stringutil.padding(-1);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank996170340() {
        StringUtil stringutil = new StringUtil();
        stringutil.isBlank("https");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank26152051() {
        StringUtil stringutil = new StringUtil();
        stringutil.isBlank("UTF-");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank6361976022() {
        StringUtil stringutil = new StringUtil();
        stringutil.isBlank("colgroup");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank20353119933() {
        StringUtil stringutil = new StringUtil();
        stringutil.isBlank(":first-of-typf");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank12084() {
        StringUtil stringutil = new StringUtil();
        stringutil.isBlank("$=");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric13940() {
        StringUtil stringutil = new StringUtil();
        stringutil.isNumeric("*=");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric570706511() {
        StringUtil stringutil = new StringUtil();
        stringutil.isNumeric(":root");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric569515652() {
        StringUtil stringutil = new StringUtil();
        stringutil.isNumeric(":not'");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric567593343() {
        StringUtil stringutil = new StringUtil();
        stringutil.isNumeric(":has'");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric31834() {
        StringUtil stringutil = new StringUtil();
        stringutil.isNumeric("br");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace400() {
        StringUtil stringutil = new StringUtil();
        stringutil.isWhitespace(9);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace573741() {
        StringUtil stringutil = new StringUtil();
        stringutil.isWhitespace(57343);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace572742() {
        StringUtil stringutil = new StringUtil();
        stringutil.isWhitespace(57243);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace353() {
        StringUtil stringutil = new StringUtil();
        stringutil.isWhitespace(4);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace573744() {
        StringUtil stringutil = new StringUtil();
        stringutil.isWhitespace(57343);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace2550() {
        StringUtil stringutil = new StringUtil();
        stringutil.isActuallyWhitespace(224);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace591() {
        StringUtil stringutil = new StringUtil();
        stringutil.isActuallyWhitespace(-90);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace554272() {
        StringUtil stringutil = new StringUtil();
        stringutil.isActuallyWhitespace(55396);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace2303() {
        StringUtil stringutil = new StringUtil();
        stringutil.isActuallyWhitespace(199);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace344() {
        StringUtil stringutil = new StringUtil();
        stringutil.isActuallyWhitespace(3);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar573740() {
        StringUtil stringutil = new StringUtil();
        stringutil.isInvisibleChar(57343);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar573731() {
        StringUtil stringutil = new StringUtil();
        stringutil.isInvisibleChar(57342);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar1332() {
        StringUtil stringutil = new StringUtil();
        stringutil.isInvisibleChar(102);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar2303() {
        StringUtil stringutil = new StringUtil();
        stringutil.isInvisibleChar(199);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar2554() {
        StringUtil stringutil = new StringUtil();
        stringutil.isInvisibleChar(224);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace16183955600() {
        StringUtil stringutil = new StringUtil();
        stringutil.normaliseWhitespace(":only-of-type");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace10176250981() {
        StringUtil stringutil = new StringUtil();
        stringutil.normaliseWhitespace(":nth-last-of-type)");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace20919604272() {
        StringUtil stringutil = new StringUtil();
        stringutil.normaliseWhitespace(":only-chile");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace1082706193() {
        StringUtil stringutil = new StringUtil();
        stringutil.normaliseWhitespace("radip");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace1097804314() {
        StringUtil stringutil = new StringUtil();
        stringutil.normaliseWhitespace("styld");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace19781313780() {
        StringUtil stringutil = new StringUtil();
        stringutil.appendNormalisedWhitespace(null,"select",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace11107497691() {
        StringUtil stringutil = new StringUtil();
        stringutil.appendNormalisedWhitespace(null,"#root",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace500623592() {
        StringUtil stringutil = new StringUtil();
        stringutil.appendNormalisedWhitespace(null,"captiom",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace8534694413() {
        StringUtil stringutil = new StringUtil();
        stringutil.appendNormalisedWhitespace(null,"noscripu",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace11617726164() {
        StringUtil stringutil = new StringUtil();
        stringutil.appendNormalisedWhitespace(null,"action",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin6558259510() {
        StringUtil stringutil = new StringUtil();
        stringutil.in("frameses","stylf");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin19969064231() {
        StringUtil stringutil = new StringUtil();
        stringutil.in("spao",":last-of-type");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin6193740962() {
        StringUtil stringutil = new StringUtil();
        stringutil.in(":containsData)","ti");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin9985360673() {
        StringUtil stringutil = new StringUtil();
        stringutil.in(":has(","checkboy");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin16719376134() {
        StringUtil stringutil = new StringUtil();
        stringutil.in("colgroup","optgrouo");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted2266428980() {
        StringUtil stringutil = new StringUtil();
        stringutil.inSorted("image",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","\"","charses","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio",":has(","gzip",":has)","gziq","<.","</","<0","[a-zA-Z_:][-a-zA-Z0-9_:.]+","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html",":first-child","Set-Cookie","htmk",":first-chilc","Set-Cookid","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-"});
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted228433431() {
        StringUtil stringutil = new StringUtil();
        stringutil.inSorted("$=",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg"});
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted13446937522() {
        StringUtil stringutil = new StringUtil();
        stringutil.inSorted("checked",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom"});
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted16599781753() {
        StringUtil stringutil = new StringUtil();
        stringutil.inSorted("noembec",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","\"","charses","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio",":has(","gzip",":has)","gziq","<.","</","<0","[a-zA-Z_:][-a-zA-Z0-9_:.]+","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html",":first-child","Set-Cookie","htmk",":first-chilc","Set-Cookid","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root"});
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted10245321194() {
        StringUtil stringutil = new StringUtil();
        stringutil.inSorted("h5",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer"});
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve1082715490() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve(null,"radip");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve1003590521() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve(null,"inpuu");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve33877952() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve(null,"nobs");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve16183964913() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve(null,":only-of-typf");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve32141884() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve(null,"html");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve17130585640() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve("#roos",":nth-last-child)");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve34243111() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve("$>","nobq");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve21157132742() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve("dd","noembee");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve996138893() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve("html","\'");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve1103606994() {
        StringUtil stringutil = new StringUtil();
        stringutil.resolve("hq","text0");
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder10() {
        StringUtil stringutil = new StringUtil();
        stringutil.borrowBuilder();
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder11() {
        StringUtil stringutil = new StringUtil();
        stringutil.borrowBuilder();
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder12() {
        StringUtil stringutil = new StringUtil();
        stringutil.borrowBuilder();
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder13() {
        StringUtil stringutil = new StringUtil();
        stringutil.borrowBuilder();
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder14() {
        StringUtil stringutil = new StringUtil();
        stringutil.borrowBuilder();
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder310() {
        StringUtil stringutil = new StringUtil();
        stringutil.releaseBuilder(null);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder311() {
        StringUtil stringutil = new StringUtil();
        stringutil.releaseBuilder(null);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder312() {
        StringUtil stringutil = new StringUtil();
        stringutil.releaseBuilder(null);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder313() {
        StringUtil stringutil = new StringUtil();
        stringutil.releaseBuilder(null);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder314() {
        StringUtil stringutil = new StringUtil();
        stringutil.releaseBuilder(null);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase32134790() {
        Normalizer normalizer = new Normalizer();
        normalizer.lowerCase("http");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase12091() {
        Normalizer normalizer = new Normalizer();
        normalizer.lowerCase("$>");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase30062() {
        Normalizer normalizer = new Normalizer();
        normalizer.lowerCase("^=");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase20913044553() {
        Normalizer normalizer = new Normalizer();
        normalizer.lowerCase("isindex");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase12269462994() {
        Normalizer normalizer = new Normalizer();
        normalizer.lowerCase(":containsData)");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize20919604290() {
        Normalizer normalizer = new Normalizer();
        normalizer.normalize(":only-chilc");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize33480051() {
        Normalizer normalizer = new Normalizer();
        normalizer.normalize("metb");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize18678420522() {
        Normalizer normalizer = new Normalizer();
        normalizer.normalize("[a-zA-Z_:][-a-zA-Z0-9_:.]*");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize19804204663() {
        Normalizer normalizer = new Normalizer();
        normalizer.normalize("Set-Cookie");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize2709408274() {
        Normalizer normalizer = new Normalizer();
        normalizer.normalize("disabled");
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap872580() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.wrap(null,4,57343);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap297011() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.wrap(null,0,-90);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap346225602() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.wrap(null,1114112,55297);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap269153() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.wrap(null,-100,224);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap355874() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.wrap(null,187,-1);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamread6267881320() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.read(new Object[]{},239,500);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamread4630393631() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.read(new Object[]{},102,55297);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamread2389259542() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.read(new Object[]{},100,0);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamread14126744933() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.read(new Object[]{},191,55396);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamread3320082724() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.read(new Object[]{},-99,55296);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer300() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.readToByteBuffer(-1);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer321() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.readToByteBuffer(1);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer332() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.readToByteBuffer(2);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer2303() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.readToByteBuffer(199);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer573744() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.readToByteBuffer(57343);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreset10() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.reset();
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreset11() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.reset();
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreset12() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.reset();
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreset13() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.reset();
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreset14() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.reset();
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout9610() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.timeout(0,-1);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout41611() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.timeout(100,100);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout40302() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.timeout(-100,0);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout40613() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.timeout(100,0);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout9924() {
        ConstrainableInputStream constrainableinputstream = new ConstrainableInputStream();
        constrainableinputstream.timeout(1,0);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse21012513050() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("td",":matchText");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse16448512201() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("h1","frameses");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse16174782242() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(":only-chile","iframf");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse10794796843() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(":contains)","optgrouo");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse6779402824() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("DOCTYPF","plaintexu");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse3610040710() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(":first-of-typf",":emptx",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse11152048231() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("hreg","body",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse31982082() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("de","^>",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse11586265723() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("h3","action",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse2430714() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("^","~<",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse35756400() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("typd");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse10176250981() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(":nth-last-of-type)");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse33218802() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("linj");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse13776877283() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("buttom");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse33084() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse("h5");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect17480897430() {
        Jsoup jsoup = new Jsoup();
        jsoup.connect("DOCTYPE");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect1101158201() {
        Jsoup jsoup = new Jsoup();
        jsoup.connect("tabld");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect942() {
        Jsoup jsoup = new Jsoup();
        jsoup.connect("?");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect1003581203() {
        Jsoup jsoup = new Jsoup();
        jsoup.connect("inpus");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect21065455184() {
        Jsoup jsoup = new Jsoup();
        jsoup.connect(":last-of-type");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse21156441420() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"(","noembec");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse926443671() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"abs;","$=");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse1372052() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"hq","~=");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse12140516553() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"odd","hiddem");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse30901714() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"cok","!<");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse46570() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"td");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse46611() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"th");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse15515518852() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"noscript");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse18912051853() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,":nth-of-type)");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse21153106144() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"boundarx");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse17525765930() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,":nth-last-of-type)","disablee");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse15486849961() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"svh","deflatd");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse8737940532() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"text0","heac");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse1038201703() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"meta","dt");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse7596545734() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"disabled","commanc");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse12071767110() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"title","head",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse1064253251() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"<0","math",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse4066241422() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"scripu","!<",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse5661267393() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"xmk","bgsound",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse7902707594() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,"spam","nobr",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment4168464850() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("DOCTYPE",":containsData)");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment30249771() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("$=","abs;");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment21369361742() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment(":lt)",":matchText");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment3349213273() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("http:/","script");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment20666982664() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("[a-zA-Z_:][-a-zA-Z0-9_:.]*",":gt)");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment33700() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("hs");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment18912061151() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment(":nth-of-type)");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment20353119932() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment(":first-of-typf");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment18245813() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment(":alk");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment35756424() {
        Jsoup jsoup = new Jsoup();
        jsoup.parseBodyFragment("typf");
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse13610() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,400);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse562581() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,55297);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse10632() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,102);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse8613() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,-100);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse12014() {
        Jsoup jsoup = new Jsoup();
        jsoup.parse(null,240);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean13071213310() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("titld","h1",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean7268681001() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean(":matches'","hq",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean1037384002() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("*","mati",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean1422352693() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("templatf","actiom",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean888475194() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("]]?","dc",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean2413534540() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("buttoo",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean5460455491() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("frameses",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean1155682() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("te",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean1156303() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("tg",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean21063931254() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("sarcasm",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean8344413120() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("hidden","hq",null,null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean74083491() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("p","h4",null,null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean14115047262() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("text/","script",null,null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean19838678183() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("form","titlf",null,null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean316687874() {
        Jsoup jsoup = new Jsoup();
        jsoup.clean("basf","[a-zA-Z_:][-a-zA-Z0-9_:.]+",null,null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid1036692080() {
        Jsoup jsoup = new Jsoup();
        jsoup.isValid("mati",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid11852498811() {
        Jsoup jsoup = new Jsoup();
        jsoup.isValid("imagd",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid23872() {
        Jsoup jsoup = new Jsoup();
        jsoup.isValid(".",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid1006263() {
        Jsoup jsoup = new Jsoup();
        jsoup.isValid("ds",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid1160024() {
        Jsoup jsoup = new Jsoup();
        jsoup.isValid("ts",null);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput1068173040() {
        Parser parser = new Parser();
        parser.parseInput("nobq",":all");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput359731061() {
        Parser parser = new Parser();
        parser.parseInput("^>","#texu");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput11927246842() {
        Parser parser = new Parser();
        parser.parseInput("=","noframet");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput15501038383() {
        Parser parser = new Parser();
        parser.parseInput("text.","[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput18794674974() {
        Parser parser = new Parser();
        parser.parseInput(":roos","tfoou");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput32144090() {
        Parser parser = new Parser();
        parser.parseInput(null,"http");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput13776867971() {
        Parser parser = new Parser();
        parser.parseInput(null,"button");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput39362() {
        Parser parser = new Parser();
        parser.parseInput(null,"^=");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput11912134663() {
        Parser parser = new Parser();
        parser.parseInput(null,"iframf");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput21011367294() {
        Parser parser = new Parser();
        parser.parseInput(null,":matchText");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput32498950() {
        Parser parser = new Parser();
        parser.parseFragmentInput("-.",null,":lt)");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput7423604561() {
        Parser parser = new Parser();
        parser.parseFragmentInput(":last-of-type",null,":only-chile");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput6002854432() {
        Parser parser = new Parser();
        parser.parseFragmentInput(":only-of-type",null,"image");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput17278946753() {
        Parser parser = new Parser();
        parser.parseFragmentInput(":first-of-typf",null,"gzip");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput1860881154() {
        Parser parser = new Parser();
        parser.parseFragmentInput("selecu",null,"buttom");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder10() {
        Parser parser = new Parser();
        parser.getTreeBuilder();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder11() {
        Parser parser = new Parser();
        parser.getTreeBuilder();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder12() {
        Parser parser = new Parser();
        parser.getTreeBuilder();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder13() {
        Parser parser = new Parser();
        parser.getTreeBuilder();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetTreeBuilder14() {
        Parser parser = new Parser();
        parser.getTreeBuilder();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder310() {
        Parser parser = new Parser();
        parser.setTreeBuilder(null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder311() {
        Parser parser = new Parser();
        parser.setTreeBuilder(null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder312() {
        Parser parser = new Parser();
        parser.setTreeBuilder(null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder313() {
        Parser parser = new Parser();
        parser.setTreeBuilder(null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTreeBuilder314() {
        Parser parser = new Parser();
        parser.setTreeBuilder(null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors10() {
        Parser parser = new Parser();
        parser.isTrackErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors11() {
        Parser parser = new Parser();
        parser.isTrackErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors12() {
        Parser parser = new Parser();
        parser.isTrackErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors13() {
        Parser parser = new Parser();
        parser.isTrackErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors14() {
        Parser parser = new Parser();
        parser.isTrackErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors2230() {
        Parser parser = new Parser();
        parser.setTrackErrors(192);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors691() {
        Parser parser = new Parser();
        parser.setTrackErrors(-100);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors302() {
        Parser parser = new Parser();
        parser.setTrackErrors(-1);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors2223() {
        Parser parser = new Parser();
        parser.setTrackErrors(191);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors2234() {
        Parser parser = new Parser();
        parser.setTrackErrors(192);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors10() {
        Parser parser = new Parser();
        parser.getErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors11() {
        Parser parser = new Parser();
        parser.getErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors12() {
        Parser parser = new Parser();
        parser.getErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors13() {
        Parser parser = new Parser();
        parser.getErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors14() {
        Parser parser = new Parser();
        parser.getErrors();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings310() {
        Parser parser = new Parser();
        parser.settings(null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings311() {
        Parser parser = new Parser();
        parser.settings(null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings312() {
        Parser parser = new Parser();
        parser.settings(null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings313() {
        Parser parser = new Parser();
        parser.settings(null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings314() {
        Parser parser = new Parser();
        parser.settings(null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings10() {
        Parser parser = new Parser();
        parser.settings();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings11() {
        Parser parser = new Parser();
        parser.settings();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings12() {
        Parser parser = new Parser();
        parser.settings();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings13() {
        Parser parser = new Parser();
        parser.settings();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings14() {
        Parser parser = new Parser();
        parser.settings();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse17625269450() {
        Parser parser = new Parser();
        parser.parse(":has)","abs;");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse5392257961() {
        Parser parser = new Parser();
        parser.parse(":first-of-typf","sarcasn");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse21064737602() {
        Parser parser = new Parser();
        parser.parse("imagf","textareb");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse8734510453() {
        Parser parser = new Parser();
        parser.parse("titlf","*=");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse8762543654() {
        Parser parser = new Parser();
        parser.parse("tfoos","svf");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment15548096430() {
        Parser parser = new Parser();
        parser.parseFragment(":only-of-typd",null,":first-chilc");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment9402069011() {
        Parser parser = new Parser();
        parser.parseFragment("http-equiu",null,"http:.");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment21403580432() {
        Parser parser = new Parser();
        parser.parseFragment(":nth-child)",null,"<0");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment13420182313() {
        Parser parser = new Parser();
        parser.parseFragment("xmp",null,":matches(");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment16909681094() {
        Parser parser = new Parser();
        parser.parseFragment("#root",null,":only-of-type");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment10240118500() {
        Parser parser = new Parser();
        parser.parseFragment("iframf",null,"http-equiw",null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment10485015201() {
        Parser parser = new Parser();
        parser.parseFragment(":lt)",null,"span",null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment1444033672() {
        Parser parser = new Parser();
        parser.parseFragment("http:.",null,"^",null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment11750928563() {
        Parser parser = new Parser();
        parser.parseFragment("hree",null,"cok",null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment14522170584() {
        Parser parser = new Parser();
        parser.parseFragment("disablec",null,"form",null);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment15368981700() {
        Parser parser = new Parser();
        parser.parseXmlFragment("checkec","^=");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment711728791() {
        Parser parser = new Parser();
        parser.parseXmlFragment("bodx","http-equiv");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment970461052() {
        Parser parser = new Parser();
        parser.parseXmlFragment("base","spam");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment27138163() {
        Parser parser = new Parser();
        parser.parseXmlFragment("bq","UTF-");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment1569787764() {
        Parser parser = new Parser();
        parser.parseXmlFragment("svf","bgsound");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment8916550670() {
        Parser parser = new Parser();
        parser.parseBodyFragment("stylf","xmk");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment1061917901() {
        Parser parser = new Parser();
        parser.parseBodyFragment("linl","http");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment13693412262() {
        Parser parser = new Parser();
        parser.parseBodyFragment(":only-of-type","~<");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment18069098283() {
        Parser parser = new Parser();
        parser.parseBodyFragment("basefont","gziq");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment16748719104() {
        Parser parser = new Parser();
        parser.parseBodyFragment(":only-chilc",":matchTexu");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities1907676930() {
        Parser parser = new Parser();
        parser.unescapeEntities("disablee",true);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities8800718781() {
        Parser parser = new Parser();
        parser.unescapeEntities("tbody",true);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities30615512() {
        Parser parser = new Parser();
        parser.unescapeEntities("com",true);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities1096403263() {
        Parser parser = new Parser();
        parser.unescapeEntities("span",true);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities968936224() {
        Parser parser = new Parser();
        parser.unescapeEntities("even",true);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed21122512540() {
        Parser parser = new Parser();
        parser.parseBodyFragmentRelaxed("com","boundary");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed19179345021() {
        Parser parser = new Parser();
        parser.parseBodyFragmentRelaxed("captiom","[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed13661317122() {
        Parser parser = new Parser();
        parser.parseBodyFragmentRelaxed(":only-of-typf","httq");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed3461213943() {
        Parser parser = new Parser();
        parser.parseBodyFragmentRelaxed(":root","boundarx");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed8733601214() {
        Parser parser = new Parser();
        parser.parseBodyFragmentRelaxed("title","]]>");
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser10() {
        Parser parser = new Parser();
        parser.htmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser11() {
        Parser parser = new Parser();
        parser.htmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser12() {
        Parser parser = new Parser();
        parser.htmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser13() {
        Parser parser = new Parser();
        parser.htmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser14() {
        Parser parser = new Parser();
        parser.htmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser10() {
        Parser parser = new Parser();
        parser.xmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser11() {
        Parser parser = new Parser();
        parser.xmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser12() {
        Parser parser = new Parser();
        parser.xmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser13() {
        Parser parser = new Parser();
        parser.xmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser14() {
        Parser parser = new Parser();
        parser.xmlParser();
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName10() {
        Tag tag = new Tag();
        tag.getName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName11() {
        Tag tag = new Tag();
        tag.getName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName12() {
        Tag tag = new Tag();
        tag.getName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName13() {
        Tag tag = new Tag();
        tag.getName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName14() {
        Tag tag = new Tag();
        tag.getName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName10() {
        Tag tag = new Tag();
        tag.normalName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName11() {
        Tag tag = new Tag();
        tag.normalName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName12() {
        Tag tag = new Tag();
        tag.normalName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName13() {
        Tag tag = new Tag();
        tag.normalName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName14() {
        Tag tag = new Tag();
        tag.normalName();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf1155060() {
        Tag tag = new Tag();
        tag.valueOf("tc",null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf931551() {
        Tag tag = new Tag();
        tag.valueOf("^<",null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf996110292() {
        Tag tag = new Tag();
        tag.valueOf("htmm",null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf11594980243() {
        Tag tag = new Tag();
        tag.valueOf("noembee",null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf9125958304() {
        Tag tag = new Tag();
        tag.valueOf("hiddeo",null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf35118010() {
        Tag tag = new Tag();
        tag.valueOf("ruby");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf15368918731() {
        Tag tag = new Tag();
        tag.valueOf("checkbow");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf15515509562() {
        Tag tag = new Tag();
        tag.valueOf("noscripu");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf7390744123() {
        Tag tag = new Tag();
        tag.valueOf("charseu");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf30294404() {
        Tag tag = new Tag();
        tag.valueOf("bodx");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock10() {
        Tag tag = new Tag();
        tag.isBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock11() {
        Tag tag = new Tag();
        tag.isBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock12() {
        Tag tag = new Tag();
        tag.isBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock13() {
        Tag tag = new Tag();
        tag.isBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock14() {
        Tag tag = new Tag();
        tag.isBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock10() {
        Tag tag = new Tag();
        tag.formatAsBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock11() {
        Tag tag = new Tag();
        tag.formatAsBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock12() {
        Tag tag = new Tag();
        tag.formatAsBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock13() {
        Tag tag = new Tag();
        tag.formatAsBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock14() {
        Tag tag = new Tag();
        tag.formatAsBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock10() {
        Tag tag = new Tag();
        tag.canContainBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock11() {
        Tag tag = new Tag();
        tag.canContainBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock12() {
        Tag tag = new Tag();
        tag.canContainBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock13() {
        Tag tag = new Tag();
        tag.canContainBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock14() {
        Tag tag = new Tag();
        tag.canContainBlock();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline10() {
        Tag tag = new Tag();
        tag.isInline();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline11() {
        Tag tag = new Tag();
        tag.isInline();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline12() {
        Tag tag = new Tag();
        tag.isInline();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline13() {
        Tag tag = new Tag();
        tag.isInline();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline14() {
        Tag tag = new Tag();
        tag.isInline();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData10() {
        Tag tag = new Tag();
        tag.isData();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData11() {
        Tag tag = new Tag();
        tag.isData();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData12() {
        Tag tag = new Tag();
        tag.isData();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData13() {
        Tag tag = new Tag();
        tag.isData();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData14() {
        Tag tag = new Tag();
        tag.isData();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty10() {
        Tag tag = new Tag();
        tag.isEmpty();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty11() {
        Tag tag = new Tag();
        tag.isEmpty();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty12() {
        Tag tag = new Tag();
        tag.isEmpty();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty13() {
        Tag tag = new Tag();
        tag.isEmpty();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty14() {
        Tag tag = new Tag();
        tag.isEmpty();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing10() {
        Tag tag = new Tag();
        tag.isSelfClosing();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing11() {
        Tag tag = new Tag();
        tag.isSelfClosing();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing12() {
        Tag tag = new Tag();
        tag.isSelfClosing();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing13() {
        Tag tag = new Tag();
        tag.isSelfClosing();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing14() {
        Tag tag = new Tag();
        tag.isSelfClosing();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag10() {
        Tag tag = new Tag();
        tag.isKnownTag();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag11() {
        Tag tag = new Tag();
        tag.isKnownTag();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag12() {
        Tag tag = new Tag();
        tag.isKnownTag();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag13() {
        Tag tag = new Tag();
        tag.isKnownTag();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag14() {
        Tag tag = new Tag();
        tag.isKnownTag();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag30164310() {
        Tag tag = new Tag();
        tag.isKnownTag("basd");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag1103714481() {
        Tag tag = new Tag();
        tag.isKnownTag("titlf");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag18690634822() {
        Tag tag = new Tag();
        tag.isKnownTag("sarcasl");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag39973() {
        Tag tag = new Tag();
        tag.isKnownTag("~<");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag31844() {
        Tag tag = new Tag();
        tag.isKnownTag("bs");
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace10() {
        Tag tag = new Tag();
        tag.preserveWhitespace();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace11() {
        Tag tag = new Tag();
        tag.preserveWhitespace();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace12() {
        Tag tag = new Tag();
        tag.preserveWhitespace();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace13() {
        Tag tag = new Tag();
        tag.preserveWhitespace();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace14() {
        Tag tag = new Tag();
        tag.preserveWhitespace();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed10() {
        Tag tag = new Tag();
        tag.isFormListed();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed11() {
        Tag tag = new Tag();
        tag.isFormListed();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed12() {
        Tag tag = new Tag();
        tag.isFormListed();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed13() {
        Tag tag = new Tag();
        tag.isFormListed();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed14() {
        Tag tag = new Tag();
        tag.isFormListed();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable10() {
        Tag tag = new Tag();
        tag.isFormSubmittable();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable11() {
        Tag tag = new Tag();
        tag.isFormSubmittable();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable12() {
        Tag tag = new Tag();
        tag.isFormSubmittable();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable13() {
        Tag tag = new Tag();
        tag.isFormSubmittable();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable14() {
        Tag tag = new Tag();
        tag.isFormSubmittable();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagequals310() {
        Tag tag = new Tag();
        tag.equals(null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagequals311() {
        Tag tag = new Tag();
        tag.equals(null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagequals312() {
        Tag tag = new Tag();
        tag.equals(null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagequals313() {
        Tag tag = new Tag();
        tag.equals(null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagequals314() {
        Tag tag = new Tag();
        tag.equals(null);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaghashCode10() {
        Tag tag = new Tag();
        tag.hashCode();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaghashCode11() {
        Tag tag = new Tag();
        tag.hashCode();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaghashCode12() {
        Tag tag = new Tag();
        tag.hashCode();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaghashCode13() {
        Tag tag = new Tag();
        tag.hashCode();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaghashCode14() {
        Tag tag = new Tag();
        tag.hashCode();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagtoString10() {
        Tag tag = new Tag();
        tag.toString();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagtoString11() {
        Tag tag = new Tag();
        tag.toString();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagtoString12() {
        Tag tag = new Tag();
        tag.toString();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagtoString13() {
        Tag tag = new Tag();
        tag.toString();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagtoString14() {
        Tag tag = new Tag();
        tag.toString();
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage10() {
        ParseError parseerror = new ParseError();
        parseerror.getErrorMessage();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage11() {
        ParseError parseerror = new ParseError();
        parseerror.getErrorMessage();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage12() {
        ParseError parseerror = new ParseError();
        parseerror.getErrorMessage();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage13() {
        ParseError parseerror = new ParseError();
        parseerror.getErrorMessage();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage14() {
        ParseError parseerror = new ParseError();
        parseerror.getErrorMessage();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition10() {
        ParseError parseerror = new ParseError();
        parseerror.getPosition();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition11() {
        ParseError parseerror = new ParseError();
        parseerror.getPosition();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition12() {
        ParseError parseerror = new ParseError();
        parseerror.getPosition();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition13() {
        ParseError parseerror = new ParseError();
        parseerror.getPosition();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition14() {
        ParseError parseerror = new ParseError();
        parseerror.getPosition();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrortoString10() {
        ParseError parseerror = new ParseError();
        parseerror.toString();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrortoString11() {
        ParseError parseerror = new ParseError();
        parseerror.toString();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrortoString12() {
        ParseError parseerror = new ParseError();
        parseerror.toString();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrortoString13() {
        ParseError parseerror = new ParseError();
        parseerror.toString();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrortoString14() {
        ParseError parseerror = new ParseError();
        parseerror.toString();
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking10() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.noTracking();
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking11() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.noTracking();
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking12() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.noTracking();
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking13() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.noTracking();
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking14() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.noTracking();
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking320() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.tracking(1);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking4311() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.tracking(400);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking4312() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.tracking(400);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking353() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.tracking(4);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking2184() {
        ParseErrorList parseerrorlist = new ParseErrorList();
        parseerrorlist.tracking(187);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos10() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.pos();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos11() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.pos();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos12() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.pos();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos13() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.pos();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos14() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.pos();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty10() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.isEmpty();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty11() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.isEmpty();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty12() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.isEmpty();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty13() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.isEmpty();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty14() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.isEmpty();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent10() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.current();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent11() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.current();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent12() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.current();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent13() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.current();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent14() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.current();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance10() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance11() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance12() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance13() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance14() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo1560() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeTo(});
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo1441() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeTo(q);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo1022() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeTo(G);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo653() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeTo(");
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo1344() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeTo(g);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny1560() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeToAny(});
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny1211() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeToAny(Z);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny672() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeToAny($);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny793() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeToAny(0);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny884() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.consumeToAny(9);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadertoString10() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.toString();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadertoString11() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.toString();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadertoString12() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.toString();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadertoString13() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.toString();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadertoString14() {
        CharacterReader characterreader = new CharacterReader();
        characterreader.toString();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlTreeBuildertoString10() {
        HtmlTreeBuilder htmltreebuilder = new HtmlTreeBuilder();
        htmltreebuilder.toString();
        assertTrue(htmltreebuilder.equals(htmltreebuilder));
        try {
            htmltreebuilder.equals(htmltreebuilder);
        } catch (Exception e) {
            fail("htmltreebuilder.equals(htmltreebuilder) throws an exception");
        }
        try {
            htmltreebuilder.hashCode();
        } catch (Exception e) {
            fail("htmltreebuilder.hashCode() throws an exception");
        }
        try {
            htmltreebuilder.toString();
        } catch (Exception e) {
            fail("htmltreebuilder.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlTreeBuildertoString11() {
        HtmlTreeBuilder htmltreebuilder = new HtmlTreeBuilder();
        htmltreebuilder.toString();
        assertTrue(htmltreebuilder.equals(htmltreebuilder));
        try {
            htmltreebuilder.equals(htmltreebuilder);
        } catch (Exception e) {
            fail("htmltreebuilder.equals(htmltreebuilder) throws an exception");
        }
        try {
            htmltreebuilder.hashCode();
        } catch (Exception e) {
            fail("htmltreebuilder.hashCode() throws an exception");
        }
        try {
            htmltreebuilder.toString();
        } catch (Exception e) {
            fail("htmltreebuilder.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlTreeBuildertoString12() {
        HtmlTreeBuilder htmltreebuilder = new HtmlTreeBuilder();
        htmltreebuilder.toString();
        assertTrue(htmltreebuilder.equals(htmltreebuilder));
        try {
            htmltreebuilder.equals(htmltreebuilder);
        } catch (Exception e) {
            fail("htmltreebuilder.equals(htmltreebuilder) throws an exception");
        }
        try {
            htmltreebuilder.hashCode();
        } catch (Exception e) {
            fail("htmltreebuilder.hashCode() throws an exception");
        }
        try {
            htmltreebuilder.toString();
        } catch (Exception e) {
            fail("htmltreebuilder.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlTreeBuildertoString13() {
        HtmlTreeBuilder htmltreebuilder = new HtmlTreeBuilder();
        htmltreebuilder.toString();
        assertTrue(htmltreebuilder.equals(htmltreebuilder));
        try {
            htmltreebuilder.equals(htmltreebuilder);
        } catch (Exception e) {
            fail("htmltreebuilder.equals(htmltreebuilder) throws an exception");
        }
        try {
            htmltreebuilder.hashCode();
        } catch (Exception e) {
            fail("htmltreebuilder.hashCode() throws an exception");
        }
        try {
            htmltreebuilder.toString();
        } catch (Exception e) {
            fail("htmltreebuilder.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlTreeBuildertoString14() {
        HtmlTreeBuilder htmltreebuilder = new HtmlTreeBuilder();
        htmltreebuilder.toString();
        assertTrue(htmltreebuilder.equals(htmltreebuilder));
        try {
            htmltreebuilder.equals(htmltreebuilder);
        } catch (Exception e) {
            fail("htmltreebuilder.equals(htmltreebuilder) throws an exception");
        }
        try {
            htmltreebuilder.hashCode();
        } catch (Exception e) {
            fail("htmltreebuilder.hashCode() throws an exception");
        }
        try {
            htmltreebuilder.toString();
        } catch (Exception e) {
            fail("htmltreebuilder.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.isEmpty();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.isEmpty();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.isEmpty();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.isEmpty();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.isEmpty();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.peek();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.peek();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.peek();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.peek();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.peek();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst690() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst(&);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst1341() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst(g);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst672() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst($);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst1293() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst(b);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst694() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst(&);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst12269462990() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst(":containsData)");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst1099031() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst("ode");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst10176250962() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst(":nth-last-of-type'");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst21065455193() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst(":last-of-typd");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst17480897434() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.addFirst("DOCTYPE");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches1097804310() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matches("styld");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches19788929351() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matches(":containsOwn'");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches18245812() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matches(":alk");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches15368918743() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matches("checkbox");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches11912143974() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matches("iframe");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS37320() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesCS("ti");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS9060216051() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesCS("select");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS1605222302() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesCS("bgsoune");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS32132593() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesCS("htmm");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS13776877274() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesCS("button");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny17571249770() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny(":emptx");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny6361976021() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny("colgroup");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny17571249772() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny(":emptx");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny12068418933() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny("http:.");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny567593354() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny(":has(");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny720() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny());
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny931() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny(>);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny702() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny(');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny1213() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny(Z);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny954() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesAny(@);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesStartTag();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesStartTag();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesStartTag();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesStartTag();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesStartTag();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp14711890860() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchChomp(":nth-last-child)");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp37281() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchChomp("te");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp31490282() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchChomp("forn");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp20353119913() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchChomp(":first-of-typd");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp5525734454() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchChomp("caption");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.matchesWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume21011357980() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume(":matchTexs");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume1143071() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume("svg");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume21153115432() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume("boundary");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume19732341973() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume("plaintexs");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume14724() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consume("-.");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo14720() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTo("-.");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo39981() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTo("~=");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo1097804332() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTo("stylf");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo21156131423() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTo("noembec");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo1082706174() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTo("radin");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase12174874160() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToIgnoreCase("hiddem");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase21153115431() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToIgnoreCase("boundary");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase17480897432() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToIgnoreCase("DOCTYPE");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase1857353263() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToIgnoreCase("US-ASCIJ");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase2882752494() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToIgnoreCase(":nth-child)");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny12174874150() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToAny("hidden");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny15451126491() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToAny("deflatd");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny39982() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToAny("~=");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny1650854873() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToAny("http-equiw");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny12068418924() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeToAny("http:/");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo1102563210() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompTo("text/");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo1188411() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompTo("xmo");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo1605222302() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompTo("bgsoune");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo27763633() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompTo("\"\"");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo32132584() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompTo("html");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase19732341990() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompToIgnoreCase("plaintexu");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase18678420511() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompToIgnoreCase("[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase1188422() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompToIgnoreCase("xmp");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase21156131423() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompToIgnoreCase("noembec");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase33094() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompToIgnoreCase("h6");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced30350() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompBalanced(@,Z);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced39471() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompBalanced(],g);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced49012() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompBalanced(},A);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced45613() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompBalanced(q,a);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced29304() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.chompBalanced(>,/);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape19732341980() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.unescape("plaintext");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape358296691() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.unescape("#roou");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape32132582() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.unescape("html");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape1433() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.unescape("p");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape570706514() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.unescape(":root");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWhitespace();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeWord();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTagName();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTagName();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTagName();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTagName();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeTagName();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeElementSelector();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeElementSelector();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeElementSelector();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeElementSelector();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeElementSelector();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeCssIdentifier();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeCssIdentifier();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeCssIdentifier();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeCssIdentifier();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeCssIdentifier();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeAttributeKey();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeAttributeKey();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeAttributeKey();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeAttributeKey();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.consumeAttributeKey();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.remainder();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.remainder();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.remainder();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.remainder();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.remainder();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuetoString10() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.toString();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuetoString11() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.toString();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuetoString12() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.toString();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuetoString13() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.toString();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuetoString14() {
        TokenQueue tokenqueue = new TokenQueue();
        tokenqueue.toString();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase10() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveTagCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase11() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveTagCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase12() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveTagCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase13() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveTagCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase14() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveTagCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase10() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveAttributeCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase11() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveAttributeCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase12() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveAttributeCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase13() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveAttributeCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase14() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.preserveAttributeCase();
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag21011357980() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeTag(":matchTexs");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag10032436881() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeTag("textare`");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag10101369412() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeTag("optiom");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag10032436863() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeTag("textareb");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag9076856554() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeTag("scrips");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute27763630() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeAttribute("\"\"");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute21156131421() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeAttribute("noembec");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute1650854892() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeAttribute("http-equiu");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute1101578783() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeAttribute("tbodz");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute18912061164() {
        ParseSettings parsesettings = new ParseSettings();
        parsesettings.normalizeAttribute(":nth-of-type(");
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean310() {
        Cleaner cleaner = new Cleaner();
        cleaner.clean(null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean311() {
        Cleaner cleaner = new Cleaner();
        cleaner.clean(null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean312() {
        Cleaner cleaner = new Cleaner();
        cleaner.clean(null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean313() {
        Cleaner cleaner = new Cleaner();
        cleaner.clean(null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean314() {
        Cleaner cleaner = new Cleaner();
        cleaner.clean(null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid310() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValid(null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid311() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValid(null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid312() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValid(null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid313() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValid(null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid314() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValid(null);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml2882752480() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValidBodyHtml(":nth-child(");
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml1188431() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValidBodyHtml("xmq");
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml17480897442() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValidBodyHtml("DOCTYPD");
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml1605222303() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValidBodyHtml("bgsoune");
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml1102563224() {
        Cleaner cleaner = new Cleaner();
        cleaner.isValidBodyHtml("text0");
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone10() {
        Whitelist whitelist = new Whitelist();
        whitelist.none();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone11() {
        Whitelist whitelist = new Whitelist();
        whitelist.none();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone12() {
        Whitelist whitelist = new Whitelist();
        whitelist.none();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone13() {
        Whitelist whitelist = new Whitelist();
        whitelist.none();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone14() {
        Whitelist whitelist = new Whitelist();
        whitelist.none();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText10() {
        Whitelist whitelist = new Whitelist();
        whitelist.simpleText();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText11() {
        Whitelist whitelist = new Whitelist();
        whitelist.simpleText();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText12() {
        Whitelist whitelist = new Whitelist();
        whitelist.simpleText();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText13() {
        Whitelist whitelist = new Whitelist();
        whitelist.simpleText();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText14() {
        Whitelist whitelist = new Whitelist();
        whitelist.simpleText();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic10() {
        Whitelist whitelist = new Whitelist();
        whitelist.basic();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic11() {
        Whitelist whitelist = new Whitelist();
        whitelist.basic();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic12() {
        Whitelist whitelist = new Whitelist();
        whitelist.basic();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic13() {
        Whitelist whitelist = new Whitelist();
        whitelist.basic();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic14() {
        Whitelist whitelist = new Whitelist();
        whitelist.basic();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages10() {
        Whitelist whitelist = new Whitelist();
        whitelist.basicWithImages();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages11() {
        Whitelist whitelist = new Whitelist();
        whitelist.basicWithImages();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages12() {
        Whitelist whitelist = new Whitelist();
        whitelist.basicWithImages();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages13() {
        Whitelist whitelist = new Whitelist();
        whitelist.basicWithImages();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages14() {
        Whitelist whitelist = new Whitelist();
        whitelist.basicWithImages();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed10() {
        Whitelist whitelist = new Whitelist();
        whitelist.relaxed();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed11() {
        Whitelist whitelist = new Whitelist();
        whitelist.relaxed();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed12() {
        Whitelist whitelist = new Whitelist();
        whitelist.relaxed();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed13() {
        Whitelist whitelist = new Whitelist();
        whitelist.relaxed();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed14() {
        Whitelist whitelist = new Whitelist();
        whitelist.relaxed();
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags1650854870() {
        Whitelist whitelist = new Whitelist();
        whitelist.addTags("http-equiw");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags33218801() {
        Whitelist whitelist = new Whitelist();
        whitelist.addTags("linj");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags10552537212() {
        Whitelist whitelist = new Whitelist();
        whitelist.addTags(":matchesOwn'");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags9060216053() {
        Whitelist whitelist = new Whitelist();
        whitelist.addTags("select");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags33054() {
        Whitelist whitelist = new Whitelist();
        whitelist.addTags("h2");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags660() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeTags("#");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags10548386281() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeTags(":first-child");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags987182() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeTags("cok");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags11927218613() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeTags("noframer");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags31255614() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeTags("even");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes996142430() {
        Whitelist whitelist = new Whitelist();
        whitelist.addAttributes("htmk","h4");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes2746249281() {
        Whitelist whitelist = new Whitelist();
        whitelist.addAttributes("xmq","disablec");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes1663424122() {
        Whitelist whitelist = new Whitelist();
        whitelist.addAttributes(":alk","style");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes5202174043() {
        Whitelist whitelist = new Whitelist();
        whitelist.addAttributes("iframd","http:0");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes9051441564() {
        Whitelist whitelist = new Whitelist();
        whitelist.addAttributes("nobs","option");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes7686521670() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeAttributes(":root",":emptz");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes5385778261() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeAttributes("forl","colgrouq");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes1024352() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeAttributes("h0","*");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes11450030773() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeAttributes("isindey","charseu");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes3134932984() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeAttributes(":first-chile","plaintext");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute16347891570() {
        Whitelist whitelist = new Whitelist();
        whitelist.addEnforcedAttribute("$<",":nth-last-child(",":gt)");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute20400349851() {
        Whitelist whitelist = new Whitelist();
        whitelist.addEnforcedAttribute("bodz","thead","typf");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute15464954372() {
        Whitelist whitelist = new Whitelist();
        whitelist.addEnforcedAttribute("*>","*<","deflatf");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute12686582013() {
        Whitelist whitelist = new Whitelist();
        whitelist.addEnforcedAttribute("form",";","]]?");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute13568897934() {
        Whitelist whitelist = new Whitelist();
        whitelist.addEnforcedAttribute("eveo",":matchesOwn'","com");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute21221604140() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeEnforcedAttribute(":containsOwn)","selecu");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute1102658201() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeEnforcedAttribute("lh","tbodz");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute17187801822() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeEnforcedAttribute(":only-of-type","http:0");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute12426089503() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeEnforcedAttribute("http:0","</");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute13660233114() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeEnforcedAttribute(":only-of-typf","link");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12620() {
        Whitelist whitelist = new Whitelist();
        whitelist.preserveRelativeLinks(true);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12621() {
        Whitelist whitelist = new Whitelist();
        whitelist.preserveRelativeLinks(true);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12622() {
        Whitelist whitelist = new Whitelist();
        whitelist.preserveRelativeLinks(true);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12623() {
        Whitelist whitelist = new Whitelist();
        whitelist.preserveRelativeLinks(true);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks12624() {
        Whitelist whitelist = new Whitelist();
        whitelist.preserveRelativeLinks(true);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols9571272930() {
        Whitelist whitelist = new Whitelist();
        whitelist.addProtocols("imf","noscripu","mati");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols905856991() {
        Whitelist whitelist = new Whitelist();
        whitelist.addProtocols("]]>","a",":lt)");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols17905504932() {
        Whitelist whitelist = new Whitelist();
        whitelist.addProtocols("ruby","titlf","bodz");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols14846924983() {
        Whitelist whitelist = new Whitelist();
        whitelist.addProtocols("*",":nth-last-of-type'","basf");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols888480754() {
        Whitelist whitelist = new Whitelist();
        whitelist.addProtocols("]]=","bq","~<");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols17545717140() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeProtocols("svg","htmm","deflate");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols4092748761() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeProtocols("lh","isindew","(");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols20398962442() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeProtocols(":matchesOwn'",":not)","bodz");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols766321923() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeProtocols("svh","[a-zA-Z_:][-a-zA-Z0-9_:.])",":first-of-typd");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols12633725384() {
        Whitelist whitelist = new Whitelist();
        whitelist.removeProtocols("[","Set-Cookif","lh");
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain18678420530() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.main("[a-zA-Z_:][-a-zA-Z0-9_:.])");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain32301() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.main("dc");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain14711890862() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.main(":nth-last-child)");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain14711890853() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.main(":nth-last-child(");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain33044() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.main("h1");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText310() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.getPlainText(null);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText311() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.getPlainText(null);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText312() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.getPlainText(null);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText313() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.getPlainText(null);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText314() {
        HtmlToPlainText htmltoplaintext = new HtmlToPlainText();
        htmltoplaintext.getPlainText(null);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain17652509290() {
        Wikipedia wikipedia = new Wikipedia();
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","\"","charses","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio",":has(","gzip",":has)","gziq","<.","</","<0","[a-zA-Z_:][-a-zA-Z0-9_:.]+","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html",":first-child","Set-Cookie","htmk",":first-chilc","Set-Cookid","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root","US-ASCIH","http:/","http:.","US-ASCIJ","noembec","US-ASCII","http:0","noscrips","noscript","noscripu","optioo","optiom","option","boundary","boundarz","img","imf","boundarx","imh","link","linl","linj","basefont","basefonu","head","heae","nobs","nobr","nobq"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain6709719411() {
        Wikipedia wikipedia = new Wikipedia();
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt("});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain16012921692() {
        Wikipedia wikipedia = new Wikipedia();
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain4945867073() {
        Wikipedia wikipedia = new Wikipedia();
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain12185935174() {
        Wikipedia wikipedia = new Wikipedia();
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain5081983870() {
        ListLinks listlinks = new ListLinks();
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","\"","charses","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio",":has(","gzip",":has)","gziq","<.","</","<0","[a-zA-Z_:][-a-zA-Z0-9_:.]+","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html",":first-child","Set-Cookie","htmk",":first-chilc","Set-Cookid","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root","US-ASCIH","http:/","http:.","US-ASCIJ","noembec","US-ASCII","http:0","noscrips","noscript","noscripu","optioo","optiom","option","boundary","boundarz","img"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain13307545591() {
        ListLinks listlinks = new ListLinks();
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","\"","charses","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio",":has(","gzip",":has)","gziq","<.","</","<0","[a-zA-Z_:][-a-zA-Z0-9_:.]+","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html",":first-child","Set-Cookie","htmk",":first-chilc","Set-Cookid","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root","US-ASCIH","http:/","http:.","US-ASCIJ","noembec","US-ASCII","http:0","noscrips","noscript","noscripu","optioo","optiom","option","boundary","boundarz","img","imf","boundarx","imh"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain792909962() {
        ListLinks listlinks = new ListLinks();
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain15827856293() {
        ListLinks listlinks = new ListLinks();
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du",":eq)","$<","http-equiu",":eq(","$=","http-equiv",":eq'","$>","http-equiw","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name",":nth-of-type)","httq","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","\"","charses","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio",":has(","gzip",":has)","gziq","<.","</","<0","[a-zA-Z_:][-a-zA-Z0-9_:.]+","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html",":first-child","Set-Cookie","htmk",":first-chilc","Set-Cookid","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain3228362524() {
        ListLinks listlinks = new ListLinks();
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType10() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getMimeType();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType11() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getMimeType();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType12() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getMimeType();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType13() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getMimeType();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType14() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getMimeType();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl10() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getUrl();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl11() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getUrl();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl12() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getUrl();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl13() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getUrl();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl14() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.getUrl();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiontoString10() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.toString();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiontoString11() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.toString();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiontoString12() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.toString();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiontoString13() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.toString();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiontoString14() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = new UnsupportedMimeTypeException();
        unsupportedmimetypeexception.toString();
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode10() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getStatusCode();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode11() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getStatusCode();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode12() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getStatusCode();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode13() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getStatusCode();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode14() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getStatusCode();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl10() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getUrl();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl11() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getUrl();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl12() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getUrl();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl13() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getUrl();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl14() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.getUrl();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiontoString10() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.toString();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiontoString11() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.toString();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiontoString12() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.toString();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiontoString13() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.toString();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiontoString14() {
        HttpStatusException httpstatusexception = new HttpStatusException();
        httpstatusexception.toString();
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse310() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse311() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse312() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse313() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse314() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9610() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9611() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9612() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9613() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9614() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9610() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9611() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9612() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9613() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse9614() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.traverse(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9610() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9611() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9612() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9613() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9614() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9610() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9611() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9612() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9613() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter9614() {
        NodeTraversor nodetraversor = new NodeTraversor();
        nodetraversor.filter(null,null);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9610() {
        Collector collector = new Collector();
        collector.collect(null,null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9611() {
        Collector collector = new Collector();
        collector.collect(null,null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9612() {
        Collector collector = new Collector();
        collector.collect(null,null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9613() {
        Collector collector = new Collector();
        collector.collect(null,null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect9614() {
        Collector collector = new Collector();
        collector.collect(null,null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9610() {
        Collector collector = new Collector();
        collector.findFirst(null,null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9611() {
        Collector collector = new Collector();
        collector.findFirst(null,null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9612() {
        Collector collector = new Collector();
        collector.findFirst(null,null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9613() {
        Collector collector = new Collector();
        collector.findFirst(null,null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst9614() {
        Collector collector = new Collector();
        collector.findFirst(null,null);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testElementsclone10() {
        Elements elements = new Elements();
        elements.clone();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsclone11() {
        Elements elements = new Elements();
        elements.clone();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsclone12() {
        Elements elements = new Elements();
        elements.clone();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsclone13() {
        Elements elements = new Elements();
        elements.clone();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsclone14() {
        Elements elements = new Elements();
        elements.clone();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr569515650() {
        Elements elements = new Elements();
        elements.attr(":not'");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr33480051() {
        Elements elements = new Elements();
        elements.attr("metb");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr570706512() {
        Elements elements = new Elements();
        elements.attr(":root");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr10548386273() {
        Elements elements = new Elements();
        elements.attr(":first-chilc");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr35118014() {
        Elements elements = new Elements();
        elements.attr("ruby");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr32110810() {
        Elements elements = new Elements();
        elements.hasAttr("hree");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr30164331() {
        Elements elements = new Elements();
        elements.hasAttr("basf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr13215466002() {
        Elements elements = new Elements();
        elements.hasAttr("templatd");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr14563() {
        Elements elements = new Elements();
        elements.hasAttr("*{");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr39984() {
        Elements elements = new Elements();
        elements.hasAttr("~=");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr1102773770() {
        Elements elements = new Elements();
        elements.eachAttr("tfoot");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr941() {
        Elements elements = new Elements();
        elements.eachAttr("?");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr1003581202() {
        Elements elements = new Elements();
        elements.eachAttr("inpus");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr358799183() {
        Elements elements = new Elements();
        elements.eachAttr("#texs");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr1099034() {
        Elements elements = new Elements();
        elements.eachAttr("ode");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr8511797560() {
        Elements elements = new Elements();
        elements.attr("rubz","checkec");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr14611823261() {
        Elements elements = new Elements();
        elements.attr("isindew",":matchesOwn)");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr1134600452() {
        Elements elements = new Elements();
        elements.attr("type","UTF-");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr16545803813() {
        Elements elements = new Elements();
        elements.attr("base","DOCTYPF");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr20797431854() {
        Elements elements = new Elements();
        elements.attr("html","noembee");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr11346655520() {
        Elements elements = new Elements();
        elements.removeAttr("keygen");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr14562253621() {
        Elements elements = new Elements();
        elements.removeAttr(":matches(");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr14562253622() {
        Elements elements = new Elements();
        elements.removeAttr(":matches(");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr33868643() {
        Elements elements = new Elements();
        elements.removeAttr("nobr");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr33084() {
        Elements elements = new Elements();
        elements.removeAttr("h5");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass2709408270() {
        Elements elements = new Elements();
        elements.addClass("disabled");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass1188411() {
        Elements elements = new Elements();
        elements.addClass("xmo");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass32482() {
        Elements elements = new Elements();
        elements.addClass("du");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass1082706183() {
        Elements elements = new Elements();
        elements.addClass("radio");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass37274() {
        Elements elements = new Elements();
        elements.addClass("td");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass15368918740() {
        Elements elements = new Elements();
        elements.removeClass("checkbox");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass17480897431() {
        Elements elements = new Elements();
        elements.removeClass("DOCTYPE");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass31822() {
        Elements elements = new Elements();
        elements.removeClass("bq");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass33480033() {
        Elements elements = new Elements();
        elements.removeClass("met`");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass18678420514() {
        Elements elements = new Elements();
        elements.removeClass("[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass33680() {
        Elements elements = new Elements();
        elements.toggleClass("hq");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass12269463001() {
        Elements elements = new Elements();
        elements.toggleClass(":containsData(");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass11414281682() {
        Elements elements = new Elements();
        elements.toggleClass("[CDATA[");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass18285123() {
        Elements elements = new Elements();
        elements.toggleClass(":eq'");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass13944() {
        Elements elements = new Elements();
        elements.toggleClass("*=");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass33480040() {
        Elements elements = new Elements();
        elements.hasClass("meta");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass35756421() {
        Elements elements = new Elements();
        elements.hasClass("typf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass358799202() {
        Elements elements = new Elements();
        elements.hasClass("#texu");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass15515509553() {
        Elements elements = new Elements();
        elements.hasClass("noscript");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass37424() {
        Elements elements = new Elements();
        elements.hasClass("ts");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval10() {
        Elements elements = new Elements();
        elements.val();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval11() {
        Elements elements = new Elements();
        elements.val();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval12() {
        Elements elements = new Elements();
        elements.val();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval13() {
        Elements elements = new Elements();
        elements.val();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval14() {
        Elements elements = new Elements();
        elements.val();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval14580() {
        Elements elements = new Elements();
        elements.val("*}");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval12091() {
        Elements elements = new Elements();
        elements.val("$>");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval12068418932() {
        Elements elements = new Elements();
        elements.val("http:.");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval1097804313() {
        Elements elements = new Elements();
        elements.val("styld");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval31490264() {
        Elements elements = new Elements();
        elements.val("forl");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext10() {
        Elements elements = new Elements();
        elements.text();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext11() {
        Elements elements = new Elements();
        elements.text();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext12() {
        Elements elements = new Elements();
        elements.text();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext13() {
        Elements elements = new Elements();
        elements.text();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext14() {
        Elements elements = new Elements();
        elements.text();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText10() {
        Elements elements = new Elements();
        elements.hasText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText11() {
        Elements elements = new Elements();
        elements.hasText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText12() {
        Elements elements = new Elements();
        elements.hasText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText13() {
        Elements elements = new Elements();
        elements.hasText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText14() {
        Elements elements = new Elements();
        elements.hasText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText10() {
        Elements elements = new Elements();
        elements.eachText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText11() {
        Elements elements = new Elements();
        elements.eachText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText12() {
        Elements elements = new Elements();
        elements.eachText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText13() {
        Elements elements = new Elements();
        elements.eachText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText14() {
        Elements elements = new Elements();
        elements.eachText();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml10() {
        Elements elements = new Elements();
        elements.html();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml11() {
        Elements elements = new Elements();
        elements.html();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml12() {
        Elements elements = new Elements();
        elements.html();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml13() {
        Elements elements = new Elements();
        elements.html();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml14() {
        Elements elements = new Elements();
        elements.html();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml10() {
        Elements elements = new Elements();
        elements.outerHtml();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml11() {
        Elements elements = new Elements();
        elements.outerHtml();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml12() {
        Elements elements = new Elements();
        elements.outerHtml();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml13() {
        Elements elements = new Elements();
        elements.outerHtml();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml14() {
        Elements elements = new Elements();
        elements.outerHtml();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoString10() {
        Elements elements = new Elements();
        elements.toString();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoString11() {
        Elements elements = new Elements();
        elements.toString();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoString12() {
        Elements elements = new Elements();
        elements.toString();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoString13() {
        Elements elements = new Elements();
        elements.toString();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoString14() {
        Elements elements = new Elements();
        elements.toString();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName31490280() {
        Elements elements = new Elements();
        elements.tagName("forn");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName10032436871() {
        Elements elements = new Elements();
        elements.tagName("textarea");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName1102773782() {
        Elements elements = new Elements();
        elements.tagName("tfoou");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName37283() {
        Elements elements = new Elements();
        elements.tagName("te");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName12084() {
        Elements elements = new Elements();
        elements.tagName("$=");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml1143060() {
        Elements elements = new Elements();
        elements.html("svf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml31255621() {
        Elements elements = new Elements();
        elements.html("eveo");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml14711890862() {
        Elements elements = new Elements();
        elements.html(":nth-last-child)");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml20913044543() {
        Elements elements = new Elements();
        elements.html("isindew");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml15451126514() {
        Elements elements = new Elements();
        elements.html("deflatf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend1188370() {
        Elements elements = new Elements();
        elements.prepend("xmk");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend1143061() {
        Elements elements = new Elements();
        elements.prepend("svf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend1650854882() {
        Elements elements = new Elements();
        elements.prepend("http-equiv");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend1099033() {
        Elements elements = new Elements();
        elements.prepend("ode");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend10761623194() {
        Elements elements = new Elements();
        elements.prepend(":contains)");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend32110820() {
        Elements elements = new Elements();
        elements.append("href");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend35367441() {
        Elements elements = new Elements();
        elements.append("spam");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend15368918752() {
        Elements elements = new Elements();
        elements.append("checkboy");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend33868643() {
        Elements elements = new Elements();
        elements.append("nobr");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend18690634824() {
        Elements elements = new Elements();
        elements.append("sarcasl");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore18245830() {
        Elements elements = new Elements();
        elements.before(":alm");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore987181() {
        Elements elements = new Elements();
        elements.before("cok");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore17209582742() {
        Elements elements = new Elements();
        elements.before("basefons");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore1103714483() {
        Elements elements = new Elements();
        elements.before("titlf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore33054() {
        Elements elements = new Elements();
        elements.before("h2");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter35756410() {
        Elements elements = new Elements();
        elements.after("type");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter1102563211() {
        Elements elements = new Elements();
        elements.after("text/");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter1097804332() {
        Elements elements = new Elements();
        elements.after("stylf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter11346655523() {
        Elements elements = new Elements();
        elements.after("keygen");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter17571249774() {
        Elements elements = new Elements();
        elements.after(":emptx");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap18245820() {
        Elements elements = new Elements();
        elements.wrap(":all");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap33868631() {
        Elements elements = new Elements();
        elements.wrap("nobq");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap18690634822() {
        Elements elements = new Elements();
        elements.wrap("sarcasl");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap18912061163() {
        Elements elements = new Elements();
        elements.wrap(":nth-of-type(");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap14229508274() {
        Elements elements = new Elements();
        elements.wrap("action");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap10() {
        Elements elements = new Elements();
        elements.unwrap();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap11() {
        Elements elements = new Elements();
        elements.unwrap();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap12() {
        Elements elements = new Elements();
        elements.unwrap();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap13() {
        Elements elements = new Elements();
        elements.unwrap();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap14() {
        Elements elements = new Elements();
        elements.unwrap();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty10() {
        Elements elements = new Elements();
        elements.empty();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty11() {
        Elements elements = new Elements();
        elements.empty();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty12() {
        Elements elements = new Elements();
        elements.empty();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty13() {
        Elements elements = new Elements();
        elements.empty();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty14() {
        Elements elements = new Elements();
        elements.empty();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove10() {
        Elements elements = new Elements();
        elements.remove();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove11() {
        Elements elements = new Elements();
        elements.remove();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove12() {
        Elements elements = new Elements();
        elements.remove();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove13() {
        Elements elements = new Elements();
        elements.remove();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove14() {
        Elements elements = new Elements();
        elements.remove();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect807731720() {
        Elements elements = new Elements();
        elements.select("optgrouq");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect10032436861() {
        Elements elements = new Elements();
        elements.select("textareb");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect17480897432() {
        Elements elements = new Elements();
        elements.select("DOCTYPE");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect570706513() {
        Elements elements = new Elements();
        elements.select(":root");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect18245814() {
        Elements elements = new Elements();
        elements.select(":alk");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot7423139270() {
        Elements elements = new Elements();
        elements.not("checkee");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot1003134651() {
        Elements elements = new Elements();
        elements.not("imagd");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot29875592() {
        Elements elements = new Elements();
        elements.not("abs:");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot35118013() {
        Elements elements = new Elements();
        elements.not("ruby");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot17480897434() {
        Elements elements = new Elements();
        elements.not("DOCTYPE");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq2710() {
        Elements elements = new Elements();
        elements.eq(240);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq681() {
        Elements elements = new Elements();
        elements.eq(-99);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq4312() {
        Elements elements = new Elements();
        elements.eq(400);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq554273() {
        Elements elements = new Elements();
        elements.eq(55396);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq684() {
        Elements elements = new Elements();
        elements.eq(-99);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis21153115420() {
        Elements elements = new Elements();
        elements.is("boundarz");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis11151() {
        Elements elements = new Elements();
        elements.is("!=");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis19804204652() {
        Elements elements = new Elements();
        elements.is("Set-Cookif");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis11912143963() {
        Elements elements = new Elements();
        elements.is("iframf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis19804204654() {
        Elements elements = new Elements();
        elements.is("Set-Cookif");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext10() {
        Elements elements = new Elements();
        elements.next();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext11() {
        Elements elements = new Elements();
        elements.next();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext12() {
        Elements elements = new Elements();
        elements.next();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext13() {
        Elements elements = new Elements();
        elements.next();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext14() {
        Elements elements = new Elements();
        elements.next();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext1003134660() {
        Elements elements = new Elements();
        elements.next("image");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext20353119931() {
        Elements elements = new Elements();
        elements.next(":first-of-typf");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext1605222322() {
        Elements elements = new Elements();
        elements.next("bgsounc");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext18285123() {
        Elements elements = new Elements();
        elements.next(":eq'");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext12269463004() {
        Elements elements = new Elements();
        elements.next(":containsData(");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll10() {
        Elements elements = new Elements();
        elements.nextAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll11() {
        Elements elements = new Elements();
        elements.nextAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll12() {
        Elements elements = new Elements();
        elements.nextAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll13() {
        Elements elements = new Elements();
        elements.nextAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll14() {
        Elements elements = new Elements();
        elements.nextAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll20913044540() {
        Elements elements = new Elements();
        elements.nextAll("isindew");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll37301() {
        Elements elements = new Elements();
        elements.nextAll("tg");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll1650854872() {
        Elements elements = new Elements();
        elements.nextAll("http-equiw");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll18912061163() {
        Elements elements = new Elements();
        elements.nextAll(":nth-of-type(");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll1102563224() {
        Elements elements = new Elements();
        elements.nextAll("text0");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev10() {
        Elements elements = new Elements();
        elements.prev();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev11() {
        Elements elements = new Elements();
        elements.prev();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev12() {
        Elements elements = new Elements();
        elements.prev();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev13() {
        Elements elements = new Elements();
        elements.prev();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev14() {
        Elements elements = new Elements();
        elements.prev();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev10101369390() {
        Elements elements = new Elements();
        elements.prev("optioo");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev20913044541() {
        Elements elements = new Elements();
        elements.prev("isindew");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev1103714462() {
        Elements elements = new Elements();
        elements.prev("titld");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev14711890863() {
        Elements elements = new Elements();
        elements.prev(":nth-last-child)");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev32110824() {
        Elements elements = new Elements();
        elements.prev("href");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll10() {
        Elements elements = new Elements();
        elements.prevAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll11() {
        Elements elements = new Elements();
        elements.prevAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll12() {
        Elements elements = new Elements();
        elements.prevAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll13() {
        Elements elements = new Elements();
        elements.prevAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll14() {
        Elements elements = new Elements();
        elements.prevAll();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll987200() {
        Elements elements = new Elements();
        elements.prevAll("com");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll31831() {
        Elements elements = new Elements();
        elements.prevAll("br");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll11346655522() {
        Elements elements = new Elements();
        elements.prevAll("keygen");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll12174874153() {
        Elements elements = new Elements();
        elements.prevAll("hidden");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll18305294() {
        Elements elements = new Elements();
        elements.prevAll(":gt)");
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents10() {
        Elements elements = new Elements();
        elements.parents();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents11() {
        Elements elements = new Elements();
        elements.parents();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents12() {
        Elements elements = new Elements();
        elements.parents();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents13() {
        Elements elements = new Elements();
        elements.parents();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents14() {
        Elements elements = new Elements();
        elements.parents();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst10() {
        Elements elements = new Elements();
        elements.first();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst11() {
        Elements elements = new Elements();
        elements.first();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst12() {
        Elements elements = new Elements();
        elements.first();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst13() {
        Elements elements = new Elements();
        elements.first();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst14() {
        Elements elements = new Elements();
        elements.first();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast10() {
        Elements elements = new Elements();
        elements.last();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast11() {
        Elements elements = new Elements();
        elements.last();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast12() {
        Elements elements = new Elements();
        elements.last();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast13() {
        Elements elements = new Elements();
        elements.last();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast14() {
        Elements elements = new Elements();
        elements.last();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse310() {
        Elements elements = new Elements();
        elements.traverse(null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse311() {
        Elements elements = new Elements();
        elements.traverse(null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse312() {
        Elements elements = new Elements();
        elements.traverse(null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse313() {
        Elements elements = new Elements();
        elements.traverse(null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse314() {
        Elements elements = new Elements();
        elements.traverse(null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter310() {
        Elements elements = new Elements();
        elements.filter(null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter311() {
        Elements elements = new Elements();
        elements.filter(null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter312() {
        Elements elements = new Elements();
        elements.filter(null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter313() {
        Elements elements = new Elements();
        elements.filter(null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter314() {
        Elements elements = new Elements();
        elements.filter(null);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms10() {
        Elements elements = new Elements();
        elements.forms();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms11() {
        Elements elements = new Elements();
        elements.forms();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms12() {
        Elements elements = new Elements();
        elements.forms();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms13() {
        Elements elements = new Elements();
        elements.forms();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms14() {
        Elements elements = new Elements();
        elements.forms();
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse29875580() {
        QueryParser queryparser = new QueryParser();
        queryparser.parse("abs9");
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse30294411() {
        QueryParser queryparser = new QueryParser();
        queryparser.parse("body");
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse7390744102() {
        QueryParser queryparser = new QueryParser();
        queryparser.parse("charses");
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse569515663() {
        QueryParser queryparser = new QueryParser();
        queryparser.parse(":not(");
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse358799204() {
        QueryParser queryparser = new QueryParser();
        queryparser.parse("#texu");
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect8226828010() {
        Selector selector = new Selector();
        selector.select("http-equiw",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect17654985151() {
        Selector selector = new Selector();
        selector.select(":not'",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect12068392732() {
        Selector selector = new Selector();
        selector.select("httpr",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect500923893() {
        Selector selector = new Selector();
        selector.select("caption",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect451984() {
        Selector selector = new Selector();
        selector.select("*}",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9610() {
        Selector selector = new Selector();
        selector.select(null,null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9611() {
        Selector selector = new Selector();
        selector.select(null,null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9612() {
        Selector selector = new Selector();
        selector.select(null,null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9613() {
        Selector selector = new Selector();
        selector.select(null,null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9614() {
        Selector selector = new Selector();
        selector.select(null,null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect10357832560() {
        Selector selector = new Selector();
        selector.select("textare`",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect1025171() {
        Selector selector = new Selector();
        selector.select("h4",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect13298376882() {
        Selector selector = new Selector();
        selector.select(":first-of-type",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect1036691463() {
        Selector selector = new Selector();
        selector.select("matg",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect30602584() {
        Selector selector = new Selector();
        selector.select("cok",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst939126710() {
        Selector selector = new Selector();
        selector.selectFirst("body",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst17527107871() {
        Selector selector = new Selector();
        selector.selectFirst("colgrouo",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst8534393182() {
        Selector selector = new Selector();
        selector.selectFirst("noscrips",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst1044703() {
        Selector selector = new Selector();
        selector.selectFirst("hs",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst991523844() {
        Selector selector = new Selector();
        selector.selectFirst("heae",null);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload5915904340() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,":matchesOwn)",":matchesOwn(");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload1105082511() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,"li","titlf");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload36699522() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,"hq","span");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload18466025563() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,"deflate","noframet");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload17621833584() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,":has'","UTF-");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload13267794180() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,":first-of-typf","bodx");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload15451789271() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,"$>","deflatd");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload8765375172() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,":last-of-typd",":lt(");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload13626871703() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,"base",":matches)");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload15369552374() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,"!=","checkbow");
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload7492184750() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,"#roos","http-equiu",null);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload16686571491() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,"noembed","plaintexs",null);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload8492377642() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,"base","frameseu",null);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload9056418293() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,"bgsounc","Set-Cookie",null);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload1155153584() {
        DataUtil datautil = new DataUtil();
        datautil.load(null,"table","charseu",null);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer9650() {
        DataUtil datautil = new DataUtil();
        datautil.readToByteBuffer(null,4);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer12011() {
        DataUtil datautil = new DataUtil();
        datautil.readToByteBuffer(null,240);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer10622() {
        DataUtil datautil = new DataUtil();
        datautil.readToByteBuffer(null,101);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer563573() {
        DataUtil datautil = new DataUtil();
        datautil.readToByteBuffer(null,55396);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer563574() {
        DataUtil datautil = new DataUtil();
        datautil.readToByteBuffer(null,55396);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull310() {
        Validate validate = new Validate();
        validate.notNull(null);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull311() {
        Validate validate = new Validate();
        validate.notNull(null);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull312() {
        Validate validate = new Validate();
        validate.notNull(null);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull313() {
        Validate validate = new Validate();
        validate.notNull(null);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull314() {
        Validate validate = new Validate();
        validate.notNull(null);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull16183964890() {
        Validate validate = new Validate();
        validate.notNull(null,":only-of-typd");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull9060206761() {
        Validate validate = new Validate();
        validate.notNull(null,"selecs");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull33489342() {
        Validate validate = new Validate();
        validate.notNull(null,"meta");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull10176260263() {
        Validate validate = new Validate();
        validate.notNull(null,":nth-last-of-type'");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull31264914() {
        Validate validate = new Validate();
        validate.notNull(null,"even");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12620() {
        Validate validate = new Validate();
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12621() {
        Validate validate = new Validate();
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12622() {
        Validate validate = new Validate();
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12623() {
        Validate validate = new Validate();
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue12624() {
        Validate validate = new Validate();
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue1103659900() {
        Validate validate = new Validate();
        validate.isTrue(true,"thead");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue391641() {
        Validate validate = new Validate();
        validate.isTrue(true,"*");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue10100978482() {
        Validate validate = new Validate();
        validate.isTrue(true,"optioo");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue32523483() {
        Validate validate = new Validate();
        validate.isTrue(true,"htmk");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue32282034() {
        Validate validate = new Validate();
        validate.isTrue(true,"gzio");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12620() {
        Validate validate = new Validate();
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12621() {
        Validate validate = new Validate();
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12622() {
        Validate validate = new Validate();
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12623() {
        Validate validate = new Validate();
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse12624() {
        Validate validate = new Validate();
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse18678029600() {
        Validate validate = new Validate();
        validate.isFalse(true,"[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse403001() {
        Validate validate = new Validate();
        validate.isFalse(true,"$>");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse402062() {
        Validate validate = new Validate();
        validate.isFalse(true,"!=");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse32282053() {
        Validate validate = new Validate();
        validate.isFalse(true,"gziq");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse1098195244() {
        Validate validate = new Validate();
        validate.isFalse(true,"stylf");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements13706511120() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{});
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements4500037111() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{});
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements21349916632() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{});
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements4809718023() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{});
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements15868451094() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{});
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements7907715310() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{},"imagd");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements3279303301() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{},":last-of-type");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements7310812152() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{},"checkee");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements18429330443() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{},":lt(");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements13964037274() {
        Validate validate = new Validate();
        validate.noNullElements(new Object[]{},"typf");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty34830() {
        Validate validate = new Validate();
        validate.notEmpty("lh");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty21065455181() {
        Validate validate = new Validate();
        validate.notEmpty(":last-of-type");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty1044182() {
        Validate validate = new Validate();
        validate.notEmpty("img");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty26152063() {
        Validate validate = new Validate();
        validate.notEmpty("UTF.");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty30164324() {
        Validate validate = new Validate();
        validate.notEmpty("base");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty21152184190() {
        Validate validate = new Validate();
        validate.notEmpty("^<","boundary");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty1907657391() {
        Validate validate = new Validate();
        validate.notEmpty("disabled","dt");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty19286742() {
        Validate validate = new Validate();
        validate.notEmpty("de",":eq(");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty13264508243() {
        Validate validate = new Validate();
        validate.notEmpty(":first-of-typf","nobr");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty14364740014() {
        Validate validate = new Validate();
        validate.notEmpty("charseu","tq");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail33060() {
        Validate validate = new Validate();
        validate.fail("h3");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail10552537211() {
        Validate validate = new Validate();
        validate.fail(":matchesOwn'");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail10176250982() {
        Validate validate = new Validate();
        validate.fail(":nth-last-of-type)");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail1099023() {
        Validate validate = new Validate();
        validate.fail("odd");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail1605222324() {
        Validate validate = new Validate();
        validate.fail("bgsounc");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect37400() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect("tq");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect1605222301() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect("bgsoune");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect11912143962() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect("iframf");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect17571249793() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect(":emptz");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect20919604294() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect(":only-chilc");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.connect(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl11912143970() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url("iframe");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl12174874161() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url("hiddem");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl11927218622() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url("noframes");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl20919604283() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url(":only-child");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl570706514() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.url(":root");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy8763685090() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy("tfoot",100);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy3477122081() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy(":nth-child(",1114112);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy16438481122() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy("DOCTYPE",55297);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy500922583() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy("captioo",100);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy3990079694() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.proxy("checkboy",100);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent12070() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.userAgent("$<");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent567593341() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.userAgent(":has'");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent32134782() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.userAgent("htto");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent1143063() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.userAgent("svf");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent9076856534() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.userAgent("scripu");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout5310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.timeout(500);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout553281() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.timeout(55297);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout1342() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.timeout(103);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout1343() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.timeout(103);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout2234() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.timeout(192);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize320() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.maxBodySize(1);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize341() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.maxBodySize(3);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize572742() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.maxBodySize(57243);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize2233() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.maxBodySize(192);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize553284() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.maxBodySize(55297);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12620() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.followRedirects(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12621() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.followRedirects(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12622() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.followRedirects(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12623() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.followRedirects(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects12624() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.followRedirects(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer13215465980() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.referrer("templatf");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer33480051() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.referrer("metb");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer21011357992() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.referrer(":matchText");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer10548386293() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.referrer(":first-chile");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer19732341974() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.referrer("plaintexs");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.method(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.method(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.method(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.method(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.method(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12620() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreHttpErrors(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12621() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreHttpErrors(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12622() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreHttpErrors(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12623() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreHttpErrors(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors12624() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreHttpErrors(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12620() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreContentType(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12621() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreContentType(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12622() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreContentType(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12623() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreContentType(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType12624() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.ignoreContentType(true);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata597338660() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":gt'","abs;");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata4461330961() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":contains(","caption");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata1023658312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("heae","htto");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata30895203() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("<0","bodz");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata940050194() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("bodz","]]=");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.sslSocketFactory(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.sslSocketFactory(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.sslSocketFactory(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.sslSocketFactory(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.sslSocketFactory(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata12686540790() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("forl","de",null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata6630729061() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("href","frameses",null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata16945118892() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("ruby","noframet",null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata15259481763() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("tabld",":containsOwn)",null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata18012443304() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("gzip","Set-Cookie",null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata4390226830() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":only-of-typd","img",null,"[CDATA[");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata4165141() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("!<","http:0",null,"imagd");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata13969883812() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("http:0",":last-of-typf",null,"optgroup");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata21392033553() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("noembec","~<",null,"disablee");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata4475029024() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":containsOwn)","optiom",null,"style");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata26152050() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("UTF-");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata12068418911() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("http:0");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata9503947302() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("command");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata16449536123() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("frameset");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata32110814() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("hree");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata21011357990() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":matchText");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata19732341991() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data("plaintexu");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata20353119912() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":first-of-typd");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata570706503() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(":roos");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata904() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.data(";");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody1103714470() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.requestBody("title");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody12269462991() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.requestBody(":containsData)");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody18678420532() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.requestBody("[a-zA-Z_:][-a-zA-Z0-9_:.])");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody17209582733() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.requestBody("basefont");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody19804204654() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.requestBody("Set-Cookif");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader14542388830() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.header(":matches(","charses");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader30876881() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.header("dd","abs9");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader996207862() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.header("[","httpt");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader36272963() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.header("\'","span");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader12589737754() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.header(":only-of-type","titlf");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.headers(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.headers(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.headers(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.headers(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.headers(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie10001833980() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookie("com","textarea");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie1036692401() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookie("matg","^");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie3044450482() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookie("xmm",":last-child");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie6360950553() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookie("h6","colgrouo");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie16376181784() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookie("\"\"","noscripu");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookies(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookies(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookies(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookies(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.cookies(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.parser(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.parser(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.parser(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.parser(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.parser(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget10() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.get();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget11() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.get();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget12() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.get();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget13() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.get();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget14() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.get();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost10() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.post();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost11() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.post();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost12() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.post();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost13() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.post();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost14() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.post();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute10() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.execute();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute11() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.execute();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute12() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.execute();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute13() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.execute();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute14() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.execute();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest10() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest11() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest12() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest13() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest14() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.request(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse10() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse11() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse12() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse13() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse14() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response();
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse310() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse311() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse312() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse313() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse314() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.response(null);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset10101369400() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.postDataCharset("option");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset13951() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.postDataCharset("*>");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset10761623192() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.postDataCharset(":contains)");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset27763633() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.postDataCharset("\"\"");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset15451126494() {
        HttpConnection httpconnection = new HttpConnection();
        httpconnection.postDataCharset("deflatd");
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup310() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.fromJsoup(null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup311() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.fromJsoup(null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup312() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.fromJsoup(null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup313() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.fromJsoup(null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup314() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.fromJsoup(null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9610() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.convert(null,null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9611() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.convert(null,null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9612() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.convert(null,null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9613() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.convert(null,null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert9614() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.convert(null,null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString310() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.asString(null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString311() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.asString(null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString312() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.asString(null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString313() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.asString(null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString314() {
        W3CDom w3cdom = new W3CDom();
        w3cdom.asString(null);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testTesttest12251677360() {
        Test test = new Test();
        test.test(57343,":containsData)");
        assertTrue(test.equals(test));
        try {
            test.equals(test);
        } catch (Exception e) {
            fail("test.equals(test) throws an exception");
        }
        try {
            test.hashCode();
        } catch (Exception e) {
            fail("test.hashCode() throws an exception");
        }
        try {
            test.toString();
        } catch (Exception e) {
            fail("test.toString() throws an exception");
        }
    }
    @Test
    public void testTesttest18973731() {
        Test test = new Test();
        test.test(57342,"xmo");
        assertTrue(test.equals(test));
        try {
            test.equals(test);
        } catch (Exception e) {
            fail("test.equals(test) throws an exception");
        }
        try {
            test.hashCode();
        } catch (Exception e) {
            fail("test.hashCode() throws an exception");
        }
        try {
            test.toString();
        } catch (Exception e) {
            fail("test.toString() throws an exception");
        }
    }
    @Test
    public void testTesttest375548342() {
        Test test = new Test();
        test.test(1114112,"base");
        assertTrue(test.equals(test));
        try {
            test.equals(test);
        } catch (Exception e) {
            fail("test.equals(test) throws an exception");
        }
        try {
            test.hashCode();
        } catch (Exception e) {
            fail("test.hashCode() throws an exception");
        }
        try {
            test.toString();
        } catch (Exception e) {
            fail("test.toString() throws an exception");
        }
    }
    @Test
    public void testTesttest569556593() {
        Test test = new Test();
        test.test(102,":not)");
        assertTrue(test.equals(test));
        try {
            test.equals(test);
        } catch (Exception e) {
            fail("test.equals(test) throws an exception");
        }
        try {
            test.hashCode();
        } catch (Exception e) {
            fail("test.hashCode() throws an exception");
        }
        try {
            test.toString();
        } catch (Exception e) {
            fail("test.toString() throws an exception");
        }
    }
    @Test
    public void testTesttest21153104884() {
        Test test = new Test();
        test.test(4,"boundarz");
        assertTrue(test.equals(test));
        try {
            test.equals(test);
        } catch (Exception e) {
            fail("test.equals(test) throws an exception");
        }
        try {
            test.hashCode();
        } catch (Exception e) {
            fail("test.hashCode() throws an exception");
        }
        try {
            test.toString();
        } catch (Exception e) {
            fail("test.toString() throws an exception");
        }
    }
}